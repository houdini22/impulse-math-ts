{"version":3,"file":"impulse-math-ts.dev.js","mappings":"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","sources":["webpack://impulse-math-ts/./src/typescript/Computation/AbstractComputation.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/dot.ts","webpack://impulse-math-ts/./src/typescript/Computation/ComputationCPU.ts","webpack://impulse-math-ts/./src/typescript/Computation/ComputationMultiCore.ts","webpack://impulse-math-ts/./src/typescript/Computation/MultiCore/dot.ts","webpack://impulse-math-ts/./src/typescript/Computation/index.ts","webpack://impulse-math-ts/./src/typescript/Computation/utils.ts","webpack://impulse-math-ts/./src/typescript/Math/Matrix.ts","webpack://impulse-math-ts/./src/typescript/Math/math.ts","webpack://impulse-math-ts/./build/Debug/computation.node","webpack://impulse-math-ts/external node-commonjs \"path\"","webpack://impulse-math-ts/webpack/bootstrap","webpack://impulse-math-ts/webpack/runtime/compat get default export","webpack://impulse-math-ts/webpack/runtime/define property getters","webpack://impulse-math-ts/webpack/runtime/hasOwnProperty shorthand","webpack://impulse-math-ts/webpack/runtime/make namespace object","webpack://impulse-math-ts/webpack/runtime/node module decorator","webpack://impulse-math-ts/webpack/runtime/publicPath","webpack://impulse-math-ts/./src/typescript/main.ts"],"sourcesContent":["import { Matrix } from \"../Math/Matrix\";\n\ninterface KernelsInterface {\n  [id: string]: (m: Matrix, m2: Matrix | number | void) => Matrix | number;\n}\n\nexport class AbstractComputation {\n  protected kernels: KernelsInterface = {};\n\n  addKernel(name: string, func: (m: Matrix, m2: Matrix | number) => Matrix | number): AbstractComputation {\n    this.kernels[name] = func;\n    return this;\n  }\n\n  execute(name: string, ...args: [Matrix, Matrix] | [Matrix, number] | [Matrix]): Matrix | number {\n    if (!this.kernels[name]) {\n      throw new Error(`Kernel '${name}' not exists.`);\n    }\n    return this.kernels[name].apply(null, args);\n  }\n}\n","import { Matrix } from \"../../Math/Matrix\";\n\nexport const dot = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.cols !== m2.rows) {\n    throw new Error(`DIMENSIONS error. m1.cols ${m1.rows} ${m1.cols} !== m2.rows ${m2.rows} ${m2.cols}.`);\n  }\n  const data = [];\n  for (let row = 0; row < m1.rows; ++row) {\n    data[row] = new Array(m2.cols);\n    for (let col = 0; col < m2.cols; ++col) {\n      data[row][col] = 0;\n      for (let i = 0; i < m1.cols; ++i) {\n        if (m1.data && m2.data) {\n          data[row][col] += m1.data[row][i] * m2.data[i][col];\n        }\n      }\n    }\n  }\n  return new Matrix(m1.rows, m2.cols, data);\n};\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { Matrix } from \"../Math/Matrix\";\nimport { dot } from \"./CPU/dot\";\n\nexport class ComputationCPU extends AbstractComputation {\n  constructor() {\n    super();\n\n    this.addKernel(\"multiply\", dot);\n    /*this.addKernel(\"add\", add);\n    this.addKernel(\"subtract\", subtract);\n    this.addKernel(\"subtractFromNumber\", subtractFromNumber);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"fillZeros\", fillZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"multiplyNumber\", multiplyNumber);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"divideNumber\", divideNumber);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"logisticBackpropagation\", logisticBackpropagation);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"reluBackpropagation\", reluBackpropagation);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"transpose\", transpose);\n    this.addKernel(\"pow\", pow);\n    this.addKernel(\"log\", log);\n    this.addKernel(\"logMinusOne\", logMinusOne);\n    this.addKernel(\"addNumber\", addNumber);*/\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { Matrix } from \"../Math/Matrix\";\nimport { dot } from \"./MultiCore/dot\";\n\nexport class ComputationMultiCore extends AbstractComputation {\n  constructor() {\n    super();\n\n    this.addKernel(\"dot\", dot);\n\n    /*this.addKernel(\"multiply\", dot);\n    this.addKernel(\"add\", add);\n    this.addKernel(\"subtract\", subtract);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"fillZeros\", fillZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"multiplyNumber\", multiplyNumber);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"divideNumber\", divideNumber);\n    this.addKernel(\"softmaxActivation\", softmaxActivation);\n    this.addKernel(\"softmaxLoss\", softmaxLoss);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"purelinLoss\", purelinLoss);\n    this.addKernel(\"transpose\", transpose);*/\n  }\n}\n","import { MatrixMultiply } from \"../../../../build/Debug/computation.node\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport const dot = (m1: Matrix, m2: Matrix) => {\n  console.log(MatrixMultiply([1, 2, 3, 4], [4, 3, 2, 1]));\n};\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { ComputationMultiCore } from \"./ComputationMultiCore\";\nimport { ComputationCPU } from \"./ComputationCPU\";\nimport { setComputation, getComputation } from \"./utils\";\n\nexport { AbstractComputation, ComputationMultiCore, ComputationCPU, setComputation, getComputation };\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { ComputationMultiCore } from \"./ComputationMultiCore\";\nimport { ComputationCPU } from \"./ComputationCPU\";\n\nlet currentComputation: AbstractComputation = new ComputationCPU();\n\nexport const setComputation = (type: AbstractComputation): void => {\n  currentComputation = type;\n};\n\nexport const getComputation = (): AbstractComputation => {\n  return currentComputation;\n};\n","import { getComputation } from \"../Computation\";\n\nexport class Matrix {\n  public rows = 0;\n  public cols = 0;\n  public data: number[][] | null = null;\n\n  constructor(rows = 0, cols = 0, data: number[][] | string[][] | null = null) {\n    this.resize(rows, cols);\n    if (data) {\n      this.generateData(data);\n    }\n  }\n\n  resize(rows: number, cols: number): Matrix {\n    this.rows = rows;\n    this.cols = cols;\n    this.data = new Array(this.rows);\n    for (let row = 0; row < this.rows; row += 1) {\n      this.data[row] = new Array(this.cols);\n    }\n\n    return this;\n  }\n\n  generateData(arr: number[][] | string[][] | null): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = new Array(this.cols);\n    }\n    for (let col = 0; col < this.cols; col += 1) {\n      for (let row = 0; row < this.rows; row += 1) {\n        if (typeof arr[row] === \"number\") {\n          data[row][col] = arr[row];\n        } else {\n          if (typeof arr[row][col] === \"string\") {\n            if (/^[0-9.]+$/.test(String(arr[row][col]))) {\n              data[row][col] = Number(arr[row][col]);\n            } else {\n              data[row][col] = arr[row][col];\n            }\n          } else {\n            data[row][col] = arr[row][col];\n          }\n        }\n      }\n    }\n    this.data = data;\n    return this;\n  }\n\n  sum(): number {\n    let sum = 0.0;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n    }\n    return sum;\n  }\n\n  colwiseSum(): Matrix {\n    const data = [];\n    const t = this.transpose();\n    for (let row = 0; row < t.rows; row += 1) {\n      data[row] = [0];\n      for (let col = 0; col < t.cols; col += 1) {\n        data[row][0] += t.data[row][col];\n      }\n    }\n    return new Matrix(this.cols, 1, data);\n  }\n\n  rowwiseSum(): Matrix {\n    const data = [[]];\n    for (let row = 0; row < this.rows; row += 1) {\n      let sum = 0.0;\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n      data[0].push(sum);\n    }\n    return new Matrix(1, this.rows, data);\n  }\n\n  flatten(): number[] {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        data.push(this.data[row][col]);\n      }\n    }\n    return data;\n  }\n\n  replicate(rows: number, cols: number): Matrix {\n    if (rows === 1 && this.cols === 1 && cols > 1) {\n      const newData = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < cols; col += 1) {\n          newData[row][col] = this.data[row][0];\n        }\n      }\n      return Matrix.from(newData);\n    } else if (cols === 1 && this.rows === 1 && rows > 1) {\n      const newData = [];\n      for (let row = 0; row < rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          newData[row][col] = this.data[0][col];\n        }\n      }\n      return Matrix.from(newData);\n    }\n    return this;\n  }\n\n  transpose(): Matrix {\n    return getComputation().execute(\"transpose\", this) as Matrix;\n  }\n\n  colMaxCoeffIndex(col: number): number {\n    let maxIndex = -1;\n    let max = -Infinity;\n\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data && this.data[row][col] > max) {\n        max = this.data[row][col];\n        maxIndex = row;\n      }\n    }\n\n    return maxIndex;\n  }\n\n  rowMaxCoeffIndex(row: number): number {\n    let maxIndex = -1;\n    let max = -Infinity;\n\n    for (let col = 0; col < this.cols; col += 1) {\n      if (this.data[row][col] > max) {\n        max = this.data[row][col];\n        maxIndex = col;\n      }\n    }\n\n    return maxIndex;\n  }\n\n  block(startRow: number, startCol: number, blockRows: number, blockCols: number): Matrix {\n    const data = [];\n\n    for (let row = startRow, newRow = 0; row < this.rows && row < startRow + blockRows; row += 1, newRow += 1) {\n      data[newRow] = new Array(blockCols);\n      for (let col = startCol, newCol = 0; col < this.cols && col < startCol + blockCols; col += 1, newCol += 1) {\n        data[newRow][newCol] = this.data[row][col];\n      }\n    }\n\n    return new Matrix(blockRows, blockCols, data);\n  }\n\n  col(col: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [this.data[row][col]];\n    }\n    return new Matrix(this.rows, 1, data);\n  }\n\n  row(row: number): Matrix {\n    const data = [];\n    for (let col = 0; col < this.cols; col += 1) {\n      data[col] = [this.data[row][col]];\n    }\n    return new Matrix(this.cols, 1, data);\n  }\n\n  setCol(col: number, tmp: Matrix): Matrix {\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data && tmp.data) {\n        this.data[row][col] = tmp.data[row][0];\n      }\n    }\n    return this;\n  }\n\n  sigmoid() {\n    return this.multiply(-1).exp().add(1).fraction(1);\n  }\n\n  rollToColMatrix(): Matrix {\n    const data = [];\n    let _row = 0;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        data[_row] = [];\n        data[_row++][0] = this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  abs(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.abs(this.data[row][col]);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  mean() {\n    let sum = 0;\n    const numberOfElements = this.rows * this.cols;\n\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n    }\n\n    return sum / numberOfElements;\n  }\n\n  max(): number {\n    let max = -Infinity;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        max = Math.max(this.data[row][col], max);\n      }\n    }\n    return max;\n  }\n\n  setMax(max: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.min(this.data[row][col], max);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setMin(min: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.max(this.data[row][col], min);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setZeros(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = 0;\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setOnes(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = 1;\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setRandom(parameter: number = 1): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = (Math.random() * 4 - 2) * Math.sqrt(2 / parameter); // todo: gaussian distribution;\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  fraction(num: number = 1): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = num / this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  sqrt(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.sqrt(this.data[row][col] + 1e-8);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  dot(m: Matrix): Matrix {\n    return getComputation().execute(\"dot\", this, m) as Matrix;\n  }\n\n  multiply(num: number | Matrix): Matrix {\n    if (typeof num === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          // @ts-ignore\n          data[row][col] = this.data[row][col] * num;\n        }\n      }\n      return Matrix.from(data);\n    } else {\n      if (num.rows !== this.rows || this.cols !== num.cols) {\n        throw new Error(`Dimension error: ${this.shape()} !== ${num.shape()}`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          // @ts-ignore\n          data[row][col] = this.data[row][col] * num.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n  }\n\n  subtract(m: Matrix | number): Matrix {\n    if (typeof m === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] - m;\n        }\n      }\n      return Matrix.from(data);\n    } else {\n      if (this.rows !== m.rows || this.cols !== m.cols) {\n        throw new Error(`Dimensions error: ${this.rows}, ${this.cols} !== ${m.rows}, ${m.cols}`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] - m.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n  }\n\n  forEach(cb: (num: number) => number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = cb(this.data[row][col]);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  shape(): number[] {\n    return [this.rows, this.cols];\n  }\n\n  divide(num: number | Matrix): Matrix {\n    if (typeof num === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] / num;\n        }\n      }\n      return Matrix.from(data);\n    } else {\n      if (num.rows !== this.rows || num.cols !== this.cols) {\n        throw new Error(`Dimensions error (${this.rows}, ${this.cols}) !== (${num.rows}, ${num.cols})`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] / num.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n  }\n\n  minusOne(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = 1 - this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  subtractFromNumber(num: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = num - this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  add(m: Matrix | number): Matrix {\n    if (typeof m === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] + m;\n        }\n      }\n      return Matrix.from(data);\n    } else if (m instanceof Matrix) {\n      if (m.rows !== this.rows || m.cols !== this.cols) {\n        throw new Error(`Dimention error: rows (x: ${this.rows}, y: ${this.cols}) !== (x: ${m.rows}, y: ${m.cols})`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] + m.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n    return this;\n  }\n\n  log(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.log(this.data[row][col] + 1e-8);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  tanh(): Matrix {\n    return this.exp()\n      .subtract(this.multiply(-1).exp())\n      .divide(this.exp().add(this.multiply(-1).exp()));\n  }\n\n  softmax(): Matrix {\n    const max = this.max() - 1e-8;\n    return this.subtract(max).exp().divide(this.rowwiseSum().replicate(this.cols, 1).transpose());\n  }\n\n  exp(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.exp(this.data[row][col] + 1e-8);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  pow(num): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.pow(this.data[row][col], num);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  value(row, col, value = undefined) {\n    if (value === undefined) {\n      return this.data[row][col];\n    }\n    this.data[row][col] = value;\n    return this;\n  }\n\n  copy() {\n    return Matrix.from(this.data);\n  }\n\n  static from(arr: number[][]): Matrix {\n    return new Matrix(arr.length, arr[0]?.length || 0, arr);\n  }\n\n  concat(m: Matrix) {\n    for (let row = 0; row < m.rows; row += 1) {\n      this.data.push(m.data[row]);\n    }\n    return this;\n  }\n}\n","import { Matrix } from \"./Matrix\";\n\nexport const im2col = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  pad_h: number,\n  pad_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const cols = kernel_w * kernel_h * channels;\n  const rows = ((width - kernel_w + 2 * pad_w) / stride_w + 1) * ((height - kernel_h + 2 * pad_h) / stride_h + 1);\n  let currentResultRow = 0;\n  const result = new Matrix(rows, cols).setZeros();\n\n  for (let boundingY = -pad_h; boundingY + kernel_h <= height + pad_h; boundingY += stride_h) {\n    for (let boundingX = -pad_w; boundingX + kernel_w <= width + pad_w; boundingX += stride_w) {\n      let currentResultCol = 0;\n      for (let channel = 0; channel < channels; channel++) {\n        const inputOffset = height * width * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            if (boundingY + y >= 0 && boundingX + x >= 0 && boundingX + x < width && boundingY + y < height) {\n              result.data[currentResultRow][currentResultCol] =\n                input.data[(y + boundingY) * width + boundingX + x + inputOffset][0];\n            }\n            currentResultCol++;\n          }\n        }\n      }\n      currentResultRow++;\n    }\n  }\n  return result;\n};\n\nexport const maxpool = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const resultWidth = (width - kernel_w) / stride_w + 1;\n  const resultHeight = (height - kernel_h) / stride_h + 1;\n  const resultDepth = channels;\n\n  let currentResultCol = 0;\n  const result = new Matrix(resultWidth * resultHeight * resultDepth, 1).setZeros();\n\n  for (let boundingY = 0; boundingY + kernel_h <= height; boundingY += stride_h) {\n    for (let boundingX = 0; boundingX + kernel_w <= width; boundingX += stride_w) {\n      for (let channel = 0; channel < channels; channel++) {\n        let _max = -Infinity;\n        const inputOffset = height * width * channel;\n        const outputOffset = resultWidth * resultHeight * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            _max = Math.max(_max, input.data[inputOffset + (y + boundingY) * width + boundingX + x][0]);\n          }\n        }\n        result.data[outputOffset + currentResultCol][0] = _max;\n      }\n      currentResultCol++;\n    }\n  }\n  return result;\n};\n\nexport const round = (num: number, decimalPlaces: number): number => {\n  return Math.round((num + 2.23e-16) * Math.pow(10, decimalPlaces)) / Math.pow(10, decimalPlaces);\n};\n","\ntry {\n  process.dlopen(module, __dirname + require(\"path\").sep + __webpack_public_path__ + \"9e034ce62a57cddc1a2b4486c9983546.node\");\n} catch (error) {\n  throw new Error('node-loader:\\n' + error);\n}\n","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","__webpack_require__.p = \"\";","import { Matrix } from \"./Math/Matrix\";\nimport { maxpool, round, im2col } from \"./Math/math\";\nimport { ComputationMultiCore, ComputationCPU, setComputation, getComputation } from \"./Computation\";\n\nexport { Matrix, maxpool, round, im2col, ComputationMultiCore, ComputationCPU, setComputation, getComputation };\n"],"names":["AbstractComputation","name","func","kernels","Error","args","apply","Matrix","dot","m1","m2","cols","rows","data","row","Array","col","i","ComputationCPU","addKernel","ComputationMultiCore","MatrixMultiply","console","log","setComputation","getComputation","currentComputation","type","resize","generateData","arr","test","String","Number","sum","t","transpose","push","newData","from","execute","maxIndex","max","Infinity","startRow","startCol","blockRows","blockCols","newRow","newCol","tmp","multiply","exp","add","fraction","_row","Math","abs","numberOfElements","min","parameter","random","sqrt","num","m","shape","cb","subtract","divide","rowwiseSum","replicate","pow","value","undefined","length","im2col","input","channels","height","width","kernel_h","kernel_w","pad_h","pad_w","stride_h","stride_w","currentResultRow","result","setZeros","boundingY","boundingX","currentResultCol","channel","inputOffset","y","x","maxpool","resultWidth","resultHeight","resultDepth","_max","outputOffset","round","decimalPlaces"],"sourceRoot":""}