{"version":3,"file":"impulse-math-ts.dev.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAMO,IAAMA,mBAAmB;EAAA,SAAAA,oBAAA;IAAAC,eAAA,OAAAD,mBAAA;IAAAE,eAAA,kBACQ,CAAC,CAAC;EAAA;EAAA,OAAAC,YAAA,CAAAH,mBAAA;IAAAI,GAAA;IAAAC,KAAA,EAExC,SAAAC,UAAUC,IAAY,EAAEC,IAAyD,EAAuB;MACtG,IAAI,CAACC,OAAO,CAACF,IAAI,CAAC,GAAGC,IAAI;MACzB,OAAO,IAAI;IACb;EAAC;IAAAJ,GAAA;IAAAC,KAAA,EAED,SAAAK,QAAQH,IAAY,EAAuG;MACzH,IAAI,CAAC,IAAI,CAACE,OAAO,CAACF,IAAI,CAAC,EAAE;QACvB,MAAM,IAAII,KAAK,YAAAC,MAAA,CAAYL,IAAI,kBAAe,CAAC;MACjD;MAAC,SAAAM,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAHsBC,IAAI,OAAAC,KAAA,CAAAJ,IAAA,OAAAA,IAAA,WAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;QAAJF,IAAI,CAAAE,IAAA,QAAAJ,SAAA,CAAAI,IAAA;MAAA;MAI3B,OAAO,IAAI,CAACT,OAAO,CAACF,IAAI,CAAC,CAACY,KAAK,CAAC,IAAI,EAAEH,IAAI,CAAC;IAC7C;EAAC;AAAA;;;;;;;;;;;;;;;;;;;;;ACnBwC;AAEpC,IAAMK,GAAG,GAAG,SAANA,GAAGA,CAAIC,EAAU,EAAa;EACzC,IAAMC,IAAI,GAAAC,kBAAA,CAAOF,EAAE,CAACC,IAAI,CAAC;EACzBA,IAAI,CAACE,OAAO,CAAC,UAACpB,KAAK,EAAEqB,KAAK,EAAK;IAC7BH,IAAI,CAACG,KAAK,CAAC,GAAGC,IAAI,CAACN,GAAG,CAAChB,KAAK,CAAC;EAC/B,CAAC,CAAC;EACF,OAAO,IAAIe,gDAAM,CAACE,EAAE,CAACM,IAAI,EAAEN,EAAE,CAACO,IAAI,EAAEN,IAAI,CAAC;AAC3C,CAAC;;;;;;;;;;;;;;;;;;;;;ACR0C;AAEpC,IAAMO,GAAG,GAAG,SAANA,GAAGA,CAAIR,EAAU,EAAES,CAAkB,EAAa;EAC7D,IAAI,OAAOA,CAAC,KAAK,QAAQ,EAAE;IACzB,IAAMR,IAAI,GAAAC,kBAAA,CAAOF,EAAE,CAACC,IAAI,CAAC;IACzBA,IAAI,CAACE,OAAO,CAAC,UAACpB,KAAK,EAAEqB,KAAK,EAAK;MAC7BH,IAAI,CAACG,KAAK,CAAC,GAAGrB,KAAK,GAAG0B,CAAC;IACzB,CAAC,CAAC;IACF,OAAO,IAAIX,gDAAM,CAACE,EAAE,CAACM,IAAI,EAAEN,EAAE,CAACO,IAAI,EAAEN,IAAI,CAAC;EAC3C,CAAC,MAAM,IAAIQ,CAAC,YAAYX,gDAAM,EAAE;IAC9B,IAAIW,CAAC,CAACH,IAAI,KAAKN,EAAE,CAACM,IAAI,IAAIG,CAAC,CAACF,IAAI,KAAKP,EAAE,CAACO,IAAI,EAAE;MAC5C,MAAM,IAAIlB,KAAK,8BAAAC,MAAA,CAA8BU,EAAE,CAACM,IAAI,WAAAhB,MAAA,CAAQU,EAAE,CAACO,IAAI,gBAAAjB,MAAA,CAAamB,CAAC,CAACH,IAAI,WAAAhB,MAAA,CAAQmB,CAAC,CAACF,IAAI,MAAG,CAAC;IAC1G;IACA,IAAMN,KAAI,GAAAC,kBAAA,CAAOF,EAAE,CAACC,IAAI,CAAC;IACzBA,KAAI,CAACE,OAAO,CAAC,UAACpB,KAAK,EAAEqB,KAAK,EAAK;MAC7BH,KAAI,CAACG,KAAK,CAAC,GAAGrB,KAAK,GAAG0B,CAAC,CAACR,IAAI,CAACG,KAAK,CAAC;IACrC,CAAC,CAAC;IACF,OAAO,IAAIN,gDAAM,CAACE,EAAE,CAACM,IAAI,EAAEN,EAAE,CAACO,IAAI,EAAEN,KAAI,CAAC;EAC3C;AACF,CAAC;;;;;;;;;;;;;;;ACnB0C;AAEpC,IAAMS,GAAG,GAAG,SAAAA,IAACV,EAAU,EAAEU,IAAW,EAAa;EACtD,IAAMT,IAAI,GAAG,EAAE;EACf,KAAK,IAAIU,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGX,EAAE,CAACM,IAAI,EAAEK,GAAG,IAAI,CAAC,EAAE;IACzCV,IAAI,CAACU,GAAG,CAAC,GAAGX,EAAE,CAACC,IAAI,CAACD,EAAE,CAACO,IAAI,GAAGI,GAAG,GAAGD,IAAG,CAAC;EAC1C;EACA,OAAO,IAAIZ,gDAAM,CAACE,EAAE,CAACM,IAAI,EAAE,CAAC,EAAEL,IAAI,CAAC;AACrC,CAAC;;;;;;;;;;;;;;ACNM,IAAMW,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAIZ,EAAU,EAAEU,GAAW,EAAa;EACnE,IAAIG,QAAQ,GAAG,CAAC,CAAC;EACjB,IAAIC,GAAG,GAAG,CAACC,QAAQ;EAEnB,KAAK,IAAIJ,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGX,EAAE,CAACM,IAAI,EAAEK,GAAG,IAAI,CAAC,EAAE;IACzC,IAAIX,EAAE,CAACC,IAAI,CAACU,GAAG,GAAGX,EAAE,CAACO,IAAI,GAAGG,GAAG,CAAC,GAAGI,GAAG,EAAE;MACtCA,GAAG,GAAGd,EAAE,CAACC,IAAI,CAACU,GAAG,GAAGX,EAAE,CAACO,IAAI,GAAGG,GAAG,CAAC;MAClCG,QAAQ,GAAGF,GAAG;IAChB;EACF;EAEA,OAAOE,QAAQ;AACjB,CAAC;;;;;;;;;;;;;;;ACd0C;AAEpC,IAAMG,UAAU,GAAG,SAAbA,UAAUA,CAAIhB,EAAU,EAAa;EAChD,IAAMC,IAAI,GAAG,EAAE;EACf,IAAMgB,CAAC,GAAGjB,EAAE,CAACkB,SAAS,CAAC,CAAC;EACxB,KAAK,IAAIP,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGM,CAAC,CAACX,IAAI,EAAEK,GAAG,IAAI,CAAC,EAAE;IACxCV,IAAI,CAACU,GAAG,CAAC,GAAG,CAAC;IACb,KAAK,IAAID,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGO,CAAC,CAACV,IAAI,EAAEG,GAAG,IAAI,CAAC,EAAE;MACxCT,IAAI,CAACU,GAAG,CAAC,IAAIM,CAAC,CAAChB,IAAI,CAACU,GAAG,GAAGM,CAAC,CAACV,IAAI,GAAGG,GAAG,CAAC;IACzC;EACF;EACA,OAAO,IAAIZ,gDAAM,CAACE,EAAE,CAACO,IAAI,EAAE,CAAC,EAAEN,IAAI,CAAC;AACrC,CAAC;;;;;;;;;;;;;;;;;;;;;ACZ0C;AAEpC,IAAMkB,MAAM,GAAG,SAATA,MAAMA,CAAInB,EAAU,EAAEoB,GAAoB,EAAa;EAClE,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;IAC3B,IAAMnB,IAAI,GAAAC,kBAAA,CAAOF,EAAE,CAACC,IAAI,CAAC;IACzBA,IAAI,CAACE,OAAO,CAAC,UAACpB,KAAK,EAAEqB,KAAK,EAAK;MAC7BH,IAAI,CAACG,KAAK,CAAC,GAAGrB,KAAK,GAAGqC,GAAG;IAC3B,CAAC,CAAC;IACF,OAAO,IAAItB,gDAAM,CAACE,EAAE,CAACM,IAAI,EAAEN,EAAE,CAACO,IAAI,EAAEN,IAAI,CAAC;EAC3C,CAAC,MAAM;IACL,IAAImB,GAAG,CAACd,IAAI,KAAKN,EAAE,CAACM,IAAI,IAAIc,GAAG,CAACb,IAAI,KAAKP,EAAE,CAACO,IAAI,EAAE;MAChD,MAAM,IAAIlB,KAAK,sBAAAC,MAAA,CAAsBU,EAAE,CAACM,IAAI,QAAAhB,MAAA,CAAKU,EAAE,CAACO,IAAI,aAAAjB,MAAA,CAAU8B,GAAG,CAACd,IAAI,QAAAhB,MAAA,CAAK8B,GAAG,CAACb,IAAI,MAAG,CAAC;IAC7F;IAEA,IAAMN,KAAI,GAAAC,kBAAA,CAAOF,EAAE,CAACC,IAAI,CAAC;IACzBA,KAAI,CAACE,OAAO,CAAC,UAACpB,KAAK,EAAEqB,KAAK,EAAK;MAC7BH,KAAI,CAACG,KAAK,CAAC,GAAGrB,KAAK,GAAGqC,GAAG,CAACnB,IAAI,CAACG,KAAK,CAAC;IACvC,CAAC,CAAC;IACF,OAAO,IAAIN,gDAAM,CAACE,EAAE,CAACM,IAAI,EAAEN,EAAE,CAACO,IAAI,EAAEN,KAAI,CAAC;EAC3C;AACF,CAAC;;;;;;;;;;;;;;;;;;;;;ACpB0C;AAEpC,IAAMoB,GAAG,GAAG,SAANA,GAAGA,CAAIrB,EAAU,EAAEsB,EAAU,EAAa;EACrD,IAAItB,EAAE,CAACO,IAAI,KAAKe,EAAE,CAAChB,IAAI,EAAE;IACvB,MAAM,IAAIjB,KAAK,8BAAAC,MAAA,CAA8BU,EAAE,CAACM,IAAI,OAAAhB,MAAA,CAAIU,EAAE,CAACO,IAAI,mBAAAjB,MAAA,CAAgBgC,EAAE,CAAChB,IAAI,OAAAhB,MAAA,CAAIgC,EAAE,CAACf,IAAI,MAAG,CAAC;EACvG;EACA,IAAMN,IAAI,GAAG,EAAE;EACf,KAAK,IAAIU,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGX,EAAE,CAACM,IAAI,EAAEK,GAAG,IAAI,CAAC,EAAE;IACzCV,IAAI,CAACU,GAAG,CAAC,GAAG,IAAIhB,KAAK,CAAC2B,EAAE,CAACf,IAAI,CAAC;IAC9B,KAAK,IAAIG,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGY,EAAE,CAACf,IAAI,EAAEG,GAAG,IAAI,CAAC,EAAE;MACzCT,IAAI,CAACU,GAAG,CAAC,CAACD,GAAG,CAAC,GAAG,CAAC;MAClB,KAAK,IAAIa,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGvB,EAAE,CAACO,IAAI,EAAEgB,CAAC,IAAI,CAAC,EAAE;QACnC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,EAAE,CAAChB,IAAI,EAAEkB,CAAC,IAAI,CAAC,EAAE;UACnCvB,IAAI,CAACU,GAAG,CAAC,CAACD,GAAG,CAAC,IAAIV,EAAE,CAACC,IAAI,CAACU,GAAG,GAAGX,EAAE,CAACO,IAAI,GAAGgB,CAAC,CAAC,GAAGD,EAAE,CAACrB,IAAI,CAACuB,CAAC,GAAGF,EAAE,CAACf,IAAI,GAAGG,GAAG,CAAC;QAC3E;MACF;IACF;EACF;EACA,IAAIe,OAAO,GAAG,EAAE;EAChBxB,IAAI,CAACE,OAAO,CAAC,UAACQ,GAAG,EAAK;IACpBc,OAAO,MAAAnC,MAAA,CAAAY,kBAAA,CAAOuB,OAAO,GAAAvB,kBAAA,CAAKS,GAAG,EAAC;EAChC,CAAC,CAAC;EACF,OAAO,IAAIb,gDAAM,CAACE,EAAE,CAACM,IAAI,EAAEgB,EAAE,CAACf,IAAI,EAAEkB,OAAO,CAAC;AAC9C,CAAC;;;;;;;;;;;;;;;;;;;;;ACvB0C;AAEpC,IAAMC,GAAG,GAAG,SAANA,GAAGA,CAAI1B,EAAU,EAAa;EACzC,IAAMC,IAAI,GAAAC,kBAAA,CAAOF,EAAE,CAACC,IAAI,CAAC;EACzBA,IAAI,CAACE,OAAO,CAAC,UAACpB,KAAK,EAAEqB,KAAK,EAAK;IAC7BH,IAAI,CAACG,KAAK,CAAC,GAAGC,IAAI,CAACqB,GAAG,CAAC3C,KAAK,GAAG,KAAK,CAAC;EACvC,CAAC,CAAC;EACF,OAAO,IAAIe,gDAAM,CAACE,EAAE,CAACM,IAAI,EAAEN,EAAE,CAACO,IAAI,EAAEN,IAAI,CAAC;AAC3C,CAAC;;;;;;;;;;;;;;;;;;;;;ACR0C;AAEpC,IAAM0B,QAAQ,GAAG,SAAXA,QAAQA,CAAI3B,EAAU,EAAEoB,GAAW,EAAa;EAC3D,IAAMnB,IAAI,GAAAC,kBAAA,CAAOF,EAAE,CAACC,IAAI,CAAC;EACzBA,IAAI,CAACE,OAAO,CAAC,UAACpB,KAAK,EAAEqB,KAAK,EAAK;IAC7BH,IAAI,CAACG,KAAK,CAAC,GAAGgB,GAAG,GAAGrC,KAAK;EAC3B,CAAC,CAAC;EACF,OAAO,IAAIe,gDAAM,CAACE,EAAE,CAACM,IAAI,EAAEN,EAAE,CAACO,IAAI,EAAEN,IAAI,CAAC;AAC3C,CAAC;;;;;;;;;;;;;;;;;;;;;ACR0C;AAEpC,IAAM2B,GAAG,GAAG,SAANA,GAAGA,CAAI5B,EAAU,EAAa;EACzC,IAAMC,IAAI,GAAAC,kBAAA,CAAOF,EAAE,CAACC,IAAI,CAAC;EACzBA,IAAI,CAACE,OAAO,CAAC,UAACpB,KAAK,EAAEqB,KAAK,EAAK;IAC7BH,IAAI,CAACG,KAAK,CAAC,GAAGC,IAAI,CAACuB,GAAG,CAAC7C,KAAK,GAAG,IAAI,CAAC;EACtC,CAAC,CAAC;EACF,OAAO,IAAIe,gDAAM,CAACE,EAAE,CAACM,IAAI,EAAEN,EAAE,CAACO,IAAI,EAAEN,IAAI,CAAC;AAC3C,CAAC;;;;;;;;;;;;;;ACNM,IAAMa,GAAG,GAAG,SAAAA,IAACd,EAAU,EAAa;EACzC,IAAIc,GAAG,GAAG,CAACC,QAAQ;EACnB,KAAK,IAAIX,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGJ,EAAE,CAACM,IAAI,GAAGN,EAAE,CAACO,IAAI,EAAEH,KAAK,IAAI,CAAC,EAAE;IACzDU,GAAG,GAAGT,IAAI,CAACS,GAAG,CAACd,EAAE,CAACC,IAAI,CAACG,KAAK,CAAC,EAAEU,GAAG,CAAC;EACrC;EACA,OAAOA,GAAG;AACZ,CAAC;;;;;;;;;;;;;;ACNM,IAAMe,IAAI,GAAG,SAAPA,IAAIA,CAAI7B,EAAU,EAAa;EAC1C,IAAI8B,GAAG,GAAG,CAAC;EACX,IAAMC,gBAAgB,GAAG/B,EAAE,CAACM,IAAI,GAAGN,EAAE,CAACO,IAAI;EAE1C,KAAK,IAAIH,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGJ,EAAE,CAACM,IAAI,GAAGN,EAAE,CAACO,IAAI,EAAEH,KAAK,IAAI,CAAC,EAAE;IACzD0B,GAAG,IAAI9B,EAAE,CAACC,IAAI,CAACG,KAAK,CAAC;EACvB;EAEA,OAAO0B,GAAG,GAAGC,gBAAgB;AAC/B,CAAC;;;;;;;;;;;;;;;;;;;;;ACX0C;AAEpC,IAAMC,QAAQ,GAAG,SAAXA,QAAQA,CAAIhC,EAAU,EAAa;EAC9C,IAAMC,IAAI,GAAAC,kBAAA,CAAOF,EAAE,CAACC,IAAI,CAAC;EACzB,KAAK,IAAIG,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGJ,EAAE,CAACM,IAAI,GAAGN,EAAE,CAACO,IAAI,EAAEH,KAAK,IAAI,CAAC,EAAE;IACzDH,IAAI,CAACG,KAAK,CAAC,GAAG,CAAC,GAAGH,IAAI,CAACG,KAAK,CAAC;EAC/B;EACA,OAAO,IAAIN,gDAAM,CAACE,EAAE,CAACM,IAAI,EAAEN,EAAE,CAACO,IAAI,EAAEN,IAAI,CAAC;AAC3C,CAAC;;;;;;;;;;;;;;;;;;;;;ACR0C;AAEpC,IAAMgC,QAAQ,GAAG,SAAXA,QAAQA,CAAIjC,EAAU,EAAEoB,GAAoB,EAAa;EACpE,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;IAC3B,IAAMnB,IAAI,GAAAC,kBAAA,CAAOF,EAAE,CAACC,IAAI,CAAC;IACzBA,IAAI,CAACE,OAAO,CAAC,UAACpB,KAAK,EAAEqB,KAAK,EAAK;MAC7BH,IAAI,CAACG,KAAK,CAAC,GAAGrB,KAAK,GAAGqC,GAAG;IAC3B,CAAC,CAAC;IACF,OAAO,IAAItB,gDAAM,CAACE,EAAE,CAACM,IAAI,EAAEN,EAAE,CAACO,IAAI,EAAEN,IAAI,CAAC;EAC3C,CAAC,MAAM;IACL,IAAImB,GAAG,CAACd,IAAI,KAAKN,EAAE,CAACM,IAAI,IAAIN,EAAE,CAACO,IAAI,KAAKa,GAAG,CAACb,IAAI,EAAE;MAChD,MAAM,IAAIlB,KAAK,qBAAAC,MAAA,CAAqBU,EAAE,CAACkC,KAAK,CAAC,CAAC,WAAA5C,MAAA,CAAQ8B,GAAG,CAACc,KAAK,CAAC,CAAC,CAAE,CAAC;IACtE;IACA,IAAMjC,KAAI,GAAAC,kBAAA,CAAOF,EAAE,CAACC,IAAI,CAAC;IACzBA,KAAI,CAACE,OAAO,CAAC,UAACpB,KAAK,EAAEqB,KAAK,EAAK;MAC7BH,KAAI,CAACG,KAAK,CAAC,GAAGrB,KAAK,GAAGqC,GAAG,CAACnB,IAAI,CAACG,KAAK,CAAC;IACvC,CAAC,CAAC;IACF,OAAO,IAAIN,gDAAM,CAACE,EAAE,CAACM,IAAI,EAAEN,EAAE,CAACO,IAAI,EAAEN,KAAI,CAAC;EAC3C;AACF,CAAC;;;;;;;;;;;;;;;;;;;;;ACnB0C;AAEpC,IAAMkC,GAAG,GAAG,SAANA,GAAGA,CAAInC,EAAU,EAAEoB,GAAW,EAAa;EACtD,IAAMnB,IAAI,GAAAC,kBAAA,CAAOF,EAAE,CAACC,IAAI,CAAC;EACzBA,IAAI,CAACE,OAAO,CAAC,UAACpB,KAAK,EAAEqB,KAAK,EAAK;IAC7BH,IAAI,CAACG,KAAK,CAAC,GAAGC,IAAI,CAAC8B,GAAG,CAACpD,KAAK,EAAEqC,GAAG,CAAC;EACpC,CAAC,CAAC;EACF,OAAO,IAAItB,gDAAM,CAACE,EAAE,CAACM,IAAI,EAAEN,EAAE,CAACO,IAAI,EAAEN,IAAI,CAAC;AAC3C,CAAC;;;;;;;;;;;;;;;;;;;;;ACR0C;AAEpC,IAAMmC,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAAIC,KAAa,EAAEC,CAAS,EAAa;EACvE,IAAMrC,IAAI,GAAAC,kBAAA,CAAOoC,CAAC,CAACrC,IAAI,CAAC;EACxBA,IAAI,CAACE,OAAO,CAAC,UAACpB,KAAK,EAAEqB,KAAK,EAAK;IAC7BH,IAAI,CAACG,KAAK,CAAC,GAAGrB,KAAK,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;EACjC,CAAC,CAAC;EACF,OAAO,IAAIe,gDAAM,CAACwC,CAAC,CAAChC,IAAI,EAAEgC,CAAC,CAAC/B,IAAI,EAAEN,IAAI,CAAC;AACzC,CAAC;;;;;;;;;;;;;;;ACR0C;AAEpC,IAAMsC,SAAS,GAAG,SAAZA,SAASA,CAAIvC,EAAU,EAAEM,IAAY,EAAEC,IAAY,EAAa;EACzE,IAAID,IAAI,KAAK,CAAC,IAAIN,EAAE,CAACO,IAAI,KAAK,CAAC,IAAIA,IAAI,GAAG,CAAC,EAAE;IAC3C,IAAMkB,OAAO,GAAG,EAAE;IAClB,KAAK,IAAIf,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGH,IAAI,EAAEG,GAAG,IAAI,CAAC,EAAE;MACtC,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGX,EAAE,CAACM,IAAI,EAAEK,GAAG,IAAI,CAAC,EAAE;QACzCc,OAAO,CAACd,GAAG,GAAGJ,IAAI,GAAGG,GAAG,CAAC,GAAGV,EAAE,CAACC,IAAI,CAACU,GAAG,GAAGX,EAAE,CAACO,IAAI,CAAC;MACpD;IACF;IACA,OAAO,IAAIT,gDAAM,CAACE,EAAE,CAACM,IAAI,EAAEC,IAAI,EAAEkB,OAAO,CAAC;EAC3C,CAAC,MAED,IAAIlB,IAAI,KAAK,CAAC,IAAIP,EAAE,CAACM,IAAI,KAAK,CAAC,IAAIA,IAAI,GAAG,CAAC,EAAE;IAC3C,IAAMmB,QAAO,GAAG,EAAE;IAClB,KAAK,IAAId,IAAG,GAAG,CAAC,EAAEA,IAAG,GAAGL,IAAI,EAAEK,IAAG,IAAI,CAAC,EAAE;MACtC,KAAK,IAAID,IAAG,GAAG,CAAC,EAAEA,IAAG,GAAGV,EAAE,CAACO,IAAI,EAAEG,IAAG,IAAI,CAAC,EAAE;QACzCe,QAAO,CAACd,IAAG,GAAGX,EAAE,CAACO,IAAI,GAAGG,IAAG,CAAC,GAAGV,EAAE,CAACC,IAAI,CAACS,IAAG,CAAC;MAC7C;IACF;IACA,OAAO,IAAIZ,gDAAM,CAACQ,IAAI,EAAEN,EAAE,CAACO,IAAI,EAAEkB,QAAO,CAAC;EAC3C;EACA,OAAOzB,EAAE;AACX,CAAC;;;;;;;;;;;;;;;ACvBwC;AAEpC,IAAMwC,eAAe,GAAG,SAAlBA,eAAeA,CAAIxC,EAAU,EAAa;EACrD,IAAMC,IAAI,GAAG,EAAE;EACf,KAAK,IAAIU,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGX,EAAE,CAACM,IAAI,EAAEK,GAAG,IAAI,CAAC,EAAE;IACzC,KAAK,IAAID,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGV,EAAE,CAACO,IAAI,EAAEG,GAAG,IAAI,CAAC,EAAE;MACzCT,IAAI,CAACwC,IAAI,CAACzC,EAAE,CAACC,IAAI,CAACU,GAAG,GAAGX,EAAE,CAACO,IAAI,GAAGG,GAAG,CAAC,CAAC;IACzC;EACF;EACA,OAAO,IAAIZ,gDAAM,CAACE,EAAE,CAACM,IAAI,GAAGN,EAAE,CAACO,IAAI,EAAE,CAAC,EAAEN,IAAI,CAAC;AAC/C,CAAC;;;;;;;;;;;;;;;ACV0C;AAEpC,IAAMU,GAAG,GAAG,SAAAA,IAACX,EAAU,EAAEW,IAAW,EAAa;EACtD,IAAM+B,UAAU,GAAG/B,IAAG,GAAGX,EAAE,CAACO,IAAI;EAChC,IAAMN,IAAI,GAAG,EAAE;EACf,KAAK,IAAIsB,CAAC,GAAGmB,UAAU,EAAEnB,CAAC,GAAGmB,UAAU,GAAG1C,EAAE,CAACO,IAAI,EAAEgB,CAAC,IAAI,CAAC,EAAE;IACzDtB,IAAI,CAACwC,IAAI,CAACzC,EAAE,CAACC,IAAI,CAACsB,CAAC,CAAC,CAAC;EACvB;EACA,OAAO,IAAIzB,gDAAM,CAAC,CAAC,EAAEE,EAAE,CAACO,IAAI,EAAEN,IAAI,CAAC;AACrC,CAAC;;;;;;;;;;;;;;ACPM,IAAM0C,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAI3C,EAAU,EAAEW,GAAW,EAAa;EACnE,IAAIE,QAAQ,GAAG,CAAC,CAAC;EACjB,IAAIC,GAAG,GAAG,CAACC,QAAQ;EAEnB,KAAK,IAAIL,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGV,EAAE,CAACO,IAAI,EAAEG,GAAG,IAAI,CAAC,EAAE;IACzC,IAAIV,EAAE,CAACC,IAAI,CAACU,GAAG,GAAGX,EAAE,CAACO,IAAI,GAAGG,GAAG,CAAC,GAAGI,GAAG,EAAE;MACtCA,GAAG,GAAGd,EAAE,CAACW,GAAG,GAAGX,EAAE,CAACO,IAAI,GAAGG,GAAG,CAAC;MAC7BG,QAAQ,GAAGH,GAAG;IAChB;EACF;EAEA,OAAOG,QAAQ;AACjB,CAAC;;;;;;;;;;;;;;;ACd0C;AAEpC,IAAM+B,UAAU,GAAG,SAAbA,UAAUA,CAAI5C,EAAU,EAAa;EAChD,IAAMC,IAAI,GAAG,EAAE;EACf,KAAK,IAAIU,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGX,EAAE,CAACM,IAAI,EAAEK,GAAG,IAAI,CAAC,EAAE;IACzC,IAAImB,GAAG,GAAG,GAAG;IACb,KAAK,IAAIpB,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGV,EAAE,CAACO,IAAI,EAAEG,GAAG,IAAI,CAAC,EAAE;MACzCoB,GAAG,IAAI9B,EAAE,CAACC,IAAI,CAACU,GAAG,GAAGX,EAAE,CAACO,IAAI,GAAGG,GAAG,CAAC;IACrC;IACAT,IAAI,CAACwC,IAAI,CAACX,GAAG,CAAC;EAChB;EACA,OAAO,IAAIhC,gDAAM,CAAC,CAAC,EAAEE,EAAE,CAACM,IAAI,EAAEL,IAAI,CAAC;AACrC,CAAC;;;;;;;;;;;;;;;;;;;;;ACZ0C;AAEpC,IAAM4C,MAAM,GAAG,SAATA,MAAMA,CAAI7C,EAAU,EAAEc,GAAW,EAAa;EACzD,IAAMb,IAAI,GAAAC,kBAAA,CAAOF,EAAE,CAACC,IAAI,CAAC;EACzBA,IAAI,CAACE,OAAO,CAAC,UAACpB,KAAK,EAAEqB,KAAK,EAAK;IAC7BH,IAAI,CAACG,KAAK,CAAC,GAAGC,IAAI,CAACyC,GAAG,CAAC/D,KAAK,EAAE+B,GAAG,CAAC;EACpC,CAAC,CAAC;EACF,OAAO,IAAIhB,gDAAM,CAACE,EAAE,CAACM,IAAI,EAAEN,EAAE,CAACO,IAAI,EAAEN,IAAI,CAAC;AAC3C,CAAC;;;;;;;;;;;;;;;;;;;;;ACR0C;AAEpC,IAAM8C,MAAM,GAAG,SAATA,MAAMA,CAAI/C,EAAU,EAAE8C,GAAW,EAAa;EACzD,IAAM7C,IAAI,GAAAC,kBAAA,CAAOF,EAAE,CAACC,IAAI,CAAC;EACzBA,IAAI,CAACE,OAAO,CAAC,UAACpB,KAAK,EAAEqB,KAAK,EAAK;IAC7BH,IAAI,CAACG,KAAK,CAAC,GAAGC,IAAI,CAACS,GAAG,CAAC/B,KAAK,EAAE+D,GAAG,CAAC;EACpC,CAAC,CAAC;EACF,OAAO,IAAIhD,gDAAM,CAACE,EAAE,CAACM,IAAI,EAAEN,EAAE,CAACO,IAAI,EAAEN,IAAI,CAAC;AAC3C,CAAC;;;;;;;;;;;;;;;;;;;;;ACR0C;AAEpC,IAAM+C,OAAO,GAAG,SAAVA,OAAOA,CAAIhD,EAAU,EAAa;EAC7C,IAAMC,IAAI,GAAAC,kBAAA,CAAOF,EAAE,CAACC,IAAI,CAAC;EACzBA,IAAI,CAACE,OAAO,CAAC,UAACpB,KAAK,EAAEqB,KAAK,EAAK;IAC7BH,IAAI,CAACG,KAAK,CAAC,GAAG,CAAC;EACjB,CAAC,CAAC;EACF,OAAO,IAAIN,gDAAM,CAACE,EAAE,CAACM,IAAI,EAAEN,EAAE,CAACO,IAAI,EAAEN,IAAI,CAAC;AAC3C,CAAC;;;;;;;;;;;;;;;;;;;;;ACR0C;AAEpC,IAAMgD,SAAS,GAAG,SAAZA,SAASA,CAAIjD,EAAU,EAAEkD,SAAiB,EAAa;EAClE,IAAMjD,IAAI,GAAAC,kBAAA,CAAOF,EAAE,CAACC,IAAI,CAAC;EACzBA,IAAI,CAACE,OAAO,CAAC,UAACpB,KAAK,EAAEqB,KAAK,EAAK;IAC7BH,IAAI,CAACG,KAAK,CAAC,GAAI,CAACC,IAAI,CAAC8C,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI9C,IAAI,CAAC+C,IAAI,CAAC,CAAC,GAAGF,SAAS,CAAC,CAAC,CAAC;EACrE,CAAC,CAAC;EACF,OAAO,IAAIpD,gDAAM,CAACE,EAAE,CAACM,IAAI,EAAEN,EAAE,CAACO,IAAI,EAAEN,IAAI,CAAC;AAC3C,CAAC;;;;;;;;;;;;;;;;;;;;;ACR0C;AAEpC,IAAMoD,QAAQ,GAAG,SAAXA,QAAQA,CAAIrD,EAAU,EAAa;EAC9C,IAAMC,IAAI,GAAAC,kBAAA,CAAOF,EAAE,CAACC,IAAI,CAAC;EACzBA,IAAI,CAACE,OAAO,CAAC,UAACpB,KAAK,EAAEqB,KAAK,EAAK;IAC7BH,IAAI,CAACG,KAAK,CAAC,GAAG,CAAC;EACjB,CAAC,CAAC;EACF,OAAO,IAAIN,gDAAM,CAACE,EAAE,CAACM,IAAI,EAAEN,EAAE,CAACO,IAAI,EAAEN,IAAI,CAAC;AAC3C,CAAC;;;;;;;;;;;;;;;;;;;;;ACR0C;AAEpC,IAAMmD,IAAI,GAAG,SAAPA,IAAIA,CAAIpD,EAAU,EAAa;EAC1C,IAAMC,IAAI,GAAAC,kBAAA,CAAOF,EAAE,CAACC,IAAI,CAAC;EACzBA,IAAI,CAACE,OAAO,CAAC,UAACpB,KAAK,EAAEqB,KAAK,EAAK;IAC7BH,IAAI,CAACG,KAAK,CAAC,GAAGC,IAAI,CAAC+C,IAAI,CAACrE,KAAK,GAAG,IAAI,CAAC;EACvC,CAAC,CAAC;EACF,OAAO,IAAIe,gDAAM,CAACE,EAAE,CAACM,IAAI,EAAEN,EAAE,CAACO,IAAI,EAAEN,IAAI,CAAC;AAC3C,CAAC;;;;;;;;;;;;;;;;;;;;;ACR0C;AAEpC,IAAMqD,QAAQ,GAAG,SAAXA,QAAQA,CAAItD,EAAU,EAAES,CAAkB,EAAa;EAClE,IAAI,OAAOA,CAAC,KAAK,QAAQ,EAAE;IACzB,IAAMR,IAAI,GAAAC,kBAAA,CAAOF,EAAE,CAACC,IAAI,CAAC;IACzBA,IAAI,CAACE,OAAO,CAAC,UAACpB,KAAK,EAAEqB,KAAK,EAAK;MAC7BH,IAAI,CAACG,KAAK,CAAC,GAAGrB,KAAK,GAAG0B,CAAC;IACzB,CAAC,CAAC;IACF,OAAO,IAAIX,gDAAM,CAACE,EAAE,CAACM,IAAI,EAAEN,EAAE,CAACO,IAAI,EAAEN,IAAI,CAAC;EAC3C,CAAC,MAAM;IACL,IAAID,EAAE,CAACM,IAAI,KAAKG,CAAC,CAACH,IAAI,IAAIN,EAAE,CAACO,IAAI,KAAKE,CAAC,CAACF,IAAI,EAAE;MAC5C,MAAM,IAAIlB,KAAK,sBAAAC,MAAA,CAAsBU,EAAE,CAACM,IAAI,QAAAhB,MAAA,CAAKU,EAAE,CAACO,IAAI,WAAAjB,MAAA,CAAQmB,CAAC,CAACH,IAAI,QAAAhB,MAAA,CAAKmB,CAAC,CAACF,IAAI,CAAE,CAAC;IACtF;IACA,IAAMN,KAAI,GAAAC,kBAAA,CAAOF,EAAE,CAACC,IAAI,CAAC;IACzBA,KAAI,CAACE,OAAO,CAAC,UAACpB,KAAK,EAAEqB,KAAK,EAAK;MAC7BH,KAAI,CAACG,KAAK,CAAC,GAAGrB,KAAK,GAAG0B,CAAC,CAACR,IAAI,CAACG,KAAK,CAAC;IACrC,CAAC,CAAC;IACF,OAAO,IAAIN,gDAAM,CAACE,EAAE,CAACM,IAAI,EAAEN,EAAE,CAACO,IAAI,EAAEN,KAAI,CAAC;EAC3C;AACF,CAAC;;;;;;;;;;;;;;;;;;;;;ACnB0C;AAEpC,IAAMsD,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAIvD,EAAU,EAAEoB,GAAW,EAAa;EACrE,IAAMnB,IAAI,GAAAC,kBAAA,CAAOF,EAAE,CAACC,IAAI,CAAC;EACzBA,IAAI,CAACE,OAAO,CAAC,UAACpB,KAAK,EAAEqB,KAAK,EAAK;IAC7BH,IAAI,CAACG,KAAK,CAAC,GAAGgB,GAAG,GAAGrC,KAAK;EAC3B,CAAC,CAAC;EACF,OAAO,IAAIe,gDAAM,CAACE,EAAE,CAACM,IAAI,EAAEN,EAAE,CAACO,IAAI,EAAEN,IAAI,CAAC;AAC3C,CAAC;;;;;;;;;;;;;;ACNM,IAAM6B,GAAG,GAAG,SAAAA,IAAC9B,EAAU,EAAa;EACzC,IAAI8B,GAAG,GAAG,GAAG;EACb,KAAK,IAAI1B,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGJ,EAAE,CAACM,IAAI,GAAGN,EAAE,CAACO,IAAI,EAAEH,KAAK,IAAI,CAAC,EAAE;IACzD0B,GAAG,IAAI9B,EAAE,CAACC,IAAI,CAACG,KAAK,CAAC;EACvB;EACA,OAAO0B,GAAG;AACZ,CAAC;;;;;;;;;;;;;;;ACRwC;AAElC,IAAMZ,SAAS,GAAG,SAAZA,SAASA,CAAIlB,EAAU,EAAa;EAC7C,IAAMC,IAAI,GAAG,EAAE;EACf,KAAK,IAAIS,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGV,EAAE,CAACO,IAAI,EAAE,EAAEG,GAAG,EAAE;IACpC,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGX,EAAE,CAACM,IAAI,EAAE,EAAEK,GAAG,EAAE;MACpCV,IAAI,CAACwC,IAAI,CAACzC,EAAE,CAACC,IAAI,CAACU,GAAG,GAAGX,EAAE,CAACO,IAAI,GAAGG,GAAG,CAAC,CAAC;IAC3C;EACJ;EACA,OAAO,IAAIZ,gDAAM,CAACE,EAAE,CAACO,IAAI,EAAEP,EAAE,CAACM,IAAI,EAAEL,IAAI,CAAC;AAC7C,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACV2D;AAC5B;AACY;AACoB;AACjC;AACW;AACA;AACJ;AACI;AACV;AACA;AACA;AACE;AAC4B;AACxB;AACA;AACE;AACE;AACE;AACF;AACV;AACA;AACE;AACF;AACc;AACA;AACF;AACc;AACA;AAC1B;AACA;AACwB;AAEjD,IAAMuD,cAAc,0BAAAC,oBAAA;EACzB,SAAAD,eAAA,EAAc;IAAA,IAAAE,KAAA;IAAA/E,eAAA,OAAA6E,cAAA;IACZE,KAAA,GAAAC,UAAA,OAAAH,cAAA;IAEAE,KAAA,CAAK1E,SAAS,CAAC,KAAK,EAAEqC,yCAAG,CAAC;IAC1BqC,KAAA,CAAK1E,SAAS,CAAC,WAAW,EAAEkC,qDAAS,CAAC;IACtCwC,KAAA,CAAK1E,SAAS,CAAC,qBAAqB,EAAEoD,yEAAmB,CAAC;IAC1DsB,KAAA,CAAK1E,SAAS,CAAC,KAAK,EAAEwB,yCAAG,CAAC;IAC1BkD,KAAA,CAAK1E,SAAS,CAAC,UAAU,EAAEsE,mDAAQ,CAAC;IACpCI,KAAA,CAAK1E,SAAS,CAAC,UAAU,EAAEiD,mDAAQ,CAAC;IACpCyB,KAAA,CAAK1E,SAAS,CAAC,QAAQ,EAAEmC,+CAAM,CAAC;IAChCuC,KAAA,CAAK1E,SAAS,CAAC,UAAU,EAAEgD,mDAAQ,CAAC;IACpC0B,KAAA,CAAK1E,SAAS,CAAC,oBAAoB,EAAEuE,wEAAkB,CAAC;IACxDG,KAAA,CAAK1E,SAAS,CAAC,KAAK,EAAE4C,yCAAG,CAAC;IAC1B8B,KAAA,CAAK1E,SAAS,CAAC,KAAK,EAAE0C,0CAAG,CAAC;IAC1BgC,KAAA,CAAK1E,SAAS,CAAC,KAAK,EAAEmD,0CAAG,CAAC;IAC1BuB,KAAA,CAAK1E,SAAS,CAAC,MAAM,EAAEoE,4CAAI,CAAC;IAC5BM,KAAA,CAAK1E,SAAS,CAAC,QAAQ,EAAE+D,gDAAM,CAAC;IAChCW,KAAA,CAAK1E,SAAS,CAAC,QAAQ,EAAE6D,gDAAM,CAAC;IAChCa,KAAA,CAAK1E,SAAS,CAAC,SAAS,EAAEgE,kDAAO,CAAC;IAClCU,KAAA,CAAK1E,SAAS,CAAC,UAAU,EAAEqE,oDAAQ,CAAC;IACpCK,KAAA,CAAK1E,SAAS,CAAC,WAAW,EAAEiE,sDAAS,CAAC;IACtCS,KAAA,CAAK1E,SAAS,CAAC,UAAU,EAAE2C,oDAAQ,CAAC;IACpC+B,KAAA,CAAK1E,SAAS,CAAC,KAAK,EAAE8B,0CAAG,CAAC;IAC1B4C,KAAA,CAAK1E,SAAS,CAAC,KAAK,EAAEe,0CAAG,CAAC;IAC1B2D,KAAA,CAAK1E,SAAS,CAAC,MAAM,EAAE6C,4CAAI,CAAC;IAC5B6B,KAAA,CAAK1E,SAAS,CAAC,KAAK,EAAE8C,0CAAG,CAAC;IAC1B4B,KAAA,CAAK1E,SAAS,CAAC,YAAY,EAAE4D,wDAAU,CAAC;IACxCc,KAAA,CAAK1E,SAAS,CAAC,YAAY,EAAEgC,wDAAU,CAAC;IACxC0C,KAAA,CAAK1E,SAAS,CAAC,WAAW,EAAEuD,sDAAS,CAAC;IACtCmB,KAAA,CAAK1E,SAAS,CAAC,kBAAkB,EAAE4B,oEAAgB,CAAC;IACpD8C,KAAA,CAAK1E,SAAS,CAAC,kBAAkB,EAAE2D,oEAAgB,CAAC;IACpDe,KAAA,CAAK1E,SAAS,CAAC,KAAK,EAAE2B,0CAAG,CAAC;IAC1B+C,KAAA,CAAK1E,SAAS,CAAC,KAAK,EAAE0B,0CAAG,CAAC;IAC1BgD,KAAA,CAAK1E,SAAS,CAAC,iBAAiB,EAAEwD,kEAAe,CAAC;IAClD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAnBI,OAAAkB,KAAA;EAoBF;EAACE,SAAA,CAAAJ,cAAA,EAAAC,oBAAA;EAAA,OAAA5E,YAAA,CAAA2E,cAAA;AAAA,EAvDiC9E,qEAAmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjCK;AAEtB;AAE/B,IAAMmF,oBAAoB,0BAAAJ,oBAAA;EAC/B,SAAAI,qBAAA,EAAc;IAAA,IAAAH,KAAA;IAAA/E,eAAA,OAAAkF,oBAAA;IACZH,KAAA,GAAAC,UAAA,OAAAE,oBAAA;IAEAH,KAAA,CAAK1E,SAAS,CAAC,KAAK,EAAEqC,+CAAG,CAAC;;IAE1B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAnBI,OAAAqC,KAAA;EAoBF;EAACE,SAAA,CAAAC,oBAAA,EAAAJ,oBAAA;EAAA,OAAA5E,YAAA,CAAAgF,oBAAA;AAAA,EA1BuCnF,qEAAmB;;;;;;;;;;;;;;ACJ7D;;AAGO,IAAM2C,GAAG,GAAG,SAANA,GAAGA,CAAIrB,EAAU,EAAEsB,EAAU,EAAK;EAC7C;AAAA,CACD;;;;;;;;;;;;;;;;;;;;;;ACL2D;AACE;AACZ;AACO;;;;;;;;;;;;;;;;;ACDP;AAElD,IAAI0C,kBAAuC,GAAG,IAAIR,2DAAc,CAAC,CAAC;AAE3D,IAAMM,cAAc,GAAG,SAAjBA,cAAcA,CAAIG,IAAyB,EAAW;EACjED,kBAAkB,GAAGC,IAAI;AAC3B,CAAC;AAEM,IAAMF,cAAc,GAAG,SAAjBA,cAAcA,CAAA,EAA8B;EACvD,OAAOC,kBAAkB;AAC3B,CAAC;;;;;;;;;;;;;;;;;;;;;;ACZ+C;AAGzC,IAAMlE,MAAM;EAKjB,SAAAA,OAAA,EAA8D;IAAA,IAAlDQ,IAAI,GAAAd,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAA0E,SAAA,GAAA1E,SAAA,MAAG,CAAC;IAAA,IAAEe,IAAI,GAAAf,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAA0E,SAAA,GAAA1E,SAAA,MAAG,CAAC;IAAA,IAAES,IAAqB,GAAAT,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAA0E,SAAA,GAAA1E,SAAA,MAAG,IAAI;IAAAb,eAAA,OAAAmB,MAAA;IAAAlB,eAAA,eAJ9C,CAAC;IAAAA,eAAA,eACD,CAAC;IAAAA,eAAA,eACgB,IAAI;IAGjC,IAAI,CAAC0B,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACN,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACA,IAAI,EAAE;MACT,IAAI,CAACA,IAAI,GAAG,IAAIN,KAAK,CAACW,IAAI,GAAGC,IAAI,CAAC;IACpC;EACF;EAAC,OAAA1B,YAAA,CAAAiB,MAAA;IAAAhB,GAAA;IAAAC,KAAA,EAED,SAAAoF,OAAO7D,IAAY,EAAEC,IAAY,EAAE;MACjC,IAAI,CAACD,IAAI,GAAGA,IAAI;MAChB,IAAI,CAACC,IAAI,GAAGA,IAAI;MAChB,IAAI,CAACN,IAAI,GAAG,IAAIN,KAAK,CAACW,IAAI,GAAGC,IAAI,CAAC;IACpC;EAAC;IAAAzB,GAAA;IAAAC,KAAA,EAED,SAAA+C,IAAA,EAAc;MACZ,OAAOiC,4DAAc,CAAC,CAAC,CAAC3E,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC;IAC9C;EAAC;IAAAN,GAAA;IAAAC,KAAA,EAED,SAAAiC,WAAA,EAAqB;MACnB,OAAO+C,4DAAc,CAAC,CAAC,CAAC3E,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC;IACrD;EAAC;IAAAN,GAAA;IAAAC,KAAA,EAED,SAAA6D,WAAA,EAAqB;MACnB,OAAOmB,4DAAc,CAAC,CAAC,CAAC3E,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC;IACrD;EAAC;IAAAN,GAAA;IAAAC,KAAA,EAED,SAAAqF,QAAA,EAAoB;MAClB,IAAMnE,IAAI,GAAG,EAAE;MACf,KAAK,IAAIU,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,IAAI,CAACL,IAAI,EAAEK,GAAG,IAAI,CAAC,EAAE;QAC3C,KAAK,IAAID,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,IAAI,CAACH,IAAI,EAAEG,GAAG,IAAI,CAAC,EAAE;UAC3CT,IAAI,CAACwC,IAAI,CAAC,IAAI,CAACxC,IAAI,CAACU,GAAG,CAAC,CAACD,GAAG,CAAC,CAAC;QAChC;MACF;MACA,OAAOT,IAAI;IACb;EAAC;IAAAnB,GAAA;IAAAC,KAAA,EAED,SAAAwD,UAAUjC,IAAY,EAAEC,IAAY,EAAU;MAC5C,OAAOwD,4DAAc,CAAC,CAAC,CAAC3E,OAAO,CAAC,WAAW,EAAE,IAAI,EAAEkB,IAAI,EAAEC,IAAI,CAAC;IAChE;EAAC;IAAAzB,GAAA;IAAAC,KAAA,EAED,SAAAmC,UAAA,EAAoB;MAClB,OAAO6C,4DAAc,CAAC,CAAC,CAAC3E,OAAO,CAAC,WAAW,EAAE,IAAI,CAAC;IACpD;EAAC;IAAAN,GAAA;IAAAC,KAAA,EAED,SAAA6B,iBAAiBF,GAAW,EAAU;MACpC,OAAOqD,4DAAc,CAAC,CAAC,CAAC3E,OAAO,CAAC,kBAAkB,EAAE,IAAI,EAAEsB,GAAG,CAAC;IAChE;EAAC;IAAA5B,GAAA;IAAAC,KAAA,EAED,SAAA4D,iBAAiBhC,GAAW,EAAU;MACpC,OAAOoD,4DAAc,CAAC,CAAC,CAAC3E,OAAO,CAAC,kBAAkB,EAAE,IAAI,EAAEuB,GAAG,CAAC;IAChE,CAAC;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAVG;IAAA7B,GAAA;IAAAC,KAAA,EAeD,SAAA2B,IAAIA,IAAW,EAAU;MACvB,OAAOqD,4DAAc,CAAC,CAAC,CAAC3E,OAAO,CAAC,KAAK,EAAE,IAAI,EAAEsB,IAAG,CAAC;IACnD;EAAC;IAAA5B,GAAA;IAAAC,KAAA,EAED,SAAA4B,IAAIA,IAAW,EAAU;MACvB,OAAOoD,4DAAc,CAAC,CAAC,CAAC3E,OAAO,CAAC,KAAK,EAAE,IAAI,EAAEuB,IAAG,CAAC;IACnD;EAAC;IAAA7B,GAAA;IAAAC,KAAA,EAED,SAAAsF,QAAA,EAAU;MACR,OAAO,IAAI,CAACpC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAACP,GAAG,CAAC,CAAC,CAAClB,GAAG,CAAC,CAAC,CAAC,CAACmB,QAAQ,CAAC,CAAC,CAAC;IACnD;EAAC;IAAA7C,GAAA;IAAAC,KAAA,EAED,SAAAyD,gBAAA,EAA0B;MACxB,OAAOuB,4DAAc,CAAC,CAAC,CAAC3E,OAAO,CAAC,iBAAiB,EAAE,IAAI,CAAC;IAC1D;EAAC;IAAAN,GAAA;IAAAC,KAAA,EAED,SAAAgB,IAAA,EAAc;MACZ,OAAOgE,4DAAc,CAAC,CAAC,CAAC3E,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC;IAC9C;EAAC;IAAAN,GAAA;IAAAC,KAAA,EAED,SAAA8C,KAAA,EAAO;MACL,OAAOkC,4DAAc,CAAC,CAAC,CAAC3E,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC;IAC/C;EAAC;IAAAN,GAAA;IAAAC,KAAA,EAED,SAAA+B,IAAA,EAAc;MACZ,OAAOiD,4DAAc,CAAC,CAAC,CAAC3E,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC;IAC9C;EAAC;IAAAN,GAAA;IAAAC,KAAA,EAED,SAAA8D,OAAO/B,GAAW,EAAU;MAC1B,OAAOiD,4DAAc,CAAC,CAAC,CAAC3E,OAAO,CAAC,QAAQ,EAAE,IAAI,EAAE0B,GAAG,CAAC;IACtD;EAAC;IAAAhC,GAAA;IAAAC,KAAA,EAED,SAAAgE,OAAOD,GAAW,EAAU;MAC1B,OAAOiB,4DAAc,CAAC,CAAC,CAAC3E,OAAO,CAAC,QAAQ,EAAE,IAAI,EAAE0D,GAAG,CAAC;IACtD;EAAC;IAAAhE,GAAA;IAAAC,KAAA,EAED,SAAAsE,SAAA,EAAmB;MACjB,OAAOU,4DAAc,CAAC,CAAC,CAAC3E,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC;IACnD;EAAC;IAAAN,GAAA;IAAAC,KAAA,EAED,SAAAiE,QAAA,EAAkB;MAChB,OAAOe,4DAAc,CAAC,CAAC,CAAC3E,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC;IAClD;EAAC;IAAAN,GAAA;IAAAC,KAAA,EAED,SAAAkE,UAAA,EAAiC;MAAA,IAAvBC,SAAS,GAAA1D,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAA0E,SAAA,GAAA1E,SAAA,MAAG,CAAC;MACrB;MACA,OAAOuE,4DAAc,CAAC,CAAC,CAAC3E,OAAO,CAAC,WAAW,EAAE,IAAI,EAAE8D,SAAS,CAAC;IAC/D;EAAC;IAAApE,GAAA;IAAAC,KAAA,EAED,SAAA4C,SAAA,EAA0B;MAAA,IAAjBP,GAAG,GAAA5B,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAA0E,SAAA,GAAA1E,SAAA,MAAG,CAAC;MACd,OAAOuE,4DAAc,CAAC,CAAC,CAAC3E,OAAO,CAAC,UAAU,EAAE,IAAI,EAAEgC,GAAG,CAAC;IACxD;EAAC;IAAAtC,GAAA;IAAAC,KAAA,EAED,SAAAqE,KAAA,EAAe;MACb,OAAOW,4DAAc,CAAC,CAAC,CAAC3E,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC;IAC/C;EAAC;IAAAN,GAAA;IAAAC,KAAA,EAED,SAAAsC,IAAIZ,CAAS,EAAU;MACrB,OAAOsD,4DAAc,CAAC,CAAC,CAAC3E,OAAO,CAAC,KAAK,EAAE,IAAI,EAAEqB,CAAC,CAAC;IACjD;EAAC;IAAA3B,GAAA;IAAAC,KAAA,EAED,SAAAkD,SAASb,GAAoB,EAAU;MACrC,OAAO2C,4DAAc,CAAC,CAAC,CAAC3E,OAAO,CAAC,UAAU,EAAE,IAAI,EAAEgC,GAAG,CAAC;IACxD;EAAC;IAAAtC,GAAA;IAAAC,KAAA,EAED,SAAAuE,SAAS7C,CAAkB,EAAU;MACnC,OAAOsD,4DAAc,CAAC,CAAC,CAAC3E,OAAO,CAAC,UAAU,EAAE,IAAI,EAAEqB,CAAC,CAAC;IACtD;EAAC;IAAA3B,GAAA;IAAAC,KAAA,EAED,SAAAoB,QAAQmE,EAA2B,EAAU;MAC3C,IAAMrE,IAAI,GAAG,EAAE;MACf,KAAK,IAAIU,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,IAAI,CAACL,IAAI,EAAEK,GAAG,IAAI,CAAC,EAAE;QAC3CV,IAAI,CAACU,GAAG,CAAC,GAAG,EAAE;QACd,KAAK,IAAID,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,IAAI,CAACH,IAAI,EAAEG,GAAG,IAAI,CAAC,EAAE;UAC3CT,IAAI,CAACU,GAAG,CAAC,CAACD,GAAG,CAAC,GAAG4D,EAAE,CAAC,IAAI,CAACrE,IAAI,CAACU,GAAG,CAAC,CAACD,GAAG,CAAC,CAAC;QAC1C;MACF;MACA,OAAOZ,MAAM,CAACyE,IAAI,CAACtE,IAAI,CAAC;IAC1B;EAAC;IAAAnB,GAAA;IAAAC,KAAA,EAED,SAAAmD,MAAA,EAAkB;MAChB,OAAO,CAAC,IAAI,CAAC5B,IAAI,EAAE,IAAI,CAACC,IAAI,CAAC;IAC/B;EAAC;IAAAzB,GAAA;IAAAC,KAAA,EAED,SAAAoC,OAAOC,GAAoB,EAAU;MACnC,OAAO2C,4DAAc,CAAC,CAAC,CAAC3E,OAAO,CAAC,QAAQ,EAAE,IAAI,EAAEgC,GAAG,CAAC;IACtD;EAAC;IAAAtC,GAAA;IAAAC,KAAA,EAED,SAAAiD,SAAA,EAAmB;MACjB,OAAO+B,4DAAc,CAAC,CAAC,CAAC3E,OAAO,CAAC,oBAAoB,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;IACjE;EAAC;IAAAN,GAAA;IAAAC,KAAA,EAED,SAAAwE,mBAAmBnC,GAAW,EAAU;MACtC,OAAO2C,4DAAc,CAAC,CAAC,CAAC3E,OAAO,CAAC,oBAAoB,EAAE,IAAI,EAAEgC,GAAG,CAAC;IAClE;EAAC;IAAAtC,GAAA;IAAAC,KAAA,EAED,SAAAyB,IAAIC,CAAkB,EAAU;MAC9B,OAAOsD,4DAAc,CAAC,CAAC,CAAC3E,OAAO,CAAC,KAAK,EAAE,IAAI,EAAEqB,CAAC,CAAC;IACjD;EAAC;IAAA3B,GAAA;IAAAC,KAAA,EAED,SAAA6C,IAAA,EAAc;MACZ,OAAOmC,4DAAc,CAAC,CAAC,CAAC3E,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC;IAC9C;EAAC;IAAAN,GAAA;IAAAC,KAAA,EAED,SAAAyF,KAAA,EAAe;MACb,OAAO,IAAI,CAAC9C,GAAG,CAAC,CAAC,CACd4B,QAAQ,CAAC,IAAI,CAACrB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAACP,GAAG,CAAC,CAAC,CAAC,CACjCP,MAAM,CAAC,IAAI,CAACO,GAAG,CAAC,CAAC,CAAClB,GAAG,CAAC,IAAI,CAACyB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAACP,GAAG,CAAC,CAAC,CAAC,CAAC;IACpD;EAAC;IAAA5C,GAAA;IAAAC,KAAA,EAED,SAAA0F,QAAA,EAAkB;MAChB,IAAM3D,GAAG,GAAG,IAAI,CAACA,GAAG,CAAC,CAAC,GAAG,IAAI;MAC7B,OAAO,IAAI,CAACwC,QAAQ,CAACxC,GAAG,CAAC,CAACY,GAAG,CAAC,CAAC,CAACP,MAAM,CAAC,IAAI,CAACyB,UAAU,CAAC,CAAC,CAACL,SAAS,CAAC,IAAI,CAAChC,IAAI,EAAE,CAAC,CAAC,CAACW,SAAS,CAAC,CAAC,CAAC;IAC/F;EAAC;IAAApC,GAAA;IAAAC,KAAA,EAED,SAAA2C,IAAA,EAAc;MACZ,OAAOqC,4DAAc,CAAC,CAAC,CAAC3E,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC;IAC9C;EAAC;IAAAN,GAAA;IAAAC,KAAA,EAED,SAAAoD,IAAIf,GAAW,EAAU;MACvB,OAAO2C,4DAAc,CAAC,CAAC,CAAC3E,OAAO,CAAC,KAAK,EAAE,IAAI,EAAEgC,GAAG,CAAC;IACnD;EAAC;IAAAtC,GAAA;IAAAC,KAAA,EAED,SAAAA,MAAM4B,GAAG,EAAED,GAAG,EAAqB;MAAA,IAAnB3B,MAAK,GAAAS,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAA0E,SAAA,GAAA1E,SAAA,MAAG0E,SAAS;MAC/B,IAAInF,MAAK,KAAKmF,SAAS,EAAE;QACvB,OAAO,IAAI,CAACjE,IAAI,CAACU,GAAG,CAAC,CAACD,GAAG,CAAC;MAC5B;MACA,IAAI,CAACT,IAAI,CAACU,GAAG,CAAC,CAACD,GAAG,CAAC,GAAG3B,MAAK;MAC3B,OAAO,IAAI;IACb;EAAC;IAAAD,GAAA;IAAAC,KAAA,EAED,SAAA2F,KAAA,EAAO;MACL,OAAO5E,MAAM,CAACyE,IAAI,CAAC,IAAI,CAACtE,IAAI,CAAC;IAC/B;EAAC;IAAAnB,GAAA;IAAAC,KAAA,EAMD,SAAAO,OAAOmB,CAAS,EAAE;MAChB,KAAK,IAAIE,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGF,CAAC,CAACH,IAAI,EAAEK,GAAG,IAAI,CAAC,EAAE;QACxC,IAAI,CAACV,IAAI,CAACwC,IAAI,CAAChC,CAAC,CAACR,IAAI,CAACU,GAAG,CAAC,CAAC;MAC7B;MACA,OAAO,IAAI;IACb;EAAC;IAAA7B,GAAA;IAAAC,KAAA,EATD,SAAAwF,KAAYI,GAAe,EAAU;MAAA,IAAAC,KAAA;MACnC,OAAO,IAAI9E,MAAM,CAAC6E,GAAG,CAAClF,MAAM,EAAE,EAAAmF,KAAA,GAAAD,GAAG,CAAC,CAAC,CAAC,cAAAC,KAAA,uBAANA,KAAA,CAAQnF,MAAM,KAAI,CAAC,EAAEkF,GAAG,CAAC;IACzD;EAAC;AAAA;;;;;;;;;;;;;;;;;ACnN+B;AAE3B,IAAME,MAAM,GAAG,SAATA,MAAMA,CACjBC,KAAa,EACbC,QAAgB,EAChBC,MAAc,EACdC,KAAa,EACbC,QAAgB,EAChBC,QAAgB,EAChBC,KAAa,EACbC,KAAa,EACbC,QAAgB,EAChBC,QAAgB,EACL;EACX,IAAMhF,IAAI,GAAG4E,QAAQ,GAAGD,QAAQ,GAAGH,QAAQ;EAC3C,IAAMzE,IAAI,GAAG,CAAC,CAAC2E,KAAK,GAAGE,QAAQ,GAAG,CAAC,GAAGE,KAAK,IAAIE,QAAQ,GAAG,CAAC,KAAK,CAACP,MAAM,GAAGE,QAAQ,GAAG,CAAC,GAAGE,KAAK,IAAIE,QAAQ,GAAG,CAAC,CAAC;EAC/G,IAAIE,gBAAgB,GAAG,CAAC;EACxB,IAAMC,MAAM,GAAG,IAAI3F,2CAAM,CAACQ,IAAI,EAAEC,IAAI,CAAC,CAAC8C,QAAQ,CAAC,CAAC;EAEhD,KAAK,IAAIqC,SAAS,GAAG,CAACN,KAAK,EAAEM,SAAS,GAAGR,QAAQ,IAAIF,MAAM,GAAGI,KAAK,EAAEM,SAAS,IAAIJ,QAAQ,EAAE;IAC1F,KAAK,IAAIK,SAAS,GAAG,CAACN,KAAK,EAAEM,SAAS,GAAGR,QAAQ,IAAIF,KAAK,GAAGI,KAAK,EAAEM,SAAS,IAAIJ,QAAQ,EAAE;MACzF,IAAIK,gBAAgB,GAAG,CAAC;MACxB,KAAK,IAAIC,OAAO,GAAG,CAAC,EAAEA,OAAO,GAAGd,QAAQ,EAAEc,OAAO,EAAE,EAAE;QACnD,IAAMC,WAAW,GAAGd,MAAM,GAAGC,KAAK,GAAGY,OAAO;QAC5C,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,QAAQ,EAAEa,CAAC,EAAE,EAAE;UACjC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,QAAQ,EAAEa,CAAC,EAAE,EAAE;YACjC,IAAIN,SAAS,GAAGK,CAAC,IAAI,CAAC,IAAIJ,SAAS,GAAGK,CAAC,IAAI,CAAC,IAAIL,SAAS,GAAGK,CAAC,GAAGf,KAAK,IAAIS,SAAS,GAAGK,CAAC,GAAGf,MAAM,EAAE;cAC/FS,MAAM,CAACxF,IAAI,CAACuF,gBAAgB,CAAC,CAACI,gBAAgB,CAAC,GAC7Cd,KAAK,CAAC7E,IAAI,CAAC,CAAC8F,CAAC,GAAGL,SAAS,IAAIT,KAAK,GAAGU,SAAS,GAAGK,CAAC,GAAGF,WAAW,CAAC,CAAC,CAAC,CAAC;YACxE;YACAF,gBAAgB,EAAE;UACpB;QACF;MACF;MACAJ,gBAAgB,EAAE;IACpB;EACF;EACA,OAAOC,MAAM;AACf,CAAC;AAEM,IAAMQ,OAAO,GAAG,SAAVA,OAAOA,CAClBnB,KAAa,EACbC,QAAgB,EAChBC,MAAc,EACdC,KAAa,EACbC,QAAgB,EAChBC,QAAgB,EAChBG,QAAgB,EAChBC,QAAgB,EACL;EACX,IAAMW,WAAW,GAAG,CAACjB,KAAK,GAAGE,QAAQ,IAAII,QAAQ,GAAG,CAAC;EACrD,IAAMY,YAAY,GAAG,CAACnB,MAAM,GAAGE,QAAQ,IAAII,QAAQ,GAAG,CAAC;EACvD,IAAMc,WAAW,GAAGrB,QAAQ;EAE5B,IAAIa,gBAAgB,GAAG,CAAC;EACxB,IAAMH,MAAM,GAAG,IAAI3F,2CAAM,CAACoG,WAAW,GAAGC,YAAY,GAAGC,WAAW,EAAE,CAAC,CAAC,CAAC/C,QAAQ,CAAC,CAAC;EAEjF,KAAK,IAAIqC,SAAS,GAAG,CAAC,EAAEA,SAAS,GAAGR,QAAQ,IAAIF,MAAM,EAAEU,SAAS,IAAIJ,QAAQ,EAAE;IAC7E,KAAK,IAAIK,SAAS,GAAG,CAAC,EAAEA,SAAS,GAAGR,QAAQ,IAAIF,KAAK,EAAEU,SAAS,IAAIJ,QAAQ,EAAE;MAC5E,KAAK,IAAIM,OAAO,GAAG,CAAC,EAAEA,OAAO,GAAGd,QAAQ,EAAEc,OAAO,EAAE,EAAE;QACnD,IAAIQ,IAAI,GAAG,CAACtF,QAAQ;QACpB,IAAM+E,WAAW,GAAGd,MAAM,GAAGC,KAAK,GAAGY,OAAO;QAC5C,IAAMS,YAAY,GAAGJ,WAAW,GAAGC,YAAY,GAAGN,OAAO;QACzD,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,QAAQ,EAAEa,CAAC,EAAE,EAAE;UACjC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,QAAQ,EAAEa,CAAC,EAAE,EAAE;YACjCK,IAAI,GAAGhG,IAAI,CAACS,GAAG,CAACuF,IAAI,EAAEvB,KAAK,CAAC7E,IAAI,CAAC6F,WAAW,GAAG,CAACC,CAAC,GAAGL,SAAS,IAAIT,KAAK,GAAGU,SAAS,GAAGK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UAC7F;QACF;QACAP,MAAM,CAACxF,IAAI,CAACqG,YAAY,GAAGV,gBAAgB,CAAC,CAAC,CAAC,CAAC,GAAGS,IAAI;MACxD;MACAT,gBAAgB,EAAE;IACpB;EACF;EACA,OAAOH,MAAM;AACf,CAAC;AAEM,IAAMc,KAAK,GAAG,SAARA,KAAKA,CAAInF,GAAW,EAAEoF,aAAqB,EAAa;EACnE,OAAOnG,IAAI,CAACkG,KAAK,CAAC,CAACnF,GAAG,GAAG,QAAQ,IAAIf,IAAI,CAAC8B,GAAG,CAAC,EAAE,EAAEqE,aAAa,CAAC,CAAC,GAAGnG,IAAI,CAAC8B,GAAG,CAAC,EAAE,EAAEqE,aAAa,CAAC;AACjG,CAAC;;;;;;UC9ED;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;;;;;;ACNuC;AACc;AACgD","sources":["webpack://impulse-math-ts/./src/typescript/Computation/AbstractComputation.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/abs.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/add.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/col.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/colMaxCoeffIndex.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/colwiseSum.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/divide.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/dot.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/exp.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/fraction.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/log.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/max.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/mean.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/minusOne.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/multiply.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/pow.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/reluBackpropagation.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/replicate.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/rollToColMatrix.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/row.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/rowMaxCoeffIndex.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/rowwiseSum.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/setMax.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/setMin.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/setOnes.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/setRandom.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/setZeros.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/sqrt.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/subtract.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/subtractNumberFrom.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/sum.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/transpose.ts","webpack://impulse-math-ts/./src/typescript/Computation/ComputationCPU.ts","webpack://impulse-math-ts/./src/typescript/Computation/ComputationMultiCore.ts","webpack://impulse-math-ts/./src/typescript/Computation/MultiCore/dot.ts","webpack://impulse-math-ts/./src/typescript/Computation/index.ts","webpack://impulse-math-ts/./src/typescript/Computation/utils.ts","webpack://impulse-math-ts/./src/typescript/Math/Matrix.ts","webpack://impulse-math-ts/./src/typescript/Math/math.ts","webpack://impulse-math-ts/webpack/bootstrap","webpack://impulse-math-ts/webpack/runtime/define property getters","webpack://impulse-math-ts/webpack/runtime/hasOwnProperty shorthand","webpack://impulse-math-ts/webpack/runtime/make namespace object","webpack://impulse-math-ts/./src/typescript/main.ts"],"sourcesContent":["import { Matrix } from \"../Math/Matrix\";\n\ninterface KernelsInterface {\n  [id: string]: (m: Matrix, m2: Matrix | number | void) => Matrix | number;\n}\n\nexport class AbstractComputation {\n  protected kernels: KernelsInterface = {};\n\n  addKernel(name: string, func: (m: Matrix, m2: Matrix | number) => Matrix | number): AbstractComputation {\n    this.kernels[name] = func;\n    return this;\n  }\n\n  execute(name: string, ...args: [Matrix, Matrix] | [Matrix, number] | [Matrix, number, number] | [Matrix]): Matrix | number {\n    if (!this.kernels[name]) {\n      throw new Error(`Kernel '${name}' not exists.`);\n    }\n    return this.kernels[name].apply(null, args);\n  }\n}\n","import { Matrix } from \"../../Math/Matrix\";\n\nexport const abs = (m1: Matrix): Matrix => {\n  const data = [...m1.data];\n  data.forEach((value, index) => {\n    data[index] = Math.abs(value);\n  });\n  return new Matrix(m1.rows, m1.cols, data);\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const add = (m1: Matrix, m: Matrix | number): Matrix => {\n  if (typeof m === \"number\") {\n    const data = [...m1.data];\n    data.forEach((value, index) => {\n      data[index] = value + m;\n    })\n    return new Matrix(m1.rows, m1.cols, data);\n  } else if (m instanceof Matrix) {\n    if (m.rows !== m1.rows || m.cols !== m1.cols) {\n      throw new Error(`Dimention error: rows (x: ${m1.rows}, y: ${m1.cols}) !== (x: ${m.rows}, y: ${m.cols})`);\n    }\n    const data = [...m1.data]\n    data.forEach((value, index) => {\n      data[index] = value + m.data[index];\n    })\n    return new Matrix(m1.rows, m1.cols, data);\n  }\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const col = (m1: Matrix, col: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = m1.data[m1.cols * row + col];\n  }\n  return new Matrix(m1.rows, 1, data);\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const colMaxCoeffIndex = (m1: Matrix, col: number): number => {\n  let maxIndex = -1;\n  let max = -Infinity;\n\n  for (let row = 0; row < m1.rows; row += 1) {\n    if (m1.data[row * m1.cols + col] > max) {\n      max = m1.data[row * m1.cols + col];\n      maxIndex = row;\n    }\n  }\n\n  return maxIndex;\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const colwiseSum = (m1: Matrix): Matrix => {\n  const data = [];\n  const t = m1.transpose();\n  for (let row = 0; row < t.rows; row += 1) {\n    data[row] = 0;\n    for (let col = 0; col < t.cols; col += 1) {\n      data[row] += t.data[row * t.cols + col];\n    }\n  }\n  return new Matrix(m1.cols, 1, data);\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const divide = (m1: Matrix, num: Matrix | number): Matrix => {\n  if (typeof num === \"number\") {\n    const data = [...m1.data];\n    data.forEach((value, index) => {\n      data[index] = value / num;\n    })\n    return new Matrix(m1.rows, m1.cols, data);\n  } else {\n    if (num.rows !== m1.rows || num.cols !== m1.cols) {\n      throw new Error(`Dimensions error (${m1.rows}, ${m1.cols}) !== (${num.rows}, ${num.cols})`);\n    }\n\n    const data = [...m1.data];\n    data.forEach((value, index) => {\n      data[index] = value / num.data[index];\n    })\n    return new Matrix(m1.rows, m1.cols, data);\n  }\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const dot = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.cols !== m2.rows) {\n    throw new Error(`DIMENSIONS error. m1.cols ${m1.rows} ${m1.cols} !== m2.rows ${m2.rows} ${m2.cols}.`);\n  }\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = new Array(m2.cols);\n    for (let col = 0; col < m2.cols; col += 1) {\n      data[row][col] = 0;\n      for (let i = 0; i < m1.cols; i += 1) {\n        for (let j = 0; j < m2.rows; j += 1) {\n          data[row][col] += m1.data[row * m1.cols + i] * m2.data[j * m2.cols + col];\n        }\n      }\n    }\n  }\n  let newData = [];\n  data.forEach((row) => {\n    newData = [...newData, ...row];\n  })\n  return new Matrix(m1.rows, m2.cols, newData);\n};\n","import { Matrix } from \"../../Math/Matrix\";\n\nexport const exp = (m1: Matrix): Matrix => {\n  const data = [...m1.data];\n  data.forEach((value, index) => {\n    data[index] = Math.exp(value + 1e-16);\n  })\n  return new Matrix(m1.rows, m1.cols, data);\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const fraction = (m1: Matrix, num: number): Matrix => {\n  const data = [...m1.data];\n  data.forEach((value, index) => {\n    data[index] = num / value;\n  })\n  return new Matrix(m1.rows, m1.cols, data);\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const log = (m1: Matrix): Matrix => {\n  const data = [...m1.data];\n  data.forEach((value, index) => {\n    data[index] = Math.log(value + 1e-8);\n  })\n  return new Matrix(m1.rows, m1.cols, data);\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const max = (m1: Matrix): number => {\n  let max = -Infinity;\n  for (let index = 0; index < m1.rows * m1.cols; index += 1) {\n    max = Math.max(m1.data[index], max);\n  }\n  return max;\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const mean = (m1: Matrix): number => {\n  let sum = 0;\n  const numberOfElements = m1.rows * m1.cols;\n\n  for (let index = 0; index < m1.rows * m1.cols; index += 1) {\n    sum += m1.data[index];\n  }\n\n  return sum / numberOfElements;\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const minusOne = (m1: Matrix): Matrix => {\n  const data = [...m1.data];\n  for (let index = 0; index < m1.rows * m1.cols; index += 1) {\n    data[index] = 1 - data[index];\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const multiply = (m1: Matrix, num: Matrix | number): Matrix => {\n  if (typeof num === \"number\") {\n    const data = [...m1.data];\n    data.forEach((value, index) => {\n      data[index] = value * num;\n    })\n    return new Matrix(m1.rows, m1.cols, data);\n  } else {\n    if (num.rows !== m1.rows || m1.cols !== num.cols) {\n      throw new Error(`Dimension error: ${m1.shape()} !== ${num.shape()}`);\n    }\n    const data = [...m1.data];\n    data.forEach((value, index) => {\n      data[index] = value * num.data[index];\n    })\n    return new Matrix(m1.rows, m1.cols, data);\n  }\n};\n","import { Matrix } from \"../../Math/Matrix\";\n\nexport const pow = (m1: Matrix, num: number): Matrix => {\n  const data = [...m1.data];\n  data.forEach((value, index) => {\n    data[index] = Math.pow(value, num);\n  })\n  return new Matrix(m1.rows, m1.cols, data);\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const reluBackpropagation = (delta: Matrix, A: Matrix): Matrix => {\n  const data = [...A.data];\n  data.forEach((value, index) => {\n    data[index] = value > 0 ? 1 : 0;\n  })\n  return new Matrix(A.rows, A.cols, data);\n};\n","import { Matrix } from \"../../Math/Matrix\";\n\nexport const replicate = (m1: Matrix, rows: number, cols: number): Matrix => {\n    if (rows === 1 && m1.cols === 1 && cols > 1) {\n      const newData = [];\n      for (let col = 0; col < cols; col += 1) {\n        for (let row = 0; row < m1.rows; row += 1) {\n          newData[row * cols + col] = m1.data[row * m1.cols];\n        }\n      }\n      return new Matrix(m1.rows, cols, newData);\n    }\n  else\n    if (cols === 1 && m1.rows === 1 && rows > 1) {\n      const newData = [];\n      for (let row = 0; row < rows; row += 1) {\n        for (let col = 0; col < m1.cols; col += 1) {\n          newData[row * m1.cols + col] = m1.data[col];\n        }\n      }\n      return new Matrix(rows, m1.cols, newData);\n    }\n    return m1;\n  }\n;","import { Matrix } from \"../../Math/Matrix\";\n\nexport const rollToColMatrix = (m1: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    for (let col = 0; col < m1.cols; col += 1) {\n      data.push(m1.data[row * m1.cols + col]);\n    }\n  }\n  return new Matrix(m1.rows * m1.cols, 1, data);\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const row = (m1: Matrix, row: number): Matrix => {\n  const startIndex = row * m1.cols;\n  const data = [];\n  for (let i = startIndex; i < startIndex + m1.cols; i += 1) {\n    data.push(m1.data[i]);\n  }\n  return new Matrix(1, m1.cols, data);\n}","import { Matrix } from \"../../Math/Matrix\";\n\nexport const rowMaxCoeffIndex = (m1: Matrix, row: number): number => {\n  let maxIndex = -1;\n  let max = -Infinity;\n\n  for (let col = 0; col < m1.cols; col += 1) {\n    if (m1.data[row * m1.cols + col] > max) {\n      max = m1[row * m1.cols + col];\n      maxIndex = col;\n    }\n  }\n\n  return maxIndex;\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const rowwiseSum = (m1: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    let sum = 0.0;\n    for (let col = 0; col < m1.cols; col += 1) {\n      sum += m1.data[row * m1.cols + col];\n    }\n    data.push(sum);\n  }\n  return new Matrix(1, m1.rows, data);\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const setMax = (m1: Matrix, max: number): Matrix => {\n  const data = [...m1.data];\n  data.forEach((value, index) => {\n    data[index] = Math.min(value, max);\n  })\n  return new Matrix(m1.rows, m1.cols, data);\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const setMin = (m1: Matrix, min: number): Matrix => {\n  const data = [...m1.data];\n  data.forEach((value, index) => {\n    data[index] = Math.max(value, min);\n  })\n  return new Matrix(m1.rows, m1.cols, data);\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const setOnes = (m1: Matrix): Matrix => {\n  const data = [...m1.data];\n  data.forEach((value, index) => {\n    data[index] = 1;\n  })\n  return new Matrix(m1.rows, m1.cols, data);\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const setRandom = (m1: Matrix, parameter: number): Matrix => {\n  const data = [...m1.data];\n  data.forEach((value, index) => {\n    data[index]  = (Math.random() * 4 - 2) * Math.sqrt(2 / parameter); // todo: gaussian distribution;\n  })\n  return new Matrix(m1.rows, m1.cols, data);\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const setZeros = (m1: Matrix): Matrix => {\n  const data = [...m1.data];\n  data.forEach((value, index) => {\n    data[index] = 0;\n  })\n  return new Matrix(m1.rows, m1.cols, data);\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const sqrt = (m1: Matrix): Matrix => {\n  const data = [...m1.data];\n  data.forEach((value, index) => {\n    data[index] = Math.sqrt(value + 1e-8);\n  })\n  return new Matrix(m1.rows, m1.cols, data);\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const subtract = (m1: Matrix, m: Matrix | number): Matrix => {\n  if (typeof m === \"number\") {\n    const data = [...m1.data];\n    data.forEach((value, index) => {\n      data[index] = value - m;\n    })\n    return new Matrix(m1.rows, m1.cols, data);\n  } else {\n    if (m1.rows !== m.rows || m1.cols !== m.cols) {\n      throw new Error(`Dimensions error: ${m1.rows}, ${m1.cols} !== ${m.rows}, ${m.cols}`);\n    }\n    const data = [...m1.data];\n    data.forEach((value, index) => {\n      data[index] = value - m.data[index];\n    })\n    return new Matrix(m1.rows, m1.cols, data);\n  }\n};\n","import { Matrix } from \"../../Math/Matrix\";\n\nexport const subtractNumberFrom = (m1: Matrix, num: number): Matrix => {\n  const data = [...m1.data];\n  data.forEach((value, index) => {\n    data[index] = num - value;\n  })\n  return new Matrix(m1.rows, m1.cols, data);\n};\n","import { Matrix } from \"../../Math/Matrix\";\n\nexport const sum = (m1: Matrix): number => {\n  let sum = 0.0;\n  for (let index = 0; index < m1.rows * m1.cols; index += 1) {\n    sum += m1.data[index];\n  }\n  return sum;\n};","import {Matrix} from \"../../Math/Matrix\";\n\nexport const transpose = (m1: Matrix): Matrix => {\n    const data = [];\n    for (let col = 0; col < m1.cols; ++col) {\n        for (let row = 0; row < m1.rows; ++row) {\n            data.push(m1.data[row * m1.cols + col]);\n        }\n    }\n    return new Matrix(m1.cols, m1.rows, data);\n};\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { dot } from \"./CPU/dot\";\nimport { transpose } from \"./CPU/transpose\";\nimport { reluBackpropagation } from \"./CPU/reluBackpropagation\";\nimport { add } from './CPU/add'\nimport { subtract } from \"./CPU/subtract\";\nimport { multiply } from \"./CPU/multiply\";\nimport { divide } from \"./CPU/divide\";\nimport { minusOne } from \"./CPU/minusOne\";\nimport { log } from \"./CPU/log\";\nimport { pow } from \"./CPU/pow\";\nimport { exp } from \"./CPU/exp\";\nimport { sqrt } from \"./CPU/sqrt\";\nimport { subtractNumberFrom } from \"./CPU/subtractNumberFrom\";\nimport { setMin } from \"./CPU/setMin\";\nimport { setMax } from \"./CPU/setMax\";\nimport { setOnes } from \"./CPU/setOnes\";\nimport { setZeros } from \"./CPU/setZeros\";\nimport { setRandom } from \"./CPU/setRandom\";\nimport { fraction } from \"./CPU/fraction\";\nimport { max } from \"./CPU/max\";\nimport { abs } from \"./CPU/abs\";\nimport { mean } from \"./CPU/mean\";\nimport { sum } from \"./CPU/sum\";\nimport { rowwiseSum } from \"./CPU/rowwiseSum\";\nimport { colwiseSum } from \"./CPU/colwiseSum\";\nimport { replicate } from \"./CPU/replicate\";\nimport { colMaxCoeffIndex } from \"./CPU/colMaxCoeffIndex\";\nimport { rowMaxCoeffIndex } from \"./CPU/rowMaxCoeffIndex\";\nimport { row } from \"./CPU/row\";\nimport { col } from \"./CPU/col\";\nimport { rollToColMatrix } from \"./CPU/rollToColMatrix\";\n\nexport class ComputationCPU extends AbstractComputation {\n  constructor() {\n    super();\n\n    this.addKernel(\"dot\", dot);\n    this.addKernel(\"transpose\", transpose);\n    this.addKernel(\"reluBackpropagation\", reluBackpropagation);\n    this.addKernel(\"add\", add);\n    this.addKernel(\"subtract\", subtract);\n    this.addKernel(\"multiply\", multiply);\n    this.addKernel(\"divide\", divide);\n    this.addKernel(\"minusOne\", minusOne);\n    this.addKernel(\"subtractNumberFrom\", subtractNumberFrom);\n    this.addKernel(\"log\", log);\n    this.addKernel(\"exp\", exp);\n    this.addKernel(\"pow\", pow);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"setMin\", setMin);\n    this.addKernel(\"setMax\", setMax);\n    this.addKernel(\"setOnes\", setOnes);\n    this.addKernel(\"setZeros\", setZeros);\n    this.addKernel(\"setRandom\", setRandom);\n    this.addKernel(\"fraction\", fraction);\n    this.addKernel(\"max\", max);\n    this.addKernel(\"abs\", abs);\n    this.addKernel(\"mean\", mean);\n    this.addKernel(\"sum\", sum);\n    this.addKernel(\"rowwiseSum\", rowwiseSum);\n    this.addKernel(\"colwiseSum\", colwiseSum);\n    this.addKernel(\"replicate\", replicate);\n    this.addKernel(\"colMaxCoeffIndex\", colMaxCoeffIndex);\n    this.addKernel(\"rowMaxCoeffIndex\", rowMaxCoeffIndex);\n    this.addKernel(\"row\", row);\n    this.addKernel(\"col\", col);\n    this.addKernel(\"rollToColMatrix\", rollToColMatrix);\n    /*\n    this.addKernel(\"subtractFromNumber\", subtractFromNumber);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"fillZeros\", fillZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"divideNumber\", divideNumber);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"logisticBackpropagation\", logisticBackpropagation);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"transpose\", transpose);\n    this.addKernel(\"pow\", pow);\n    this.addKernel(\"log\", log);\n    this.addKernel(\"logMinusOne\", logMinusOne);\n    this.addKernel(\"addNumber\", addNumber);*/\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { Matrix } from \"../Math/Matrix\";\nimport { dot } from \"./MultiCore/dot\";\n\nexport class ComputationMultiCore extends AbstractComputation {\n  constructor() {\n    super();\n\n    this.addKernel(\"dot\", dot);\n\n    /*this.addKernel(\"multiply\", dot);\n    this.addKernel(\"add\", add);\n    this.addKernel(\"subtract\", subtract);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"fillZeros\", fillZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"multiplyNumber\", multiplyNumber);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"divideNumber\", divideNumber);\n    this.addKernel(\"softmaxActivation\", softmaxActivation);\n    this.addKernel(\"softmaxLoss\", softmaxLoss);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"purelinLoss\", purelinLoss);\n    this.addKernel(\"transpose\", transpose);*/\n  }\n}\n","//import { MatrixMultiply } from \"../../../../build/Debug/computation.node\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport const dot = (m1: Matrix, m2: Matrix) => {\n  //console.log(MatrixMultiply([1, 2, 3, 4], [4, 3, 2, 1]));\n};\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { ComputationMultiCore } from \"./ComputationMultiCore\";\nimport { ComputationCPU } from \"./ComputationCPU\";\nimport { setComputation, getComputation } from \"./utils\";\n\nexport { AbstractComputation, ComputationMultiCore, ComputationCPU, setComputation, getComputation };\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { ComputationMultiCore } from \"./ComputationMultiCore\";\nimport { ComputationCPU } from \"./ComputationCPU\";\n\nlet currentComputation: AbstractComputation = new ComputationCPU();\n\nexport const setComputation = (type: AbstractComputation): void => {\n  currentComputation = type;\n};\n\nexport const getComputation = (): AbstractComputation => {\n  return currentComputation;\n};\n","import { getComputation } from \"../Computation\";\nimport { minusOne } from \"../Computation/CPU/minusOne\";\n\nexport class Matrix {\n  public rows = 0;\n  public cols = 0;\n  public data: number[] | null = null;\n\n  constructor(rows = 0, cols = 0, data: number[] | null = null) {\n    this.rows = rows;\n    this.cols = cols;\n    this.data = data;\n    if (!data) {\n      this.data = new Array(rows * cols);\n    }\n  }\n\n  resize(rows: number, cols: number) {\n    this.rows = rows;\n    this.cols = cols;\n    this.data = new Array(rows * cols);\n  }\n\n  sum(): number {\n    return getComputation().execute(\"sum\", this) as number;\n  }\n\n  colwiseSum(): Matrix {\n    return getComputation().execute(\"colwiseSum\", this) as Matrix;\n  }\n\n  rowwiseSum(): Matrix {\n    return getComputation().execute(\"rowwiseSum\", this) as Matrix;\n  }\n\n  flatten(): number[] {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        data.push(this.data[row][col]);\n      }\n    }\n    return data;\n  }\n\n  replicate(rows: number, cols: number): Matrix {\n    return getComputation().execute(\"replicate\", this, rows, cols) as Matrix;\n  }\n\n  transpose(): Matrix {\n    return getComputation().execute(\"transpose\", this) as Matrix;\n  }\n\n  colMaxCoeffIndex(col: number): number {\n    return getComputation().execute(\"colMaxCoeffIndex\", this, col) as number;\n  }\n\n  rowMaxCoeffIndex(row: number): number {\n    return getComputation().execute(\"rowMaxCoeffIndex\", this, row) as number;\n  }/*\n\n  block(startRow: number, startCol: number, blockRows: number, blockCols: number): Matrix {\n    const data = [];\n\n    for (let row = startRow, newRow = 0; row < this.rows && row < startRow + blockRows; row += 1, newRow += 1) {\n      data[newRow] = new Array(blockCols);\n      for (let col = startCol, newCol = 0; col < this.cols && col < startCol + blockCols; col += 1, newCol += 1) {\n        data[newRow][newCol] = this.data[row][col];\n      }\n    }\n\n    return new Matrix(blockRows, blockCols, data);\n  }*/\n\n  col(col: number): Matrix {\n    return getComputation().execute(\"col\", this, col) as Matrix;\n  }\n\n  row(row: number): Matrix {\n    return getComputation().execute(\"row\", this, row) as Matrix;\n  }\n\n  sigmoid() {\n    return this.multiply(-1).exp().add(1).fraction(1);\n  }\n\n  rollToColMatrix(): Matrix {\n    return getComputation().execute(\"rollToColMatrix\", this) as Matrix;\n  }\n\n  abs(): Matrix {\n    return getComputation().execute(\"abs\", this) as Matrix;\n  }\n\n  mean() {\n    return getComputation().execute(\"mean\", this) as number;\n  }\n\n  max(): number {\n    return getComputation().execute(\"max\", this) as number;\n  }\n\n  setMax(max: number): Matrix {\n    return getComputation().execute(\"setMax\", this, max) as Matrix;\n  }\n\n  setMin(min: number): Matrix {\n    return getComputation().execute(\"setMin\", this, min) as Matrix;\n  }\n\n  setZeros(): Matrix {\n    return getComputation().execute(\"setZeros\", this) as Matrix;\n  }\n\n  setOnes(): Matrix {\n    return getComputation().execute(\"setOnes\", this) as Matrix;\n  }\n\n  setRandom(parameter = 1): Matrix {\n    // todo: gaussian distribution\n    return getComputation().execute(\"setRandom\", this, parameter) as Matrix;\n  }\n\n  fraction(num = 1): Matrix {\n    return getComputation().execute(\"fraction\", this, num) as Matrix;\n  }\n\n  sqrt(): Matrix {\n    return getComputation().execute(\"sqrt\", this) as Matrix;\n  }\n\n  dot(m: Matrix): Matrix {\n    return getComputation().execute(\"dot\", this, m) as Matrix;\n  }\n\n  multiply(num: number | Matrix): Matrix {\n    return getComputation().execute(\"multiply\", this, num) as Matrix;\n  }\n\n  subtract(m: Matrix | number): Matrix {\n    return getComputation().execute(\"subtract\", this, m) as Matrix;\n  }\n\n  forEach(cb: (num: number) => number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = cb(this.data[row][col]);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  shape(): number[] {\n    return [this.rows, this.cols];\n  }\n\n  divide(num: number | Matrix): Matrix {\n    return getComputation().execute(\"divide\", this, num) as Matrix;\n  }\n\n  minusOne(): Matrix {\n    return getComputation().execute(\"subtractNumberFrom\", this, -1) as Matrix;\n  }\n\n  subtractNumberFrom(num: number): Matrix {\n    return getComputation().execute(\"subtractNumberFrom\", this, num) as Matrix;\n  }\n\n  add(m: Matrix | number): Matrix {\n    return getComputation().execute(\"add\", this, m) as Matrix;\n  }\n\n  log(): Matrix {\n    return getComputation().execute(\"log\", this) as Matrix;\n  }\n\n  tanh(): Matrix {\n    return this.exp()\n      .subtract(this.multiply(-1).exp())\n      .divide(this.exp().add(this.multiply(-1).exp()));\n  }\n\n  softmax(): Matrix {\n    const max = this.max() - 1e-8;\n    return this.subtract(max).exp().divide(this.rowwiseSum().replicate(this.cols, 1).transpose());\n  }\n\n  exp(): Matrix {\n    return getComputation().execute(\"exp\", this) as Matrix;\n  }\n\n  pow(num: number): Matrix {\n    return getComputation().execute(\"pow\", this, num) as Matrix;\n  }\n\n  value(row, col, value = undefined) {\n    if (value === undefined) {\n      return this.data[row][col];\n    }\n    this.data[row][col] = value;\n    return this;\n  }\n\n  copy() {\n    return Matrix.from(this.data);\n  }\n\n  static from(arr: number[][]): Matrix {\n    return new Matrix(arr.length, arr[0]?.length || 0, arr);\n  }\n\n  concat(m: Matrix) {\n    for (let row = 0; row < m.rows; row += 1) {\n      this.data.push(m.data[row]);\n    }\n    return this;\n  }\n}\n","import { Matrix } from \"./Matrix\";\n\nexport const im2col = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  pad_h: number,\n  pad_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const cols = kernel_w * kernel_h * channels;\n  const rows = ((width - kernel_w + 2 * pad_w) / stride_w + 1) * ((height - kernel_h + 2 * pad_h) / stride_h + 1);\n  let currentResultRow = 0;\n  const result = new Matrix(rows, cols).setZeros();\n\n  for (let boundingY = -pad_h; boundingY + kernel_h <= height + pad_h; boundingY += stride_h) {\n    for (let boundingX = -pad_w; boundingX + kernel_w <= width + pad_w; boundingX += stride_w) {\n      let currentResultCol = 0;\n      for (let channel = 0; channel < channels; channel++) {\n        const inputOffset = height * width * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            if (boundingY + y >= 0 && boundingX + x >= 0 && boundingX + x < width && boundingY + y < height) {\n              result.data[currentResultRow][currentResultCol] =\n                input.data[(y + boundingY) * width + boundingX + x + inputOffset][0];\n            }\n            currentResultCol++;\n          }\n        }\n      }\n      currentResultRow++;\n    }\n  }\n  return result;\n};\n\nexport const maxpool = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const resultWidth = (width - kernel_w) / stride_w + 1;\n  const resultHeight = (height - kernel_h) / stride_h + 1;\n  const resultDepth = channels;\n\n  let currentResultCol = 0;\n  const result = new Matrix(resultWidth * resultHeight * resultDepth, 1).setZeros();\n\n  for (let boundingY = 0; boundingY + kernel_h <= height; boundingY += stride_h) {\n    for (let boundingX = 0; boundingX + kernel_w <= width; boundingX += stride_w) {\n      for (let channel = 0; channel < channels; channel++) {\n        let _max = -Infinity;\n        const inputOffset = height * width * channel;\n        const outputOffset = resultWidth * resultHeight * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            _max = Math.max(_max, input.data[inputOffset + (y + boundingY) * width + boundingX + x][0]);\n          }\n        }\n        result.data[outputOffset + currentResultCol][0] = _max;\n      }\n      currentResultCol++;\n    }\n  }\n  return result;\n};\n\nexport const round = (num: number, decimalPlaces: number): number => {\n  return Math.round((num + 2.23e-16) * Math.pow(10, decimalPlaces)) / Math.pow(10, decimalPlaces);\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { Matrix } from \"./Math/Matrix\";\nimport { maxpool, round, im2col } from \"./Math/math\";\nimport { ComputationMultiCore, ComputationCPU, setComputation, getComputation } from \"./Computation\";\n\nexport { Matrix, maxpool, round, im2col, ComputationMultiCore, ComputationCPU, setComputation, getComputation };\n"],"names":["AbstractComputation","_classCallCheck","_defineProperty","_createClass","key","value","addKernel","name","func","kernels","execute","Error","concat","_len","arguments","length","args","Array","_key","apply","Matrix","abs","m1","data","_toConsumableArray","forEach","index","Math","rows","cols","add","m","col","row","colMaxCoeffIndex","maxIndex","max","Infinity","colwiseSum","t","transpose","divide","num","dot","m2","i","j","newData","exp","fraction","log","mean","sum","numberOfElements","minusOne","multiply","shape","pow","reluBackpropagation","delta","A","replicate","rollToColMatrix","push","startIndex","rowMaxCoeffIndex","rowwiseSum","setMax","min","setMin","setOnes","setRandom","parameter","random","sqrt","setZeros","subtract","subtractNumberFrom","ComputationCPU","_AbstractComputation","_this","_callSuper","_inherits","ComputationMultiCore","setComputation","getComputation","currentComputation","type","undefined","resize","flatten","sigmoid","cb","from","tanh","softmax","copy","arr","_arr$","im2col","input","channels","height","width","kernel_h","kernel_w","pad_h","pad_w","stride_h","stride_w","currentResultRow","result","boundingY","boundingX","currentResultCol","channel","inputOffset","y","x","maxpool","resultWidth","resultHeight","resultDepth","_max","outputOffset","round","decimalPlaces"],"sourceRoot":""}