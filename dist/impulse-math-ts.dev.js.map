{"version":3,"file":"impulse-math-ts.dev.js","mappings":"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","sources":["webpack://impulse-math-ts/./src/typescript/Computation/AbstractComputation.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/abs.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/add.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/col.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/colMaxCoeffIndex.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/colwiseSum.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/divide.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/dot.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/exp.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/fraction.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/log.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/max.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/mean.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/minusOne.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/multiply.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/pow.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/reluBackpropagation.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/replicate.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/rollToColMatrix.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/row.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/rowMaxCoeffIndex.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/rowwiseSum.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/setMax.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/setMin.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/setOnes.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/setRandom.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/setZeros.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/sqrt.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/subtract.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/subtractNumberFrom.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/sum.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/transpose.ts","webpack://impulse-math-ts/./src/typescript/Computation/ComputationCPU.ts","webpack://impulse-math-ts/./src/typescript/Computation/ComputationMultiCore.ts","webpack://impulse-math-ts/./src/typescript/Computation/MultiCore/dot.ts","webpack://impulse-math-ts/./src/typescript/Computation/index.ts","webpack://impulse-math-ts/./src/typescript/Computation/utils.ts","webpack://impulse-math-ts/./src/typescript/Math/Matrix.ts","webpack://impulse-math-ts/./src/typescript/Math/math.ts","webpack://impulse-math-ts/webpack/bootstrap","webpack://impulse-math-ts/webpack/runtime/define property getters","webpack://impulse-math-ts/webpack/runtime/hasOwnProperty shorthand","webpack://impulse-math-ts/webpack/runtime/make namespace object","webpack://impulse-math-ts/./src/typescript/main.ts"],"sourcesContent":["import { Matrix } from \"../Math/Matrix\";\n\ninterface KernelsInterface {\n  [id: string]: (m: Matrix, m2: Matrix | number | void) => Matrix | number;\n}\n\nexport class AbstractComputation {\n  protected kernels: KernelsInterface = {};\n\n  addKernel(name: string, func: (m: Matrix, m2: Matrix | number) => Matrix | number): AbstractComputation {\n    this.kernels[name] = func;\n    return this;\n  }\n\n  execute(name: string, ...args: [Matrix, Matrix] | [Matrix, number] | [Matrix, number, number] | [Matrix]): Matrix | number {\n    if (!this.kernels[name]) {\n      throw new Error(`Kernel '${name}' not exists.`);\n    }\n    return this.kernels[name].apply(null, args);\n  }\n}\n","import { Matrix } from \"../../Math/Matrix\";\n\nexport const abs = (m1: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = Math.abs(m1.data[row][col]);\n    }\n  }\n  return Matrix.from(data);\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const add = (m1: Matrix, m: Matrix | number): Matrix => {\n  if (typeof m === \"number\") {\n    const data = [];\n    for (let row = 0; row < m1.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < m1.cols; col += 1) {\n        data[row][col] = m1.data[row][col] + m;\n      }\n    }\n    return Matrix.from(data);\n  } else if (m instanceof Matrix) {\n    if (m.rows !== m1.rows || m.cols !== m1.cols) {\n      throw new Error(`Dimention error: rows (x: ${m1.rows}, y: ${m1.cols}) !== (x: ${m.rows}, y: ${m.cols})`);\n    }\n    const data = [];\n    for (let row = 0; row < m1.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < m1.cols; col += 1) {\n        data[row][col] = m1.data[row][col] + m.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const col = (m1: Matrix, col: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [m1.data[row][col]];\n  }\n  return new Matrix(m1.rows, 1, data);\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const colMaxCoeffIndex = (m1: Matrix, col: number): number => {\n  let maxIndex = -1;\n  let max = -Infinity;\n\n  for (let row = 0; row < m1.rows; row += 1) {\n    if (m1.data && m1.data[row][col] > max) {\n      max = m1.data[row][col];\n      maxIndex = row;\n    }\n  }\n\n  return maxIndex;\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const colwiseSum = (m1: Matrix): Matrix => {\n  const data = [];\n  const t = m1.transpose();\n  for (let row = 0; row < t.rows; row += 1) {\n    data[row] = [0];\n    for (let col = 0; col < t.cols; col += 1) {\n      data[row][0] += t.data[row][col];\n    }\n  }\n  return new Matrix(m1.cols, 1, data);\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const divide = (m1: Matrix, num: Matrix | number): Matrix => {\n  if (typeof num === \"number\") {\n    const data = [];\n    for (let row = 0; row < m1.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < m1.cols; col += 1) {\n        data[row][col] = m1.data[row][col] / num;\n      }\n    }\n    return Matrix.from(data);\n  } else {\n    if (num.rows !== m1.rows || num.cols !== m1.cols) {\n      throw new Error(`Dimensions error (${m1.rows}, ${m1.cols}) !== (${num.rows}, ${num.cols})`);\n    }\n    const data = [];\n    for (let row = 0; row < m1.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < m1.cols; col += 1) {\n        data[row][col] = m1.data[row][col] / num.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const dot = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.cols !== m2.rows) {\n    throw new Error(`DIMENSIONS error. m1.cols ${m1.rows} ${m1.cols} !== m2.rows ${m2.rows} ${m2.cols}.`);\n  }\n  const data = [];\n  for (let row = 0; row < m1.rows; ++row) {\n    data[row] = new Array(m2.cols);\n    for (let col = 0; col < m2.cols; ++col) {\n      data[row][col] = 0;\n      for (let i = 0; i < m1.cols; ++i) {\n        if (m1.data && m2.data) {\n          data[row][col] += m1.data[row][i] * m2.data[i][col];\n        }\n      }\n    }\n  }\n  return new Matrix(m1.rows, m2.cols, data);\n};\n","import { Matrix } from \"../../Math/Matrix\";\n\nexport const exp = (m1: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = Math.exp(m1.data[row][col] + 1e-8);\n    }\n  }\n  return Matrix.from(data);\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const fraction = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = num / m1.data[row][col];\n    }\n  }\n  return Matrix.from(data);\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const log = (m1: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = Math.log(m1.data[row][col] + 1e-8);\n    }\n  }\n  return Matrix.from(data);\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const max = (m1: Matrix): number => {\n  let max = -Infinity;\n  for (let row = 0; row < m1.rows; row += 1) {\n    for (let col = 0; col < m1.cols; col += 1) {\n      max = Math.max(m1.data[row][col], max);\n    }\n  }\n  return max;\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const mean = (m1: Matrix): number => {\n  let sum = 0;\n  const numberOfElements = m1.rows * m1.cols;\n\n  for (let row = 0; row < m1.rows; row += 1) {\n    for (let col = 0; col < m1.cols; col += 1) {\n      sum += m1.data[row][col];\n    }\n  }\n\n  return sum / numberOfElements;\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const minusOne = (m1: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = 1 - m1.data[row][col];\n    }\n  }\n  return Matrix.from(data);\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const multiply = (m1: Matrix, num: Matrix | number): Matrix => {\n  if (typeof num === \"number\") {\n    const data = [];\n    for (let row = 0; row < m1.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < m1.cols; col += 1) {\n        data[row][col] = m1.data[row][col] * num;\n      }\n    }\n    return Matrix.from(data);\n  } else {\n    if (num.rows !== m1.rows || m1.cols !== num.cols) {\n      throw new Error(`Dimension error: ${m1.shape()} !== ${num.shape()}`);\n    }\n    const data = [];\n    for (let row = 0; row < m1.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < m1.cols; col += 1) {\n        data[row][col] = m1.data[row][col] * num.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n};\n","import { Matrix } from \"../../Math/Matrix\";\n\nexport const pow = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = Math.pow(m1.data[row][col], num);\n    }\n  }\n  return Matrix.from(data);\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const reluBackpropagation = (delta: Matrix, A: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < A.rows; row += 1) {\n    data[row] = new Array(A.cols);\n    for (let col = 0; col < A.cols; col += 1) {\n      data[row][col] = A.data[row][col] > 0 ? 1 : 0;\n    }\n  }\n  return new Matrix(A.rows, A.cols, data);\n};\n","import { Matrix } from \"../../Math/Matrix\";\n\nexport const replicate = (m1: Matrix, rows: number, cols: number): Matrix => {\n  if (rows === 1 && m1.cols === 1 && cols > 1) {\n    const newData = [];\n    for (let row = 0; row < m1.rows; row += 1) {\n      newData[row] = [];\n      for (let col = 0; col < cols; col += 1) {\n        newData[row][col] = m1.data[row][0];\n      }\n    }\n    return Matrix.from(newData);\n  } else if (cols === 1 && m1.rows === 1 && rows > 1) {\n    const newData = [];\n    for (let row = 0; row < rows; row += 1) {\n      newData[row] = [];\n      for (let col = 0; col < m1.cols; col += 1) {\n        newData[row][col] = m1.data[0][col];\n      }\n    }\n    return Matrix.from(newData);\n  }\n  return m1;\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const rollToColMatrix = (m1: Matrix): Matrix => {\n  const data = [];\n  let _row = 0;\n  for (let row = 0; row < m1.rows; row += 1) {\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[_row] = [];\n      data[_row++][0] = m1.data[row][col];\n    }\n  }\n  return Matrix.from(data);\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const row = (m1: Matrix, row: number): Matrix => {\n  const data = [];\n  for (let col = 0; col < m1.cols; col += 1) {\n    data[col] = [m1.data[row][col]];\n  }\n  return new Matrix(m1.cols, 1, data);\n}","import { Matrix } from \"../../Math/Matrix\";\n\nexport const rowMaxCoeffIndex = (m1: Matrix, row: number): number => {\n  let maxIndex = -1;\n  let max = -Infinity;\n\n  for (let col = 0; col < m1.cols; col += 1) {\n    if (m1.data[row][col] > max) {\n      max = m1.data[row][col];\n      maxIndex = col;\n    }\n  }\n\n  return maxIndex;\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const rowwiseSum = (m1: Matrix): Matrix => {\n  const data = [[]];\n  for (let row = 0; row < m1.rows; row += 1) {\n    let sum = 0.0;\n    for (let col = 0; col < m1.cols; col += 1) {\n      sum += m1.data[row][col];\n    }\n    data[0].push(sum);\n  }\n  return new Matrix(1, m1.rows, data);\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const setMax = (m1: Matrix, max: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = Math.min(m1.data[row][col], max);\n    }\n  }\n  return Matrix.from(data);\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const setMin = (m1: Matrix, min: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = Math.max(m1.data[row][col], min);\n    }\n  }\n  return Matrix.from(data);\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const setOnes = (m1: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = 1;\n    }\n  }\n  return Matrix.from(data);\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const setRandom = (m1: Matrix, parameter: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = (Math.random() * 4 - 2) * Math.sqrt(2 / parameter); // todo: gaussian distribution;\n    }\n  }\n  return Matrix.from(data);\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const setZeros = (m1: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = 0;\n    }\n  }\n  return Matrix.from(data);\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const sqrt = (m1: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = Math.sqrt(m1.data[row][col] + 1e-8);\n    }\n  }\n  return Matrix.from(data);\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const subtract = (m1: Matrix, m: Matrix | number): Matrix => {\n  if (typeof m === \"number\") {\n    const data = [];\n    for (let row = 0; row < m1.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < m1.cols; col += 1) {\n        data[row][col] = m1.data[row][col] - m;\n      }\n    }\n    return Matrix.from(data);\n  } else {\n    if (m1.rows !== m.rows || m1.cols !== m.cols) {\n      throw new Error(`Dimensions error: ${m1.rows}, ${m1.cols} !== ${m.rows}, ${m.cols}`);\n    }\n    const data = [];\n    for (let row = 0; row < m1.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < m1.cols; col += 1) {\n        data[row][col] = m1.data[row][col] - m.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n};\n","import { Matrix } from \"../../Math/Matrix\";\n\nexport const subtractNumberFrom = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = num - m1.data[row][col];\n    }\n  }\n  return Matrix.from(data);\n};\n","import { Matrix } from \"../../Math/Matrix\";\n\nexport const sum = (m1: Matrix): number => {\n  let sum = 0.0;\n  for (let row = 0; row < m1.rows; row += 1) {\n    for (let col = 0; col < m1.cols; col += 1) {\n      sum += m1.data[row][col];\n    }\n  }\n  return sum;\n};","import {Matrix} from \"../../Math/Matrix\";\n\nexport const transpose = (m1: Matrix): Matrix => {\n    const data = [];\n    for (let col = 0; col < m1.cols; ++col) {\n        data[col] = new Array(m1.rows);\n        for (let row = 0; row < m1.rows; ++row) {\n            data[col][row] = m1.data[row][col];\n        }\n    }\n    return new Matrix(m1.cols, m1.rows, data);\n};\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { dot } from \"./CPU/dot\";\nimport { transpose } from \"./CPU/transpose\";\nimport { reluBackpropagation } from \"./CPU/reluBackpropagation\";\nimport { add } from './CPU/add'\nimport { subtract } from \"./CPU/subtract\";\nimport { multiply } from \"./CPU/multiply\";\nimport { divide } from \"./CPU/divide\";\nimport { minusOne } from \"./CPU/minusOne\";\nimport { log } from \"./CPU/log\";\nimport { pow } from \"./CPU/pow\";\nimport { exp } from \"./CPU/exp\";\nimport { sqrt } from \"./CPU/sqrt\";\nimport { subtractNumberFrom } from \"./CPU/subtractNumberFrom\";\nimport { setMin } from \"./CPU/setMin\";\nimport { setMax } from \"./CPU/setMax\";\nimport { setOnes } from \"./CPU/setOnes\";\nimport { setZeros } from \"./CPU/setZeros\";\nimport { setRandom } from \"./CPU/setRandom\";\nimport { fraction } from \"./CPU/fraction\";\nimport { max } from \"./CPU/max\";\nimport { abs } from \"./CPU/abs\";\nimport { mean } from \"./CPU/mean\";\nimport { sum } from \"./CPU/sum\";\nimport { rowwiseSum } from \"./CPU/rowwiseSum\";\nimport { colwiseSum } from \"./CPU/colwiseSum\";\nimport { replicate } from \"./CPU/replicate\";\nimport { colMaxCoeffIndex } from \"./CPU/colMaxCoeffIndex\";\nimport { rowMaxCoeffIndex } from \"./CPU/rowMaxCoeffIndex\";\nimport { row } from \"./CPU/row\";\nimport { col } from \"./CPU/col\";\nimport { rollToColMatrix } from \"./CPU/rollToColMatrix\";\n\nexport class ComputationCPU extends AbstractComputation {\n  constructor() {\n    super();\n\n    this.addKernel(\"dot\", dot);\n    this.addKernel(\"transpose\", transpose);\n    this.addKernel(\"reluBackpropagation\", reluBackpropagation);\n    this.addKernel(\"add\", add);\n    this.addKernel(\"subtract\", subtract);\n    this.addKernel(\"multiply\", multiply);\n    this.addKernel(\"divide\", divide);\n    this.addKernel(\"minusOne\", minusOne);\n    this.addKernel(\"subtractNumberFrom\", subtractNumberFrom);\n    this.addKernel(\"log\", log);\n    this.addKernel(\"exp\", exp);\n    this.addKernel(\"pow\", pow);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"setMin\", setMin);\n    this.addKernel(\"setMax\", setMax);\n    this.addKernel(\"setOnes\", setOnes);\n    this.addKernel(\"setZeros\", setZeros);\n    this.addKernel(\"setRandom\", setRandom);\n    this.addKernel(\"fraction\", fraction);\n    this.addKernel(\"max\", max);\n    this.addKernel(\"abs\", abs);\n    this.addKernel(\"mean\", mean);\n    this.addKernel(\"sum\", sum);\n    this.addKernel(\"rowwiseSum\", rowwiseSum);\n    this.addKernel(\"colwiseSum\", colwiseSum);\n    this.addKernel(\"replicate\", replicate);\n    this.addKernel(\"colMaxCoeffIndex\", colMaxCoeffIndex);\n    this.addKernel(\"rowMaxCoeffIndex\", rowMaxCoeffIndex);\n    this.addKernel(\"row\", row);\n    this.addKernel(\"col\", col);\n    this.addKernel(\"rollToColMatrix\", rollToColMatrix);\n    /*\n    this.addKernel(\"subtractFromNumber\", subtractFromNumber);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"fillZeros\", fillZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"divideNumber\", divideNumber);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"logisticBackpropagation\", logisticBackpropagation);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"transpose\", transpose);\n    this.addKernel(\"pow\", pow);\n    this.addKernel(\"log\", log);\n    this.addKernel(\"logMinusOne\", logMinusOne);\n    this.addKernel(\"addNumber\", addNumber);*/\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { Matrix } from \"../Math/Matrix\";\nimport { dot } from \"./MultiCore/dot\";\n\nexport class ComputationMultiCore extends AbstractComputation {\n  constructor() {\n    super();\n\n    this.addKernel(\"dot\", dot);\n\n    /*this.addKernel(\"multiply\", dot);\n    this.addKernel(\"add\", add);\n    this.addKernel(\"subtract\", subtract);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"fillZeros\", fillZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"multiplyNumber\", multiplyNumber);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"divideNumber\", divideNumber);\n    this.addKernel(\"softmaxActivation\", softmaxActivation);\n    this.addKernel(\"softmaxLoss\", softmaxLoss);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"purelinLoss\", purelinLoss);\n    this.addKernel(\"transpose\", transpose);*/\n  }\n}\n","//import { MatrixMultiply } from \"../../../../build/Debug/computation.node\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport const dot = (m1: Matrix, m2: Matrix) => {\n  //console.log(MatrixMultiply([1, 2, 3, 4], [4, 3, 2, 1]));\n};\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { ComputationMultiCore } from \"./ComputationMultiCore\";\nimport { ComputationCPU } from \"./ComputationCPU\";\nimport { setComputation, getComputation } from \"./utils\";\n\nexport { AbstractComputation, ComputationMultiCore, ComputationCPU, setComputation, getComputation };\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { ComputationMultiCore } from \"./ComputationMultiCore\";\nimport { ComputationCPU } from \"./ComputationCPU\";\n\nlet currentComputation: AbstractComputation = new ComputationCPU();\n\nexport const setComputation = (type: AbstractComputation): void => {\n  currentComputation = type;\n};\n\nexport const getComputation = (): AbstractComputation => {\n  return currentComputation;\n};\n","import { getComputation } from \"../Computation\";\nimport { minusOne } from \"../Computation/CPU/minusOne\";\n\nexport class Matrix {\n  public rows = 0;\n  public cols = 0;\n  public data: number[][] | null = null;\n\n  constructor(rows = 0, cols = 0, data: number[][] | string[][] | null = null) {\n    this.resize(rows, cols);\n    if (data) {\n      this.generateData(data);\n    }\n  }\n\n  resize(rows: number, cols: number): Matrix {\n    this.rows = rows;\n    this.cols = cols;\n    this.data = new Array(this.rows);\n    for (let row = 0; row < this.rows; row += 1) {\n      this.data[row] = new Array(this.cols);\n    }\n\n    return this;\n  }\n\n  generateData(arr: number[][] | string[][] | null): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = new Array(this.cols);\n    }\n    for (let col = 0; col < this.cols; col += 1) {\n      for (let row = 0; row < this.rows; row += 1) {\n        if (typeof arr[row] === \"number\") {\n          data[row][col] = arr[row];\n        } else {\n          if (typeof arr[row][col] === \"string\") {\n            if (/^[0-9.]+$/.test(String(arr[row][col]))) {\n              data[row][col] = Number(arr[row][col]);\n            } else {\n              data[row][col] = arr[row][col];\n            }\n          } else {\n            data[row][col] = arr[row][col];\n          }\n        }\n      }\n    }\n    this.data = data;\n    return this;\n  }\n\n  sum(): number {\n    return getComputation().execute(\"sum\", this) as number;\n  }\n\n  colwiseSum(): Matrix {\n    return getComputation().execute(\"colwiseSum\", this) as Matrix;\n  }\n\n  rowwiseSum(): Matrix {\n    return getComputation().execute(\"rowwiseSum\", this) as Matrix;\n  }\n\n  flatten(): number[] {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        data.push(this.data[row][col]);\n      }\n    }\n    return data;\n  }\n\n  replicate(rows: number, cols: number): Matrix {\n    return getComputation().execute(\"replicate\", this, rows, cols) as Matrix;\n  }\n\n  transpose(): Matrix {\n    return getComputation().execute(\"transpose\", this) as Matrix;\n  }\n\n  colMaxCoeffIndex(col: number): number {\n    return getComputation().execute(\"colMaxCoeffIndex\", this, col) as number;\n  }\n\n  rowMaxCoeffIndex(row: number): number {\n    return getComputation().execute(\"rowMaxCoeffIndex\", this, row) as number;\n  }/*\n\n  block(startRow: number, startCol: number, blockRows: number, blockCols: number): Matrix {\n    const data = [];\n\n    for (let row = startRow, newRow = 0; row < this.rows && row < startRow + blockRows; row += 1, newRow += 1) {\n      data[newRow] = new Array(blockCols);\n      for (let col = startCol, newCol = 0; col < this.cols && col < startCol + blockCols; col += 1, newCol += 1) {\n        data[newRow][newCol] = this.data[row][col];\n      }\n    }\n\n    return new Matrix(blockRows, blockCols, data);\n  }*/\n\n  col(col: number): Matrix {\n    return getComputation().execute(\"col\", this, col) as Matrix;\n  }\n\n  row(row: number): Matrix {\n    return getComputation().execute(\"row\", this, row) as Matrix;\n  }\n  sigmoid() {\n    return this.multiply(-1).exp().add(1).fraction(1);\n  }\n\n  rollToColMatrix(): Matrix {\n    return getComputation().execute(\"rollToColMatrix\", this) as Matrix;\n  }\n\n  abs(): Matrix {\n    return getComputation().execute(\"abs\", this) as Matrix;\n  }\n\n  mean() {\n    return getComputation().execute(\"mean\", this) as number;\n  }\n\n  max(): number {\n    return getComputation().execute(\"max\", this) as number;\n  }\n\n  setMax(max: number): Matrix {\n    return getComputation().execute(\"setMax\", this, max) as Matrix;\n  }\n\n  setMin(min: number): Matrix {\n    return getComputation().execute(\"setMin\", this, min) as Matrix;\n  }\n\n  setZeros(): Matrix {\n    return getComputation().execute(\"setZeros\", this) as Matrix;\n  }\n\n  setOnes(): Matrix {\n    return getComputation().execute(\"setOnes\", this) as Matrix;\n  }\n\n  setRandom(parameter = 1): Matrix {\n    // todo: gaussian distribution\n    return getComputation().execute(\"setRandom\", this, parameter) as Matrix;\n  }\n\n  fraction(num = 1): Matrix {\n    return getComputation().execute(\"fraction\", this, num) as Matrix;\n  }\n\n  sqrt(): Matrix {\n    return getComputation().execute(\"sqrt\", this) as Matrix;\n  }\n\n  dot(m: Matrix): Matrix {\n    return getComputation().execute(\"dot\", this, m) as Matrix;\n  }\n\n  multiply(num: number | Matrix): Matrix {\n    return getComputation().execute(\"multiply\", this, num) as Matrix;\n  }\n\n  subtract(m: Matrix | number): Matrix {\n    return getComputation().execute(\"subtract\", this, m) as Matrix;\n  }\n\n  forEach(cb: (num: number) => number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = cb(this.data[row][col]);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  shape(): number[] {\n    return [this.rows, this.cols];\n  }\n\n  divide(num: number | Matrix): Matrix {\n    return getComputation().execute(\"divide\", this, num) as Matrix;\n  }\n\n  minusOne(): Matrix {\n    return getComputation().execute(\"subtractNumberFrom\", this, -1) as Matrix;\n  }\n\n  subtractNumberFrom(num: number): Matrix {\n    return getComputation().execute(\"subtractNumberFrom\", this, num) as Matrix;\n  }\n\n  add(m: Matrix | number): Matrix {\n    return getComputation().execute(\"add\", this, m) as Matrix;\n  }\n\n  log(): Matrix {\n    return getComputation().execute(\"log\", this) as Matrix;\n  }\n\n  tanh(): Matrix {\n    return this.exp()\n      .subtract(this.multiply(-1).exp())\n      .divide(this.exp().add(this.multiply(-1).exp()));\n  }\n\n  softmax(): Matrix {\n    const max = this.max() - 1e-8;\n    return this.subtract(max).exp().divide(this.rowwiseSum().replicate(this.cols, 1).transpose());\n  }\n\n  exp(): Matrix {\n    return getComputation().execute(\"exp\", this) as Matrix;\n  }\n\n  pow(num: number): Matrix {\n    return getComputation().execute(\"pow\", this, num) as Matrix;\n  }\n\n  value(row, col, value = undefined) {\n    if (value === undefined) {\n      return this.data[row][col];\n    }\n    this.data[row][col] = value;\n    return this;\n  }\n\n  copy() {\n    return Matrix.from(this.data);\n  }\n\n  static from(arr: number[][]): Matrix {\n    return new Matrix(arr.length, arr[0]?.length || 0, arr);\n  }\n\n  concat(m: Matrix) {\n    for (let row = 0; row < m.rows; row += 1) {\n      this.data.push(m.data[row]);\n    }\n    return this;\n  }\n}\n","import { Matrix } from \"./Matrix\";\n\nexport const im2col = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  pad_h: number,\n  pad_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const cols = kernel_w * kernel_h * channels;\n  const rows = ((width - kernel_w + 2 * pad_w) / stride_w + 1) * ((height - kernel_h + 2 * pad_h) / stride_h + 1);\n  let currentResultRow = 0;\n  const result = new Matrix(rows, cols).setZeros();\n\n  for (let boundingY = -pad_h; boundingY + kernel_h <= height + pad_h; boundingY += stride_h) {\n    for (let boundingX = -pad_w; boundingX + kernel_w <= width + pad_w; boundingX += stride_w) {\n      let currentResultCol = 0;\n      for (let channel = 0; channel < channels; channel++) {\n        const inputOffset = height * width * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            if (boundingY + y >= 0 && boundingX + x >= 0 && boundingX + x < width && boundingY + y < height) {\n              result.data[currentResultRow][currentResultCol] =\n                input.data[(y + boundingY) * width + boundingX + x + inputOffset][0];\n            }\n            currentResultCol++;\n          }\n        }\n      }\n      currentResultRow++;\n    }\n  }\n  return result;\n};\n\nexport const maxpool = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const resultWidth = (width - kernel_w) / stride_w + 1;\n  const resultHeight = (height - kernel_h) / stride_h + 1;\n  const resultDepth = channels;\n\n  let currentResultCol = 0;\n  const result = new Matrix(resultWidth * resultHeight * resultDepth, 1).setZeros();\n\n  for (let boundingY = 0; boundingY + kernel_h <= height; boundingY += stride_h) {\n    for (let boundingX = 0; boundingX + kernel_w <= width; boundingX += stride_w) {\n      for (let channel = 0; channel < channels; channel++) {\n        let _max = -Infinity;\n        const inputOffset = height * width * channel;\n        const outputOffset = resultWidth * resultHeight * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            _max = Math.max(_max, input.data[inputOffset + (y + boundingY) * width + boundingX + x][0]);\n          }\n        }\n        result.data[outputOffset + currentResultCol][0] = _max;\n      }\n      currentResultCol++;\n    }\n  }\n  return result;\n};\n\nexport const round = (num: number, decimalPlaces: number): number => {\n  return Math.round((num + 2.23e-16) * Math.pow(10, decimalPlaces)) / Math.pow(10, decimalPlaces);\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { Matrix } from \"./Math/Matrix\";\nimport { maxpool, round, im2col } from \"./Math/math\";\nimport { ComputationMultiCore, ComputationCPU, setComputation, getComputation } from \"./Computation\";\n\nexport { Matrix, maxpool, round, im2col, ComputationMultiCore, ComputationCPU, setComputation, getComputation };\n"],"names":["AbstractComputation","_classCallCheck","_defineProperty","_createClass","key","value","addKernel","name","func","kernels","execute","Error","concat","_len","arguments","length","args","Array","_key","apply","Matrix","abs","m1","data","row","rows","col","cols","Math","from","add","m","colMaxCoeffIndex","maxIndex","max","Infinity","colwiseSum","t","transpose","divide","num","dot","m2","i","exp","fraction","log","mean","sum","numberOfElements","minusOne","multiply","shape","pow","reluBackpropagation","delta","A","replicate","newData","rollToColMatrix","_row","rowMaxCoeffIndex","rowwiseSum","push","setMax","min","setMin","setOnes","setRandom","parameter","random","sqrt","setZeros","subtract","subtractNumberFrom","ComputationCPU","_AbstractComputation","_this","_callSuper","_inherits","ComputationMultiCore","setComputation","getComputation","currentComputation","type","undefined","resize","generateData","arr","test","String","Number","flatten","sigmoid","forEach","cb","tanh","softmax","copy","_arr$","im2col","input","channels","height","width","kernel_h","kernel_w","pad_h","pad_w","stride_h","stride_w","currentResultRow","result","boundingY","boundingX","currentResultCol","channel","inputOffset","y","x","maxpool","resultWidth","resultHeight","resultDepth","_max","outputOffset","round","decimalPlaces"],"sourceRoot":""}