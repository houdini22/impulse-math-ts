{"version":3,"file":"impulse-math-ts.dev.js","mappings":"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","sources":["webpack://impulse-math-ts/./src/typescript/Computation/AbstractComputation.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/dot.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/reluBackpropagation.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/transpose.ts","webpack://impulse-math-ts/./src/typescript/Computation/ComputationCPU.ts","webpack://impulse-math-ts/./src/typescript/Computation/ComputationMultiCore.ts","webpack://impulse-math-ts/./src/typescript/Computation/MultiCore/dot.ts","webpack://impulse-math-ts/./src/typescript/Computation/index.ts","webpack://impulse-math-ts/./src/typescript/Computation/utils.ts","webpack://impulse-math-ts/./src/typescript/Math/Matrix.ts","webpack://impulse-math-ts/./src/typescript/Math/math.ts","webpack://impulse-math-ts/webpack/bootstrap","webpack://impulse-math-ts/webpack/runtime/define property getters","webpack://impulse-math-ts/webpack/runtime/hasOwnProperty shorthand","webpack://impulse-math-ts/webpack/runtime/make namespace object","webpack://impulse-math-ts/./src/typescript/main.ts"],"sourcesContent":["import { Matrix } from \"../Math/Matrix\";\n\ninterface KernelsInterface {\n  [id: string]: (m: Matrix, m2: Matrix | number | void) => Matrix | number;\n}\n\nexport class AbstractComputation {\n  protected kernels: KernelsInterface = {};\n\n  addKernel(name: string, func: (m: Matrix, m2: Matrix | number) => Matrix | number): AbstractComputation {\n    this.kernels[name] = func;\n    return this;\n  }\n\n  execute(name: string, ...args: [Matrix, Matrix] | [Matrix, number] | [Matrix]): Matrix | number {\n    if (!this.kernels[name]) {\n      throw new Error(`Kernel '${name}' not exists.`);\n    }\n    return this.kernels[name].apply(null, args);\n  }\n}\n","import { Matrix } from \"../../Math/Matrix\";\n\nexport const dot = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.cols !== m2.rows) {\n    throw new Error(`DIMENSIONS error. m1.cols ${m1.rows} ${m1.cols} !== m2.rows ${m2.rows} ${m2.cols}.`);\n  }\n  const data = [];\n  for (let row = 0; row < m1.rows; ++row) {\n    data[row] = new Array(m2.cols);\n    for (let col = 0; col < m2.cols; ++col) {\n      data[row][col] = 0;\n      for (let i = 0; i < m1.cols; ++i) {\n        if (m1.data && m2.data) {\n          data[row][col] += m1.data[row][i] * m2.data[i][col];\n        }\n      }\n    }\n  }\n  return new Matrix(m1.rows, m2.cols, data);\n};\n","import { Matrix } from \"../../Math/Matrix\";\n\nexport const reluBackpropagation = (delta: Matrix, A: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < A.rows; row += 1) {\n    data[row] = new Array(A.cols);\n    for (let col = 0; col < A.cols; col += 1) {\n      data[row][col] = A.data[row][col] > 0 ? 1 : 0;\n    }\n  }\n  return new Matrix(A.rows, A.cols, data);\n};\n","import {Matrix} from \"../../Math/Matrix\";\n\nexport const transpose = (m1: Matrix): Matrix => {\n    const data = [];\n    for (let col = 0; col < m1.cols; ++col) {\n        data[col] = new Array(m1.rows);\n        for (let row = 0; row < m1.rows; ++row) {\n            data[col][row] = m1.data[row][col];\n        }\n    }\n    return new Matrix(m1.cols, m1.rows, data);\n};\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { dot } from \"./CPU/dot\";\nimport { transpose } from \"./CPU/transpose\";\nimport { reluBackpropagation } from \"./CPU/reluBackpropagation\";\n\nexport class ComputationCPU extends AbstractComputation {\n  constructor() {\n    super();\n\n    this.addKernel(\"dot\", dot);\n    this.addKernel(\"transpose\", transpose);\n    this.addKernel(\"reluBackpropagation\", reluBackpropagation);\n    /*this.addKernel(\"add\", add);\n    this.addKernel(\"subtract\", subtract);\n    this.addKernel(\"subtractFromNumber\", subtractFromNumber);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"fillZeros\", fillZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"multiplyNumber\", multiplyNumber);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"divideNumber\", divideNumber);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"logisticBackpropagation\", logisticBackpropagation);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"transpose\", transpose);\n    this.addKernel(\"pow\", pow);\n    this.addKernel(\"log\", log);\n    this.addKernel(\"logMinusOne\", logMinusOne);\n    this.addKernel(\"addNumber\", addNumber);*/\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { Matrix } from \"../Math/Matrix\";\nimport { dot } from \"./MultiCore/dot\";\n\nexport class ComputationMultiCore extends AbstractComputation {\n  constructor() {\n    super();\n\n    this.addKernel(\"dot\", dot);\n\n    /*this.addKernel(\"multiply\", dot);\n    this.addKernel(\"add\", add);\n    this.addKernel(\"subtract\", subtract);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"fillZeros\", fillZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"multiplyNumber\", multiplyNumber);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"divideNumber\", divideNumber);\n    this.addKernel(\"softmaxActivation\", softmaxActivation);\n    this.addKernel(\"softmaxLoss\", softmaxLoss);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"purelinLoss\", purelinLoss);\n    this.addKernel(\"transpose\", transpose);*/\n  }\n}\n","//import { MatrixMultiply } from \"../../../../build/Debug/computation.node\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport const dot = (m1: Matrix, m2: Matrix) => {\n  //console.log(MatrixMultiply([1, 2, 3, 4], [4, 3, 2, 1]));\n};\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { ComputationMultiCore } from \"./ComputationMultiCore\";\nimport { ComputationCPU } from \"./ComputationCPU\";\nimport { setComputation, getComputation } from \"./utils\";\n\nexport { AbstractComputation, ComputationMultiCore, ComputationCPU, setComputation, getComputation };\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { ComputationMultiCore } from \"./ComputationMultiCore\";\nimport { ComputationCPU } from \"./ComputationCPU\";\n\nlet currentComputation: AbstractComputation = new ComputationCPU();\n\nexport const setComputation = (type: AbstractComputation): void => {\n  currentComputation = type;\n};\n\nexport const getComputation = (): AbstractComputation => {\n  return currentComputation;\n};\n","import { getComputation } from \"../Computation\";\n\nexport class Matrix {\n  public rows = 0;\n  public cols = 0;\n  public data: number[][] | null = null;\n\n  constructor(rows = 0, cols = 0, data: number[][] | string[][] | null = null) {\n    this.resize(rows, cols);\n    if (data) {\n      this.generateData(data);\n    }\n  }\n\n  resize(rows: number, cols: number): Matrix {\n    this.rows = rows;\n    this.cols = cols;\n    this.data = new Array(this.rows);\n    for (let row = 0; row < this.rows; row += 1) {\n      this.data[row] = new Array(this.cols);\n    }\n\n    return this;\n  }\n\n  generateData(arr: number[][] | string[][] | null): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = new Array(this.cols);\n    }\n    for (let col = 0; col < this.cols; col += 1) {\n      for (let row = 0; row < this.rows; row += 1) {\n        if (typeof arr[row] === \"number\") {\n          data[row][col] = arr[row];\n        } else {\n          if (typeof arr[row][col] === \"string\") {\n            if (/^[0-9.]+$/.test(String(arr[row][col]))) {\n              data[row][col] = Number(arr[row][col]);\n            } else {\n              data[row][col] = arr[row][col];\n            }\n          } else {\n            data[row][col] = arr[row][col];\n          }\n        }\n      }\n    }\n    this.data = data;\n    return this;\n  }\n\n  sum(): number {\n    let sum = 0.0;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n    }\n    return sum;\n  }\n\n  colwiseSum(): Matrix {\n    const data = [];\n    const t = this.transpose();\n    for (let row = 0; row < t.rows; row += 1) {\n      data[row] = [0];\n      for (let col = 0; col < t.cols; col += 1) {\n        data[row][0] += t.data[row][col];\n      }\n    }\n    return new Matrix(this.cols, 1, data);\n  }\n\n  rowwiseSum(): Matrix {\n    const data = [[]];\n    for (let row = 0; row < this.rows; row += 1) {\n      let sum = 0.0;\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n      data[0].push(sum);\n    }\n    return new Matrix(1, this.rows, data);\n  }\n\n  flatten(): number[] {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        data.push(this.data[row][col]);\n      }\n    }\n    return data;\n  }\n\n  replicate(rows: number, cols: number): Matrix {\n    if (rows === 1 && this.cols === 1 && cols > 1) {\n      const newData = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < cols; col += 1) {\n          newData[row][col] = this.data[row][0];\n        }\n      }\n      return Matrix.from(newData);\n    } else if (cols === 1 && this.rows === 1 && rows > 1) {\n      const newData = [];\n      for (let row = 0; row < rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          newData[row][col] = this.data[0][col];\n        }\n      }\n      return Matrix.from(newData);\n    }\n    return this;\n  }\n\n  transpose(): Matrix {\n    return getComputation().execute(\"transpose\", this) as Matrix;\n  }\n\n  colMaxCoeffIndex(col: number): number {\n    let maxIndex = -1;\n    let max = -Infinity;\n\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data && this.data[row][col] > max) {\n        max = this.data[row][col];\n        maxIndex = row;\n      }\n    }\n\n    return maxIndex;\n  }\n\n  rowMaxCoeffIndex(row: number): number {\n    let maxIndex = -1;\n    let max = -Infinity;\n\n    for (let col = 0; col < this.cols; col += 1) {\n      if (this.data[row][col] > max) {\n        max = this.data[row][col];\n        maxIndex = col;\n      }\n    }\n\n    return maxIndex;\n  }\n\n  block(startRow: number, startCol: number, blockRows: number, blockCols: number): Matrix {\n    const data = [];\n\n    for (let row = startRow, newRow = 0; row < this.rows && row < startRow + blockRows; row += 1, newRow += 1) {\n      data[newRow] = new Array(blockCols);\n      for (let col = startCol, newCol = 0; col < this.cols && col < startCol + blockCols; col += 1, newCol += 1) {\n        data[newRow][newCol] = this.data[row][col];\n      }\n    }\n\n    return new Matrix(blockRows, blockCols, data);\n  }\n\n  col(col: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [this.data[row][col]];\n    }\n    return new Matrix(this.rows, 1, data);\n  }\n\n  row(row: number): Matrix {\n    const data = [];\n    for (let col = 0; col < this.cols; col += 1) {\n      data[col] = [this.data[row][col]];\n    }\n    return new Matrix(this.cols, 1, data);\n  }\n\n  setCol(col: number, tmp: Matrix): Matrix {\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data && tmp.data) {\n        this.data[row][col] = tmp.data[row][0];\n      }\n    }\n    return this;\n  }\n\n  sigmoid() {\n    return this.multiply(-1).exp().add(1).fraction(1);\n  }\n\n  rollToColMatrix(): Matrix {\n    const data = [];\n    let _row = 0;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        data[_row] = [];\n        data[_row++][0] = this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  abs(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.abs(this.data[row][col]);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  mean() {\n    let sum = 0;\n    const numberOfElements = this.rows * this.cols;\n\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n    }\n\n    return sum / numberOfElements;\n  }\n\n  max(): number {\n    let max = -Infinity;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        max = Math.max(this.data[row][col], max);\n      }\n    }\n    return max;\n  }\n\n  setMax(max: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.min(this.data[row][col], max);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setMin(min: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.max(this.data[row][col], min);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setZeros(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = 0;\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setOnes(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = 1;\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setRandom(parameter: number = 1): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = (Math.random() * 4 - 2) * Math.sqrt(2 / parameter); // todo: gaussian distribution;\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  fraction(num: number = 1): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = num / this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  sqrt(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.sqrt(this.data[row][col] + 1e-8);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  dot(m: Matrix): Matrix {\n    return getComputation().execute(\"dot\", this, m) as Matrix;\n  }\n\n  multiply(num: number | Matrix): Matrix {\n    if (typeof num === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          // @ts-ignore\n          data[row][col] = this.data[row][col] * num;\n        }\n      }\n      return Matrix.from(data);\n    } else {\n      if (num.rows !== this.rows || this.cols !== num.cols) {\n        throw new Error(`Dimension error: ${this.shape()} !== ${num.shape()}`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          // @ts-ignore\n          data[row][col] = this.data[row][col] * num.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n  }\n\n  subtract(m: Matrix | number): Matrix {\n    if (typeof m === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] - m;\n        }\n      }\n      return Matrix.from(data);\n    } else {\n      if (this.rows !== m.rows || this.cols !== m.cols) {\n        throw new Error(`Dimensions error: ${this.rows}, ${this.cols} !== ${m.rows}, ${m.cols}`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] - m.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n  }\n\n  forEach(cb: (num: number) => number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = cb(this.data[row][col]);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  shape(): number[] {\n    return [this.rows, this.cols];\n  }\n\n  divide(num: number | Matrix): Matrix {\n    if (typeof num === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] / num;\n        }\n      }\n      return Matrix.from(data);\n    } else {\n      if (num.rows !== this.rows || num.cols !== this.cols) {\n        throw new Error(`Dimensions error (${this.rows}, ${this.cols}) !== (${num.rows}, ${num.cols})`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] / num.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n  }\n\n  minusOne(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = 1 - this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  subtractFromNumber(num: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = num - this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  add(m: Matrix | number): Matrix {\n    if (typeof m === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] + m;\n        }\n      }\n      return Matrix.from(data);\n    } else if (m instanceof Matrix) {\n      if (m.rows !== this.rows || m.cols !== this.cols) {\n        throw new Error(`Dimention error: rows (x: ${this.rows}, y: ${this.cols}) !== (x: ${m.rows}, y: ${m.cols})`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] + m.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n    return this;\n  }\n\n  log(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.log(this.data[row][col] + 1e-8);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  tanh(): Matrix {\n    return this.exp()\n      .subtract(this.multiply(-1).exp())\n      .divide(this.exp().add(this.multiply(-1).exp()));\n  }\n\n  softmax(): Matrix {\n    const max = this.max() - 1e-8;\n    return this.subtract(max).exp().divide(this.rowwiseSum().replicate(this.cols, 1).transpose());\n  }\n\n  exp(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.exp(this.data[row][col] + 1e-8);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  pow(num): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.pow(this.data[row][col], num);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  value(row, col, value = undefined) {\n    if (value === undefined) {\n      return this.data[row][col];\n    }\n    this.data[row][col] = value;\n    return this;\n  }\n\n  copy() {\n    return Matrix.from(this.data);\n  }\n\n  static from(arr: number[][]): Matrix {\n    return new Matrix(arr.length, arr[0]?.length || 0, arr);\n  }\n\n  concat(m: Matrix) {\n    for (let row = 0; row < m.rows; row += 1) {\n      this.data.push(m.data[row]);\n    }\n    return this;\n  }\n}\n","import { Matrix } from \"./Matrix\";\n\nexport const im2col = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  pad_h: number,\n  pad_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const cols = kernel_w * kernel_h * channels;\n  const rows = ((width - kernel_w + 2 * pad_w) / stride_w + 1) * ((height - kernel_h + 2 * pad_h) / stride_h + 1);\n  let currentResultRow = 0;\n  const result = new Matrix(rows, cols).setZeros();\n\n  for (let boundingY = -pad_h; boundingY + kernel_h <= height + pad_h; boundingY += stride_h) {\n    for (let boundingX = -pad_w; boundingX + kernel_w <= width + pad_w; boundingX += stride_w) {\n      let currentResultCol = 0;\n      for (let channel = 0; channel < channels; channel++) {\n        const inputOffset = height * width * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            if (boundingY + y >= 0 && boundingX + x >= 0 && boundingX + x < width && boundingY + y < height) {\n              result.data[currentResultRow][currentResultCol] =\n                input.data[(y + boundingY) * width + boundingX + x + inputOffset][0];\n            }\n            currentResultCol++;\n          }\n        }\n      }\n      currentResultRow++;\n    }\n  }\n  return result;\n};\n\nexport const maxpool = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const resultWidth = (width - kernel_w) / stride_w + 1;\n  const resultHeight = (height - kernel_h) / stride_h + 1;\n  const resultDepth = channels;\n\n  let currentResultCol = 0;\n  const result = new Matrix(resultWidth * resultHeight * resultDepth, 1).setZeros();\n\n  for (let boundingY = 0; boundingY + kernel_h <= height; boundingY += stride_h) {\n    for (let boundingX = 0; boundingX + kernel_w <= width; boundingX += stride_w) {\n      for (let channel = 0; channel < channels; channel++) {\n        let _max = -Infinity;\n        const inputOffset = height * width * channel;\n        const outputOffset = resultWidth * resultHeight * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            _max = Math.max(_max, input.data[inputOffset + (y + boundingY) * width + boundingX + x][0]);\n          }\n        }\n        result.data[outputOffset + currentResultCol][0] = _max;\n      }\n      currentResultCol++;\n    }\n  }\n  return result;\n};\n\nexport const round = (num: number, decimalPlaces: number): number => {\n  return Math.round((num + 2.23e-16) * Math.pow(10, decimalPlaces)) / Math.pow(10, decimalPlaces);\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { Matrix } from \"./Math/Matrix\";\nimport { maxpool, round, im2col } from \"./Math/math\";\nimport { ComputationMultiCore, ComputationCPU, setComputation, getComputation } from \"./Computation\";\n\nexport { Matrix, maxpool, round, im2col, ComputationMultiCore, ComputationCPU, setComputation, getComputation };\n"],"names":["AbstractComputation","_classCallCheck","_defineProperty","_createClass","key","value","addKernel","name","func","kernels","execute","Error","concat","_len","arguments","length","args","Array","_key","apply","Matrix","dot","m1","m2","cols","rows","data","row","col","i","reluBackpropagation","delta","A","transpose","ComputationCPU","_AbstractComputation","_this","_callSuper","_inherits","ComputationMultiCore","setComputation","getComputation","currentComputation","type","undefined","resize","generateData","arr","test","String","Number","sum","colwiseSum","t","rowwiseSum","push","flatten","replicate","newData","from","colMaxCoeffIndex","maxIndex","max","Infinity","rowMaxCoeffIndex","block","startRow","startCol","blockRows","blockCols","newRow","newCol","setCol","tmp","sigmoid","multiply","exp","add","fraction","rollToColMatrix","_row","abs","Math","mean","numberOfElements","setMax","min","setMin","setZeros","setOnes","setRandom","parameter","random","sqrt","num","m","shape","subtract","forEach","cb","divide","minusOne","subtractFromNumber","log","tanh","softmax","pow","copy","_arr$","im2col","input","channels","height","width","kernel_h","kernel_w","pad_h","pad_w","stride_h","stride_w","currentResultRow","result","boundingY","boundingX","currentResultCol","channel","inputOffset","y","x","maxpool","resultWidth","resultHeight","resultDepth","_max","outputOffset","round","decimalPlaces"],"sourceRoot":""}