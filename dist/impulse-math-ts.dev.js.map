{"version":3,"file":"impulse-math-ts.dev.js","mappings":"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","sources":["webpack://impulse-math-ts/./src/typescript/Computation/AbstractComputation.ts","webpack://impulse-math-ts/./src/typescript/Computation/ComputationCPU.ts","webpack://impulse-math-ts/./src/typescript/Computation/ComputationGPU.ts","webpack://impulse-math-ts/./src/typescript/Computation/index.ts","webpack://impulse-math-ts/./src/typescript/Computation/utils.ts","webpack://impulse-math-ts/./src/typescript/Math/Matrix.ts","webpack://impulse-math-ts/./src/typescript/Math/math.ts","webpack://impulse-math-ts/webpack/bootstrap","webpack://impulse-math-ts/webpack/runtime/define property getters","webpack://impulse-math-ts/webpack/runtime/hasOwnProperty shorthand","webpack://impulse-math-ts/webpack/runtime/make namespace object","webpack://impulse-math-ts/./src/typescript/main.ts"],"sourcesContent":["import { Matrix } from \"../Math/Matrix\";\n\ninterface KernelsInterface {\n  [id: string]: (m: Matrix, m2: Matrix | number | void) => Matrix | number;\n}\n\nexport class AbstractComputation {\n  protected kernels: KernelsInterface = {};\n\n  addKernel(name: string, func: (m: Matrix, m2: Matrix | number) => Matrix | number): AbstractComputation {\n    this.kernels[name] = func;\n    return this;\n  }\n\n  execute(name: string, ...args: [Matrix, Matrix] | [Matrix, number] | [Matrix]): Matrix | number {\n    if (!this.kernels[name]) {\n      throw new Error(`Kernel '${name}' not exists.`);\n    }\n    return this.kernels[name].apply(null, args);\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { Matrix } from \"../Math/Matrix\";\n\nexport const elementWiseDivide = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(\"COLS number not equal.\");\n  }\n\n  const data = [];\n\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] / m2.data[row][col];\n    }\n  }\n\n  return new Matrix(m1.rows, m2.cols, data);\n};\n\nexport const divideNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] / num;\n    }\n  }\n\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const logisticActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = 1.0 / (1.0 + Math.exp(-m.data[row][col]));\n    }\n  }\n  return Matrix.from(data);\n};\n\nexport const logisticLoss = (output: Matrix, predictions: Matrix): number => {\n  const log = [];\n  const epsilon = 1e-8;\n\n  for (let row = 0; row < predictions.rows; row += 1) {\n    log[row] = [];\n    for (let col = 0; col < predictions.cols; col += 1) {\n      if (predictions.data) {\n        log[row][col] = Math.log(predictions.data[row][col] + epsilon);\n      }\n    }\n  }\n  const firstMatrix = elementWiseMultiply(new Matrix(predictions.rows, predictions.cols, log), output);\n\n  const sub = [];\n  for (let row = 0; row < output.rows; row += 1) {\n    sub[row] = [];\n    for (let col = 0; col < output.cols; col += 1) {\n      if (output.data) {\n        sub[row][col] = 1.0 - output.data[row][col];\n      }\n    }\n  }\n  const toMultiply2 = new Matrix(output.rows, output.cols, sub);\n\n  const data = [];\n  for (let row = 0; row < predictions.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < predictions.cols; col += 1) {\n      if (predictions.data) {\n        data[row][col] = Math.log(1.0 - predictions.data[row][col] + epsilon);\n      }\n    }\n  }\n  const toMultiply1 = new Matrix(predictions.rows, predictions.cols, data);\n\n  return add(\n    elementWiseMultiply(multiplyNumber(firstMatrix, -1), output),\n    elementWiseMultiply(multiplyNumber(toMultiply1, -1), subtractFromNumber(toMultiply2, 1))\n  ).sum();\n};\n\nexport const logisticBackpropagation = (sigma: Matrix, oldY: Matrix): Matrix => {\n  return logisticActivation(oldY).multiply(logisticActivation(oldY).minusOne());\n};\n\nexport const tanhActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      data[row][col] = (1 - Math.exp(-2 * m.data[row][col])) / (1 + Math.exp(-2 * m.data[row][col]));\n    }\n  }\n  return Matrix.from(data);\n};\n\nexport const reluActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.max(0.0, m.data[row][col]);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const reluBackpropagation = (sigma: Matrix, oldY: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < sigma.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < sigma.cols; col += 1) {\n      if (sigma.data) {\n        data[row][col] = oldY.data[row][col] > 0 ? 1 : 0;\n      }\n    }\n  }\n  return elementWiseMultiply(new Matrix(sigma.rows, sigma.cols, data), sigma);\n};\n\nexport const softplusActivation = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.log(1 + Math.exp(m.data[row][col]));\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const penalty = (m: Matrix): number => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.pow(m.data[row][col], 2);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data).sum();\n};\n\nexport const sqrt = (m: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m.cols; col += 1) {\n      if (m.data) {\n        data[row][col] = Math.sqrt(m.data[row][col] + 1e-8);\n      }\n    }\n  }\n  return new Matrix(m.rows, m.cols, data);\n};\n\nexport const purelinLoss = (output: Matrix, predictions: Matrix): number => {\n  const data = [];\n  for (let row = 0; row < output.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < output.cols; col += 1) {\n      if (output.data) {\n        data[row][col] = output.data[row][col] - Math.pow(predictions[row][col], 2);\n      }\n    }\n  }\n  return new Matrix(output.rows, output.cols, data).sum();\n};\n\nexport const dot = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.cols !== m2.rows) {\n    throw new Error(`DIMENSIONS error. m1.cols ${m1.rows} ${m1.cols} !== m2.rows ${m2.rows} ${m2.cols}.`);\n  }\n  const data = [];\n  for (let row = 0; row < m1.rows; ++row) {\n    data[row] = new Array(m2.cols);\n    for (let col = 0; col < m2.cols; ++col) {\n      data[row][col] = 0;\n      for (let i = 0; i < m1.cols; ++i) {\n        if (m1.data && m2.data) {\n          data[row][col] += m1.data[row][i] * m2.data[i][col];\n        }\n      }\n    }\n  }\n  return new Matrix(m1.rows, m2.cols, data);\n};\n\nexport const add = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(\"ROWS number not equal.\");\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(`COLS number not equal. m1.cols ${m1.cols} !== m2.cols ${m2.cols}`);\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] + m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const subtract = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(`ROWS number not equal: m1.rows ${m1.rows} !== m2.rows ${m2.rows}`);\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(`COLS number not equal: m1.cols ${m1.cols} !== m2.cols ${m2.cols}`);\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] - m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const fillRandom = (m1: Matrix, parameter: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = (Math.random() * 4 - 2) * Math.sqrt(2 / parameter); // todo: gaussian distribution\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const fillZeros = (m1: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = 0;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const setOnes = (m1: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = 1;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const elementWiseMultiply = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.rows !== m2.rows) {\n    throw new Error(`ROWS number not equal: m1.rows ${m1.rows} !== m2.rows ${m2.rows}`);\n  }\n  if (m1.cols !== m2.cols) {\n    throw new Error(`COLS number not equal: m1.cols ${m1.cols} !== m2.cols ${m2.cols}`);\n  }\n\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data && m2.data) {\n        data[row][col] = m1.data[row][col] * m2.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const multiplyNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = m1.data[row][col] * num;\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const subtractFromNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = num - m1.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const pow = (m1: Matrix, pow: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = Math.pow(m1.data[row][col], pow);\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const log = (m1: Matrix, pow: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = Math.log(m1.data[row][col] + 1e-8);\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const logMinusOne = (m1: Matrix, pow: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      if (m1.data) {\n        data[row][col] = Math.log(1 - m1.data[row][col]);\n      }\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const addNumber = (m1: Matrix, num: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = [];\n    for (let col = 0; col < m1.cols; col += 1) {\n      data[row][col] = m1.data[row][col] + num;\n    }\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};\n\nexport const transpose = (m: Matrix): Matrix => {\n  const data = [];\n  for (let col = 0; col < m.cols; col += 1) {\n    data[col] = [];\n    for (let row = 0; row < m.rows; row += 1) {\n      if (m.data) {\n        data[col][row] = m.data[row][col];\n      }\n    }\n  }\n  return new Matrix(m.cols, m.rows, data);\n};\n\nexport class ComputationCPU extends AbstractComputation {\n  constructor() {\n    super();\n\n    this.addKernel(\"multiply\", dot);\n    this.addKernel(\"add\", add);\n    this.addKernel(\"subtract\", subtract);\n    this.addKernel(\"subtractFromNumber\", subtractFromNumber);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"fillZeros\", fillZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"multiplyNumber\", multiplyNumber);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"divideNumber\", divideNumber);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"logisticBackpropagation\", logisticBackpropagation);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"reluBackpropagation\", reluBackpropagation);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"transpose\", transpose);\n    this.addKernel(\"pow\", pow);\n    this.addKernel(\"log\", log);\n    this.addKernel(\"logMinusOne\", logMinusOne);\n    this.addKernel(\"addNumber\", addNumber);\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { Matrix } from \"../Math/Matrix\";\n\nexport class ComputationGPU extends AbstractComputation {\n  constructor() {\n    super();\n\n    /*this.addKernel(\"multiply\", dot);\n    this.addKernel(\"add\", add);\n    this.addKernel(\"subtract\", subtract);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"fillZeros\", fillZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"multiplyNumber\", multiplyNumber);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"divideNumber\", divideNumber);\n    this.addKernel(\"softmaxActivation\", softmaxActivation);\n    this.addKernel(\"softmaxLoss\", softmaxLoss);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"purelinLoss\", purelinLoss);\n    this.addKernel(\"transpose\", transpose);*/\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { ComputationGPU } from \"./ComputationGPU\";\nimport { ComputationCPU } from \"./ComputationCPU\";\nimport { setComputation, getComputation } from \"./utils\";\n\nexport { AbstractComputation, ComputationGPU, ComputationCPU, setComputation, getComputation };\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { ComputationGPU } from \"./ComputationGPU\";\nimport { ComputationCPU } from \"./ComputationCPU\";\n\nlet currentComputation: AbstractComputation = new ComputationCPU();\n\nexport const setComputation = (type: AbstractComputation): void => {\n  currentComputation = type;\n};\n\nexport const getComputation = (): AbstractComputation => {\n  return currentComputation;\n};\n","import { getComputation } from \"../Computation\";\n\nexport class Matrix {\n  public rows = 0;\n  public cols = 0;\n  public data: number[][] | null = null;\n\n  constructor(rows = 0, cols = 0, data: number[][] | string[][] | null = null) {\n    this.resize(rows, cols);\n    if (data) {\n      this.generateData(data);\n    }\n  }\n\n  resize(rows: number, cols: number): Matrix {\n    this.rows = rows;\n    this.cols = cols;\n    this.data = new Array(this.rows);\n    for (let row = 0; row < this.rows; row += 1) {\n      this.data[row] = new Array(this.cols);\n    }\n\n    return this;\n  }\n\n  generateData(arr: number[][] | string[][] | null): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = new Array(this.cols);\n    }\n    for (let col = 0; col < this.cols; col += 1) {\n      for (let row = 0; row < this.rows; row += 1) {\n        if (typeof arr[row] === \"number\") {\n          data[row][col] = arr[row];\n        } else {\n          if (typeof arr[row][col] === \"string\") {\n            if (/^[0-9.]+$/.test(String(arr[row][col]))) {\n              data[row][col] = Number(arr[row][col]);\n            } else {\n              data[row][col] = arr[row][col];\n            }\n          } else {\n            data[row][col] = arr[row][col];\n          }\n        }\n      }\n    }\n    this.data = data;\n    return this;\n  }\n\n  sum(): number {\n    let sum = 0.0;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n    }\n    return sum;\n  }\n\n  colwiseSum(): Matrix {\n    const data = [];\n    const t = this.transpose();\n    for (let row = 0; row < t.rows; row += 1) {\n      data[row] = [0];\n      for (let col = 0; col < t.cols; col += 1) {\n        data[row][0] += t.data[row][col];\n      }\n    }\n    return new Matrix(this.cols, 1, data);\n  }\n\n  rowwiseSum(): Matrix {\n    const data = [[]];\n    for (let row = 0; row < this.rows; row += 1) {\n      let sum = 0.0;\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n      data[0].push(sum);\n    }\n    return new Matrix(1, this.rows, data);\n  }\n\n  flatten(): number[] {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        data.push(this.data[row][col]);\n      }\n    }\n    return data;\n  }\n\n  replicate(rows: number, cols: number): Matrix {\n    if (rows === 1 && this.cols === 1 && cols > 1) {\n      const newData = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < cols; col += 1) {\n          newData[row][col] = this.data[row][0];\n        }\n      }\n      return Matrix.from(newData);\n    } else if (cols === 1 && this.rows === 1 && rows > 1) {\n      const newData = [];\n      for (let row = 0; row < rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          newData[row][col] = this.data[0][col];\n        }\n      }\n      return Matrix.from(newData);\n    }\n    return this;\n  }\n\n  transpose(): Matrix {\n    return getComputation().execute(\"transpose\", this) as Matrix;\n  }\n\n  colMaxCoeffIndex(col: number): number {\n    let maxIndex = -1;\n    let max = -Infinity;\n\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data && this.data[row][col] > max) {\n        max = this.data[row][col];\n        maxIndex = row;\n      }\n    }\n\n    return maxIndex;\n  }\n\n  rowMaxCoeffIndex(row: number): number {\n    let maxIndex = -1;\n    let max = -Infinity;\n\n    for (let col = 0; col < this.cols; col += 1) {\n      if (this.data[row][col] > max) {\n        max = this.data[row][col];\n        maxIndex = col;\n      }\n    }\n\n    return maxIndex;\n  }\n\n  block(startRow: number, startCol: number, blockRows: number, blockCols: number): Matrix {\n    const data = [];\n\n    for (let row = startRow, newRow = 0; row < this.rows && row < startRow + blockRows; row += 1, newRow += 1) {\n      data[newRow] = new Array(blockCols);\n      for (let col = startCol, newCol = 0; col < this.cols && col < startCol + blockCols; col += 1, newCol += 1) {\n        data[newRow][newCol] = this.data[row][col];\n      }\n    }\n\n    return new Matrix(blockRows, blockCols, data);\n  }\n\n  col(col: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [this.data[row][col]];\n    }\n    return new Matrix(this.rows, 1, data);\n  }\n\n  row(row: number): Matrix {\n    const data = [];\n    for (let col = 0; col < this.cols; col += 1) {\n      data[col] = [this.data[row][col]];\n    }\n    return new Matrix(this.cols, 1, data);\n  }\n\n  setCol(col: number, tmp: Matrix): Matrix {\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data && tmp.data) {\n        this.data[row][col] = tmp.data[row][0];\n      }\n    }\n    return this;\n  }\n\n  sigmoid() {\n    return this.multiply(-1).exp().add(1).fraction(1);\n  }\n\n  rollToColMatrix(): Matrix {\n    const data = [];\n    let _row = 0;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        data[_row] = [];\n        data[_row++][0] = this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  abs(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.abs(this.data[row][col]);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  mean() {\n    let sum = 0;\n    const numberOfElements = this.rows * this.cols;\n\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n    }\n\n    return sum / numberOfElements;\n  }\n\n  max(): number {\n    let max = -Infinity;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        max = Math.max(this.data[row][col], max);\n      }\n    }\n    return max;\n  }\n\n  setMax(max: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.min(this.data[row][col], max);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setMin(min: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.max(this.data[row][col], min);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setZeros(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = 0;\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setOnes(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = 1;\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setRandom(parameter: number = 1): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = (Math.random() * 4 - 2) * Math.sqrt(2 / parameter); // todo: gaussian distribution;\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  fraction(num: number = 1): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = num / this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  sqrt(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.sqrt(this.data[row][col] + 1e-8);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  dot(m: Matrix): Matrix {\n    return getComputation().execute(\"multiply\", this, m) as Matrix;\n  }\n\n  multiply(num: number | Matrix): Matrix {\n    if (typeof num === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          // @ts-ignore\n          data[row][col] = this.data[row][col] * num;\n        }\n      }\n      return Matrix.from(data);\n    } else {\n      if (num.rows !== this.rows || this.cols !== num.cols) {\n        throw new Error(`Dimension error: ${this.shape()} !== ${num.shape()}`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          // @ts-ignore\n          data[row][col] = this.data[row][col] * num.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n  }\n\n  subtract(m: Matrix | number): Matrix {\n    if (m instanceof Matrix) {\n      if (this.rows !== m.rows || this.cols !== m.cols) {\n        throw new Error(`Dimensions error: ${this.rows}, ${this.cols} !== ${m.rows}, ${m.cols}`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] - m.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    } else {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] - m;\n        }\n      }\n      return Matrix.from(data);\n    }\n  }\n\n  forEach(cb: (num: number) => number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = cb(this.data[row][col]);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  shape(): number[] {\n    return [this.rows, this.cols];\n  }\n\n  divide(num: number | Matrix): Matrix {\n    if (typeof num === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] / num;\n        }\n      }\n      return Matrix.from(data);\n    } else {\n      if (num.rows !== this.rows || num.cols !== this.cols) {\n        throw new Error(`Dimensions error (${this.rows}, ${this.cols}) !== (${num.rows}, ${num.cols})`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] / num.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n  }\n\n  minusOne(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = 1 - this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  subtractFromNumber(num: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = num - this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  add(m: Matrix | number): Matrix {\n    if (typeof m === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] + m;\n        }\n      }\n      return Matrix.from(data);\n    } else if (m instanceof Matrix) {\n      if (m.rows !== this.rows || m.cols !== this.cols) {\n        throw new Error(`Dimention error: rows (x: ${this.rows}, y: ${this.cols}) !== (x: ${m.rows}, y: ${m.cols})`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] + m.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n    return this;\n  }\n\n  log(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.log(this.data[row][col] + 1e-8);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  tanh(): Matrix {\n    return this.exp()\n      .subtract(this.multiply(-1).exp())\n      .divide(this.exp().add(this.multiply(-1).exp()));\n  }\n\n  softmax(): Matrix {\n    const max = this.max() - 1e-8;\n    return this.subtract(max).exp().divide(this.rowwiseSum().replicate(this.cols, 1).transpose());\n  }\n\n  exp(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.exp(this.data[row][col] + 1e-8);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  pow(num): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.pow(this.data[row][col], num);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  value(row, col, value = undefined) {\n    if (value === undefined) {\n      return this.data[row][col];\n    }\n    this.data[row][col] = value;\n    return this;\n  }\n\n  copy() {\n    return Matrix.from(this.data);\n  }\n\n  static from(arr: number[][]): Matrix {\n    return new Matrix(arr.length, arr[0]?.length || 0, arr);\n  }\n}\n","import { Matrix } from \"./Matrix\";\n\nexport const im2col = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  pad_h: number,\n  pad_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const cols = kernel_w * kernel_h * channels;\n  const rows = ((width - kernel_w + 2 * pad_w) / stride_w + 1) * ((height - kernel_h + 2 * pad_h) / stride_h + 1);\n  let currentResultRow = 0;\n  const result = new Matrix(rows, cols).setZeros();\n\n  for (let boundingY = -pad_h; boundingY + kernel_h <= height + pad_h; boundingY += stride_h) {\n    for (let boundingX = -pad_w; boundingX + kernel_w <= width + pad_w; boundingX += stride_w) {\n      let currentResultCol = 0;\n      for (let channel = 0; channel < channels; channel++) {\n        const inputOffset = height * width * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            if (boundingY + y >= 0 && boundingX + x >= 0 && boundingX + x < width && boundingY + y < height) {\n              result.data[currentResultRow][currentResultCol] =\n                input.data[(y + boundingY) * width + boundingX + x + inputOffset][0];\n            }\n            currentResultCol++;\n          }\n        }\n      }\n      currentResultRow++;\n    }\n  }\n  return result;\n};\n\nexport const maxpool = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const resultWidth = (width - kernel_w) / stride_w + 1;\n  const resultHeight = (height - kernel_h) / stride_h + 1;\n  const resultDepth = channels;\n\n  let currentResultCol = 0;\n  const result = new Matrix(resultWidth * resultHeight * resultDepth, 1).setZeros();\n\n  for (let boundingY = 0; boundingY + kernel_h <= height; boundingY += stride_h) {\n    for (let boundingX = 0; boundingX + kernel_w <= width; boundingX += stride_w) {\n      for (let channel = 0; channel < channels; channel++) {\n        let _max = -Infinity;\n        const inputOffset = height * width * channel;\n        const outputOffset = resultWidth * resultHeight * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            _max = Math.max(_max, input.data[inputOffset + (y + boundingY) * width + boundingX + x][0]);\n          }\n        }\n        result.data[outputOffset + currentResultCol][0] = _max;\n      }\n      currentResultCol++;\n    }\n  }\n  return result;\n};\n\nexport const round = (num: number, decimalPlaces: number): number => {\n  return Math.round((num + 2.23e-16) * Math.pow(10, decimalPlaces)) / Math.pow(10, decimalPlaces);\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { Matrix } from \"./Math/Matrix\";\nimport { maxpool, round, im2col } from \"./Math/math\";\nimport { ComputationGPU, ComputationCPU, setComputation, getComputation } from \"./Computation\";\n\nexport { Matrix, maxpool, round, im2col, ComputationGPU, ComputationCPU, setComputation, getComputation };\n"],"names":["AbstractComputation","name","func","kernels","Error","args","apply","Matrix","elementWiseDivide","m1","m2","rows","cols","data","row","col","divideNumber","num","logisticActivation","m","Math","exp","from","logisticLoss","output","predictions","log","epsilon","firstMatrix","elementWiseMultiply","sub","toMultiply2","toMultiply1","add","multiplyNumber","subtractFromNumber","sum","logisticBackpropagation","sigma","oldY","multiply","minusOne","tanhActivation","reluActivation","max","reluBackpropagation","softplusActivation","penalty","pow","sqrt","purelinLoss","dot","Array","i","subtract","fillRandom","parameter","random","fillZeros","setOnes","logMinusOne","addNumber","transpose","ComputationCPU","addKernel","ComputationGPU","setComputation","getComputation","currentComputation","type","resize","generateData","arr","test","String","Number","t","push","newData","execute","maxIndex","Infinity","startRow","startCol","blockRows","blockCols","newRow","newCol","tmp","fraction","_row","abs","numberOfElements","min","shape","cb","divide","rowwiseSum","replicate","value","undefined","length","im2col","input","channels","height","width","kernel_h","kernel_w","pad_h","pad_w","stride_h","stride_w","currentResultRow","result","setZeros","boundingY","boundingX","currentResultCol","channel","inputOffset","y","x","maxpool","resultWidth","resultHeight","resultDepth","_max","outputOffset","round","decimalPlaces"],"sourceRoot":""}