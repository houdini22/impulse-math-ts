{"version":3,"file":"impulse-math-ts.js","mappings":"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","sources":["webpack://impulse-math-ts/webpack/bootstrap","webpack://impulse-math-ts/webpack/runtime/define property getters","webpack://impulse-math-ts/webpack/runtime/hasOwnProperty shorthand","webpack://impulse-math-ts/webpack/runtime/make namespace object","webpack://impulse-math-ts/./src/typescript/Computation/AbstractComputation.ts","webpack://impulse-math-ts/./src/typescript/Computation/MultiCore/dot.ts","webpack://impulse-math-ts/./src/typescript/Computation/ComputationMultiCore.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/dot.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/transpose.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/reluBackpropagation.ts","webpack://impulse-math-ts/./src/typescript/Computation/ComputationCPU.ts","webpack://impulse-math-ts/./src/typescript/Computation/utils.ts","webpack://impulse-math-ts/./src/typescript/Math/Matrix.ts","webpack://impulse-math-ts/./src/typescript/Math/math.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { Matrix } from \"../Math/Matrix\";\n\ninterface KernelsInterface {\n  [id: string]: (m: Matrix, m2: Matrix | number | void) => Matrix | number;\n}\n\nexport class AbstractComputation {\n  protected kernels: KernelsInterface = {};\n\n  addKernel(name: string, func: (m: Matrix, m2: Matrix | number) => Matrix | number): AbstractComputation {\n    this.kernels[name] = func;\n    return this;\n  }\n\n  execute(name: string, ...args: [Matrix, Matrix] | [Matrix, number] | [Matrix]): Matrix | number {\n    if (!this.kernels[name]) {\n      throw new Error(`Kernel '${name}' not exists.`);\n    }\n    return this.kernels[name].apply(null, args);\n  }\n}\n","//import { MatrixMultiply } from \"../../../../build/Debug/computation.node\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport const dot = (m1: Matrix, m2: Matrix) => {\n  //console.log(MatrixMultiply([1, 2, 3, 4], [4, 3, 2, 1]));\n};\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { Matrix } from \"../Math/Matrix\";\nimport { dot } from \"./MultiCore/dot\";\n\nexport class ComputationMultiCore extends AbstractComputation {\n  constructor() {\n    super();\n\n    this.addKernel(\"dot\", dot);\n\n    /*this.addKernel(\"multiply\", dot);\n    this.addKernel(\"add\", add);\n    this.addKernel(\"subtract\", subtract);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"fillZeros\", fillZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"multiplyNumber\", multiplyNumber);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"divideNumber\", divideNumber);\n    this.addKernel(\"softmaxActivation\", softmaxActivation);\n    this.addKernel(\"softmaxLoss\", softmaxLoss);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"purelinLoss\", purelinLoss);\n    this.addKernel(\"transpose\", transpose);*/\n  }\n}\n","import { Matrix } from \"../../Math/Matrix\";\n\nexport const dot = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.cols !== m2.rows) {\n    throw new Error(`DIMENSIONS error. m1.cols ${m1.rows} ${m1.cols} !== m2.rows ${m2.rows} ${m2.cols}.`);\n  }\n  const data = [];\n  for (let row = 0; row < m1.rows; ++row) {\n    data[row] = new Array(m2.cols);\n    for (let col = 0; col < m2.cols; ++col) {\n      data[row][col] = 0;\n      for (let i = 0; i < m1.cols; ++i) {\n        if (m1.data && m2.data) {\n          data[row][col] += m1.data[row][i] * m2.data[i][col];\n        }\n      }\n    }\n  }\n  return new Matrix(m1.rows, m2.cols, data);\n};\n","import {Matrix} from \"../../Math/Matrix\";\n\nexport const transpose = (m1: Matrix): Matrix => {\n    const data = [];\n    for (let col = 0; col < m1.cols; ++col) {\n        data[col] = new Array(m1.rows);\n        for (let row = 0; row < m1.rows; ++row) {\n            data[col][row] = m1.data[row][col];\n        }\n    }\n    return new Matrix(m1.cols, m1.rows, data);\n};\n","import { Matrix } from \"../../Math/Matrix\";\n\nexport const reluBackpropagation = (delta: Matrix, A: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < A.rows; row += 1) {\n    data[row] = new Array(A.cols);\n    for (let col = 0; col < A.cols; col += 1) {\n      data[row][col] = A.data[row][col] > 0 ? 1 : 0;\n    }\n  }\n  return new Matrix(A.rows, A.cols, data);\n};\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { dot } from \"./CPU/dot\";\nimport { transpose } from \"./CPU/transpose\";\nimport { reluBackpropagation } from \"./CPU/reluBackpropagation\";\n\nexport class ComputationCPU extends AbstractComputation {\n  constructor() {\n    super();\n\n    this.addKernel(\"dot\", dot);\n    this.addKernel(\"transpose\", transpose);\n    this.addKernel(\"reluBackpropagation\", reluBackpropagation);\n    /*this.addKernel(\"add\", add);\n    this.addKernel(\"subtract\", subtract);\n    this.addKernel(\"subtractFromNumber\", subtractFromNumber);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"fillZeros\", fillZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"multiplyNumber\", multiplyNumber);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"divideNumber\", divideNumber);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"logisticBackpropagation\", logisticBackpropagation);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"transpose\", transpose);\n    this.addKernel(\"pow\", pow);\n    this.addKernel(\"log\", log);\n    this.addKernel(\"logMinusOne\", logMinusOne);\n    this.addKernel(\"addNumber\", addNumber);*/\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { ComputationMultiCore } from \"./ComputationMultiCore\";\nimport { ComputationCPU } from \"./ComputationCPU\";\n\nlet currentComputation: AbstractComputation = new ComputationCPU();\n\nexport const setComputation = (type: AbstractComputation): void => {\n  currentComputation = type;\n};\n\nexport const getComputation = (): AbstractComputation => {\n  return currentComputation;\n};\n","import { getComputation } from \"../Computation\";\n\nexport class Matrix {\n  public rows = 0;\n  public cols = 0;\n  public data: number[][] | null = null;\n\n  constructor(rows = 0, cols = 0, data: number[][] | string[][] | null = null) {\n    this.resize(rows, cols);\n    if (data) {\n      this.generateData(data);\n    }\n  }\n\n  resize(rows: number, cols: number): Matrix {\n    this.rows = rows;\n    this.cols = cols;\n    this.data = new Array(this.rows);\n    for (let row = 0; row < this.rows; row += 1) {\n      this.data[row] = new Array(this.cols);\n    }\n\n    return this;\n  }\n\n  generateData(arr: number[][] | string[][] | null): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = new Array(this.cols);\n    }\n    for (let col = 0; col < this.cols; col += 1) {\n      for (let row = 0; row < this.rows; row += 1) {\n        if (typeof arr[row] === \"number\") {\n          data[row][col] = arr[row];\n        } else {\n          if (typeof arr[row][col] === \"string\") {\n            if (/^[0-9.]+$/.test(String(arr[row][col]))) {\n              data[row][col] = Number(arr[row][col]);\n            } else {\n              data[row][col] = arr[row][col];\n            }\n          } else {\n            data[row][col] = arr[row][col];\n          }\n        }\n      }\n    }\n    this.data = data;\n    return this;\n  }\n\n  sum(): number {\n    let sum = 0.0;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n    }\n    return sum;\n  }\n\n  colwiseSum(): Matrix {\n    const data = [];\n    const t = this.transpose();\n    for (let row = 0; row < t.rows; row += 1) {\n      data[row] = [0];\n      for (let col = 0; col < t.cols; col += 1) {\n        data[row][0] += t.data[row][col];\n      }\n    }\n    return new Matrix(this.cols, 1, data);\n  }\n\n  rowwiseSum(): Matrix {\n    const data = [[]];\n    for (let row = 0; row < this.rows; row += 1) {\n      let sum = 0.0;\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n      data[0].push(sum);\n    }\n    return new Matrix(1, this.rows, data);\n  }\n\n  flatten(): number[] {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        data.push(this.data[row][col]);\n      }\n    }\n    return data;\n  }\n\n  replicate(rows: number, cols: number): Matrix {\n    if (rows === 1 && this.cols === 1 && cols > 1) {\n      const newData = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < cols; col += 1) {\n          newData[row][col] = this.data[row][0];\n        }\n      }\n      return Matrix.from(newData);\n    } else if (cols === 1 && this.rows === 1 && rows > 1) {\n      const newData = [];\n      for (let row = 0; row < rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          newData[row][col] = this.data[0][col];\n        }\n      }\n      return Matrix.from(newData);\n    }\n    return this;\n  }\n\n  transpose(): Matrix {\n    return getComputation().execute(\"transpose\", this) as Matrix;\n  }\n\n  colMaxCoeffIndex(col: number): number {\n    let maxIndex = -1;\n    let max = -Infinity;\n\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data && this.data[row][col] > max) {\n        max = this.data[row][col];\n        maxIndex = row;\n      }\n    }\n\n    return maxIndex;\n  }\n\n  rowMaxCoeffIndex(row: number): number {\n    let maxIndex = -1;\n    let max = -Infinity;\n\n    for (let col = 0; col < this.cols; col += 1) {\n      if (this.data[row][col] > max) {\n        max = this.data[row][col];\n        maxIndex = col;\n      }\n    }\n\n    return maxIndex;\n  }\n\n  block(startRow: number, startCol: number, blockRows: number, blockCols: number): Matrix {\n    const data = [];\n\n    for (let row = startRow, newRow = 0; row < this.rows && row < startRow + blockRows; row += 1, newRow += 1) {\n      data[newRow] = new Array(blockCols);\n      for (let col = startCol, newCol = 0; col < this.cols && col < startCol + blockCols; col += 1, newCol += 1) {\n        data[newRow][newCol] = this.data[row][col];\n      }\n    }\n\n    return new Matrix(blockRows, blockCols, data);\n  }\n\n  col(col: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [this.data[row][col]];\n    }\n    return new Matrix(this.rows, 1, data);\n  }\n\n  row(row: number): Matrix {\n    const data = [];\n    for (let col = 0; col < this.cols; col += 1) {\n      data[col] = [this.data[row][col]];\n    }\n    return new Matrix(this.cols, 1, data);\n  }\n\n  setCol(col: number, tmp: Matrix): Matrix {\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data && tmp.data) {\n        this.data[row][col] = tmp.data[row][0];\n      }\n    }\n    return this;\n  }\n\n  sigmoid() {\n    return this.multiply(-1).exp().add(1).fraction(1);\n  }\n\n  rollToColMatrix(): Matrix {\n    const data = [];\n    let _row = 0;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        data[_row] = [];\n        data[_row++][0] = this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  abs(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.abs(this.data[row][col]);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  mean() {\n    let sum = 0;\n    const numberOfElements = this.rows * this.cols;\n\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n    }\n\n    return sum / numberOfElements;\n  }\n\n  max(): number {\n    let max = -Infinity;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        max = Math.max(this.data[row][col], max);\n      }\n    }\n    return max;\n  }\n\n  setMax(max: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.min(this.data[row][col], max);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setMin(min: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.max(this.data[row][col], min);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setZeros(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = 0;\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setOnes(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = 1;\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setRandom(parameter: number = 1): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = (Math.random() * 4 - 2) * Math.sqrt(2 / parameter); // todo: gaussian distribution;\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  fraction(num: number = 1): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = num / this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  sqrt(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.sqrt(this.data[row][col] + 1e-8);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  dot(m: Matrix): Matrix {\n    return getComputation().execute(\"dot\", this, m) as Matrix;\n  }\n\n  multiply(num: number | Matrix): Matrix {\n    if (typeof num === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          // @ts-ignore\n          data[row][col] = this.data[row][col] * num;\n        }\n      }\n      return Matrix.from(data);\n    } else {\n      if (num.rows !== this.rows || this.cols !== num.cols) {\n        throw new Error(`Dimension error: ${this.shape()} !== ${num.shape()}`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          // @ts-ignore\n          data[row][col] = this.data[row][col] * num.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n  }\n\n  subtract(m: Matrix | number): Matrix {\n    if (typeof m === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] - m;\n        }\n      }\n      return Matrix.from(data);\n    } else {\n      if (this.rows !== m.rows || this.cols !== m.cols) {\n        throw new Error(`Dimensions error: ${this.rows}, ${this.cols} !== ${m.rows}, ${m.cols}`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] - m.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n  }\n\n  forEach(cb: (num: number) => number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = cb(this.data[row][col]);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  shape(): number[] {\n    return [this.rows, this.cols];\n  }\n\n  divide(num: number | Matrix): Matrix {\n    if (typeof num === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] / num;\n        }\n      }\n      return Matrix.from(data);\n    } else {\n      if (num.rows !== this.rows || num.cols !== this.cols) {\n        throw new Error(`Dimensions error (${this.rows}, ${this.cols}) !== (${num.rows}, ${num.cols})`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] / num.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n  }\n\n  minusOne(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = 1 - this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  subtractFromNumber(num: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = num - this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  add(m: Matrix | number): Matrix {\n    if (typeof m === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] + m;\n        }\n      }\n      return Matrix.from(data);\n    } else if (m instanceof Matrix) {\n      if (m.rows !== this.rows || m.cols !== this.cols) {\n        throw new Error(`Dimention error: rows (x: ${this.rows}, y: ${this.cols}) !== (x: ${m.rows}, y: ${m.cols})`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] + m.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n    return this;\n  }\n\n  log(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.log(this.data[row][col] + 1e-8);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  tanh(): Matrix {\n    return this.exp()\n      .subtract(this.multiply(-1).exp())\n      .divide(this.exp().add(this.multiply(-1).exp()));\n  }\n\n  softmax(): Matrix {\n    const max = this.max() - 1e-8;\n    return this.subtract(max).exp().divide(this.rowwiseSum().replicate(this.cols, 1).transpose());\n  }\n\n  exp(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.exp(this.data[row][col] + 1e-8);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  pow(num): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.pow(this.data[row][col], num);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  value(row, col, value = undefined) {\n    if (value === undefined) {\n      return this.data[row][col];\n    }\n    this.data[row][col] = value;\n    return this;\n  }\n\n  copy() {\n    return Matrix.from(this.data);\n  }\n\n  static from(arr: number[][]): Matrix {\n    return new Matrix(arr.length, arr[0]?.length || 0, arr);\n  }\n\n  concat(m: Matrix) {\n    for (let row = 0; row < m.rows; row += 1) {\n      this.data.push(m.data[row]);\n    }\n    return this;\n  }\n}\n","import { Matrix } from \"./Matrix\";\n\nexport const im2col = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  pad_h: number,\n  pad_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const cols = kernel_w * kernel_h * channels;\n  const rows = ((width - kernel_w + 2 * pad_w) / stride_w + 1) * ((height - kernel_h + 2 * pad_h) / stride_h + 1);\n  let currentResultRow = 0;\n  const result = new Matrix(rows, cols).setZeros();\n\n  for (let boundingY = -pad_h; boundingY + kernel_h <= height + pad_h; boundingY += stride_h) {\n    for (let boundingX = -pad_w; boundingX + kernel_w <= width + pad_w; boundingX += stride_w) {\n      let currentResultCol = 0;\n      for (let channel = 0; channel < channels; channel++) {\n        const inputOffset = height * width * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            if (boundingY + y >= 0 && boundingX + x >= 0 && boundingX + x < width && boundingY + y < height) {\n              result.data[currentResultRow][currentResultCol] =\n                input.data[(y + boundingY) * width + boundingX + x + inputOffset][0];\n            }\n            currentResultCol++;\n          }\n        }\n      }\n      currentResultRow++;\n    }\n  }\n  return result;\n};\n\nexport const maxpool = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const resultWidth = (width - kernel_w) / stride_w + 1;\n  const resultHeight = (height - kernel_h) / stride_h + 1;\n  const resultDepth = channels;\n\n  let currentResultCol = 0;\n  const result = new Matrix(resultWidth * resultHeight * resultDepth, 1).setZeros();\n\n  for (let boundingY = 0; boundingY + kernel_h <= height; boundingY += stride_h) {\n    for (let boundingX = 0; boundingX + kernel_w <= width; boundingX += stride_w) {\n      for (let channel = 0; channel < channels; channel++) {\n        let _max = -Infinity;\n        const inputOffset = height * width * channel;\n        const outputOffset = resultWidth * resultHeight * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            _max = Math.max(_max, input.data[inputOffset + (y + boundingY) * width + boundingX + x][0]);\n          }\n        }\n        result.data[outputOffset + currentResultCol][0] = _max;\n      }\n      currentResultCol++;\n    }\n  }\n  return result;\n};\n\nexport const round = (num: number, decimalPlaces: number): number => {\n  return Math.round((num + 2.23e-16) * Math.pow(10, decimalPlaces)) / Math.pow(10, decimalPlaces);\n};\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","AbstractComputation","_classCallCheck","name","func","this","kernels","Error","concat","_len","arguments","length","args","Array","_key","apply","dot","m1","m2","ComputationMultiCore","_AbstractComputation","_this","_callSuper","addKernel","_inherits","cols","rows","data","row","col","i","Matrix","transpose","reluBackpropagation","delta","A","ComputationCPU","currentComputation","setComputation","type","getComputation","undefined","_defineProperty","resize","generateData","arr","test","String","Number","sum","t","push","newData","from","execute","maxIndex","max","startRow","startCol","blockRows","blockCols","newRow","newCol","tmp","multiply","exp","add","fraction","_row","Math","abs","numberOfElements","min","parameter","random","sqrt","num","m","shape","cb","log","subtract","divide","rowwiseSum","replicate","pow","_arr$","im2col","input","channels","height","width","kernel_h","kernel_w","pad_h","pad_w","stride_h","stride_w","currentResultRow","result","setZeros","boundingY","boundingX","currentResultCol","channel","inputOffset","y","x","maxpool","resultWidth","resultHeight","_max","outputOffset","round","decimalPlaces"],"sourceRoot":""}