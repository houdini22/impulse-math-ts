{"version":3,"file":"impulse-math-ts.js","mappings":"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","sources":["webpack://impulse-math-ts/webpack/bootstrap","webpack://impulse-math-ts/webpack/runtime/define property getters","webpack://impulse-math-ts/webpack/runtime/hasOwnProperty shorthand","webpack://impulse-math-ts/webpack/runtime/make namespace object","webpack://impulse-math-ts/./src/typescript/Computation/AbstractComputation.ts","webpack://impulse-math-ts/./src/typescript/Computation/MultiCore/dot.ts","webpack://impulse-math-ts/./src/typescript/Computation/ComputationMultiCore.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/dot.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/transpose.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/reluBackpropagation.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/add.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/subtract.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/multiply.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/divide.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/minusOne.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/log.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/pow.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/exp.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/sqrt.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/subtractNumberFrom.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/setMin.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/setMax.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/setOnes.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/setZeros.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/setRandom.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/fraction.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/max.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/abs.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/mean.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/sum.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/rowwiseSum.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/colwiseSum.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/replicate.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/colMaxCoeffIndex.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/rowMaxCoeffIndex.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/row.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/col.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/rollToColMatrix.ts","webpack://impulse-math-ts/./src/typescript/Computation/ComputationCPU.ts","webpack://impulse-math-ts/./src/typescript/Computation/utils.ts","webpack://impulse-math-ts/./src/typescript/Math/Matrix.ts","webpack://impulse-math-ts/./src/typescript/Math/math.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { Matrix } from \"../Math/Matrix\";\n\ninterface KernelsInterface {\n  [id: string]: (m: Matrix, m2: Matrix | number | void) => Matrix | number;\n}\n\nexport class AbstractComputation {\n  protected kernels: KernelsInterface = {};\n\n  addKernel(name: string, func: (m: Matrix, m2: Matrix | number) => Matrix | number): AbstractComputation {\n    this.kernels[name] = func;\n    return this;\n  }\n\n  execute(name: string, ...args: [Matrix, Matrix] | [Matrix, number] | [Matrix, number, number] | [Matrix]): Matrix | number {\n    if (!this.kernels[name]) {\n      throw new Error(`Kernel '${name}' not exists.`);\n    }\n    return this.kernels[name].apply(null, args);\n  }\n}\n","//import { MatrixMultiply } from \"../../../../build/Debug/computation.node\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport const dot = (m1: Matrix, m2: Matrix) => {\n  //console.log(MatrixMultiply([1, 2, 3, 4], [4, 3, 2, 1]));\n};\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { Matrix } from \"../Math/Matrix\";\nimport { dot } from \"./MultiCore/dot\";\n\nexport class ComputationMultiCore extends AbstractComputation {\n  constructor() {\n    super();\n\n    this.addKernel(\"dot\", dot);\n\n    /*this.addKernel(\"multiply\", dot);\n    this.addKernel(\"add\", add);\n    this.addKernel(\"subtract\", subtract);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"fillZeros\", fillZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"multiplyNumber\", multiplyNumber);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"divideNumber\", divideNumber);\n    this.addKernel(\"softmaxActivation\", softmaxActivation);\n    this.addKernel(\"softmaxLoss\", softmaxLoss);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"purelinLoss\", purelinLoss);\n    this.addKernel(\"transpose\", transpose);*/\n  }\n}\n","import { Matrix } from \"../../Math/Matrix\";\n\nexport const dot = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.cols !== m2.rows) {\n    throw new Error(`DIMENSIONS error. m1.cols ${m1.rows} ${m1.cols} !== m2.rows ${m2.rows} ${m2.cols}.`);\n  }\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = new Array(m2.cols);\n    for (let col = 0; col < m2.cols; col += 1) {\n      data[row][col] = 0;\n      for (let i = 0; i < m1.cols; i += 1) {\n        for (let j = 0; j < m2.rows; j += 1) {\n          data[row][col] += m1.data[row * m1.cols + i] * m2.data[j * m2.cols + col];\n        }\n      }\n    }\n  }\n  let newData = [];\n  data.forEach((row) => {\n    newData = [...newData, ...row];\n  })\n  return new Matrix(m1.rows, m2.cols, newData);\n};\n","import {Matrix} from \"../../Math/Matrix\";\n\nexport const transpose = (m1: Matrix): Matrix => {\n    const data = [];\n    for (let col = 0; col < m1.cols; ++col) {\n        for (let row = 0; row < m1.rows; ++row) {\n            data.push(m1.data[row * m1.cols + col]);\n        }\n    }\n    return new Matrix(m1.cols, m1.rows, data);\n};\n","import { Matrix } from \"../../Math/Matrix\";\n\nexport const reluBackpropagation = (delta: Matrix, A: Matrix): Matrix => {\n  const data = [...A.data];\n  data.forEach((value, index) => {\n    data[index] = value > 0 ? 1 : 0;\n  })\n  return new Matrix(A.rows, A.cols, data);\n};\n","import { Matrix } from \"../../Math/Matrix\";\n\nexport const add = (m1: Matrix, m: Matrix | number): Matrix => {\n  if (typeof m === \"number\") {\n    const data = [...m1.data];\n    data.forEach((value, index) => {\n      data[index] = value + m;\n    })\n    return new Matrix(m1.rows, m1.cols, data);\n  } else if (m instanceof Matrix) {\n    if (m.rows !== m1.rows || m.cols !== m1.cols) {\n      throw new Error(`Dimention error: rows (x: ${m1.rows}, y: ${m1.cols}) !== (x: ${m.rows}, y: ${m.cols})`);\n    }\n    const data = [...m1.data]\n    data.forEach((value, index) => {\n      data[index] = value + m.data[index];\n    })\n    return new Matrix(m1.rows, m1.cols, data);\n  }\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const subtract = (m1: Matrix, m: Matrix | number): Matrix => {\n  if (typeof m === \"number\") {\n    const data = [...m1.data];\n    data.forEach((value, index) => {\n      data[index] = value - m;\n    })\n    return new Matrix(m1.rows, m1.cols, data);\n  } else {\n    if (m1.rows !== m.rows || m1.cols !== m.cols) {\n      throw new Error(`Dimensions error: ${m1.rows}, ${m1.cols} !== ${m.rows}, ${m.cols}`);\n    }\n    const data = [...m1.data];\n    data.forEach((value, index) => {\n      data[index] = value - m.data[index];\n    })\n    return new Matrix(m1.rows, m1.cols, data);\n  }\n};\n","import { Matrix } from \"../../Math/Matrix\";\n\nexport const multiply = (m1: Matrix, num: Matrix | number): Matrix => {\n  if (typeof num === \"number\") {\n    const data = [...m1.data];\n    data.forEach((value, index) => {\n      data[index] = value * num;\n    })\n    return new Matrix(m1.rows, m1.cols, data);\n  } else {\n    if (num.rows !== m1.rows || m1.cols !== num.cols) {\n      throw new Error(`Dimension error: ${m1.shape()} !== ${num.shape()}`);\n    }\n    const data = [...m1.data];\n    data.forEach((value, index) => {\n      data[index] = value * num.data[index];\n    })\n    return new Matrix(m1.rows, m1.cols, data);\n  }\n};\n","import { Matrix } from \"../../Math/Matrix\";\n\nexport const divide = (m1: Matrix, num: Matrix | number): Matrix => {\n  if (typeof num === \"number\") {\n    const data = [...m1.data];\n    data.forEach((value, index) => {\n      data[index] = value / num;\n    })\n    return new Matrix(m1.rows, m1.cols, data);\n  } else {\n    if (num.rows !== m1.rows || num.cols !== m1.cols) {\n      throw new Error(`Dimensions error (${m1.rows}, ${m1.cols}) !== (${num.rows}, ${num.cols})`);\n    }\n\n    const data = [...m1.data];\n    data.forEach((value, index) => {\n      data[index] = value / num.data[index];\n    })\n    return new Matrix(m1.rows, m1.cols, data);\n  }\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const minusOne = (m1: Matrix): Matrix => {\n  const data = [...m1.data];\n  for (let index = 0; index < m1.rows * m1.cols; index += 1) {\n    data[index] = 1 - data[index];\n  }\n  return new Matrix(m1.rows, m1.cols, data);\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const log = (m1: Matrix): Matrix => {\n  const data = [...m1.data];\n  data.forEach((value, index) => {\n    data[index] = Math.log(value + 1e-8);\n  })\n  return new Matrix(m1.rows, m1.cols, data);\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const pow = (m1: Matrix, num: number): Matrix => {\n  const data = [...m1.data];\n  data.forEach((value, index) => {\n    data[index] = Math.pow(value, num);\n  })\n  return new Matrix(m1.rows, m1.cols, data);\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const exp = (m1: Matrix): Matrix => {\n  const data = [...m1.data];\n  data.forEach((value, index) => {\n    data[index] = Math.exp(value + 1e-16);\n  })\n  return new Matrix(m1.rows, m1.cols, data);\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const sqrt = (m1: Matrix): Matrix => {\n  const data = [...m1.data];\n  data.forEach((value, index) => {\n    data[index] = Math.sqrt(value + 1e-8);\n  })\n  return new Matrix(m1.rows, m1.cols, data);\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const subtractNumberFrom = (m1: Matrix, num: number): Matrix => {\n  const data = [...m1.data];\n  data.forEach((value, index) => {\n    data[index] = num - value;\n  })\n  return new Matrix(m1.rows, m1.cols, data);\n};\n","import { Matrix } from \"../../Math/Matrix\";\n\nexport const setMin = (m1: Matrix, min: number): Matrix => {\n  const data = [...m1.data];\n  data.forEach((value, index) => {\n    data[index] = Math.max(value, min);\n  })\n  return new Matrix(m1.rows, m1.cols, data);\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const setMax = (m1: Matrix, max: number): Matrix => {\n  const data = [...m1.data];\n  data.forEach((value, index) => {\n    data[index] = Math.min(value, max);\n  })\n  return new Matrix(m1.rows, m1.cols, data);\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const setOnes = (m1: Matrix): Matrix => {\n  const data = [...m1.data];\n  data.forEach((value, index) => {\n    data[index] = 1;\n  })\n  return new Matrix(m1.rows, m1.cols, data);\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const setZeros = (m1: Matrix): Matrix => {\n  const data = [...m1.data];\n  data.forEach((value, index) => {\n    data[index] = 0;\n  })\n  return new Matrix(m1.rows, m1.cols, data);\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const setRandom = (m1: Matrix, parameter: number): Matrix => {\n  const data = [...m1.data];\n  data.forEach((value, index) => {\n    data[index]  = (Math.random() * 4 - 2) * Math.sqrt(2 / parameter); // todo: gaussian distribution;\n  })\n  return new Matrix(m1.rows, m1.cols, data);\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const fraction = (m1: Matrix, num: number): Matrix => {\n  const data = [...m1.data];\n  data.forEach((value, index) => {\n    data[index] = num / value;\n  })\n  return new Matrix(m1.rows, m1.cols, data);\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const max = (m1: Matrix): number => {\n  let max = -Infinity;\n  for (let index = 0; index < m1.rows * m1.cols; index += 1) {\n    max = Math.max(m1.data[index], max);\n  }\n  return max;\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const abs = (m1: Matrix): Matrix => {\n  const data = [...m1.data];\n  data.forEach((value, index) => {\n    data[index] = Math.abs(value);\n  });\n  return new Matrix(m1.rows, m1.cols, data);\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const mean = (m1: Matrix): number => {\n  let sum = 0;\n  const numberOfElements = m1.rows * m1.cols;\n\n  for (let index = 0; index < m1.rows * m1.cols; index += 1) {\n    sum += m1.data[index];\n  }\n\n  return sum / numberOfElements;\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const sum = (m1: Matrix): number => {\n  let sum = 0.0;\n  for (let index = 0; index < m1.rows * m1.cols; index += 1) {\n    sum += m1.data[index];\n  }\n  return sum;\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const rowwiseSum = (m1: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    let sum = 0.0;\n    for (let col = 0; col < m1.cols; col += 1) {\n      sum += m1.data[row * m1.cols + col];\n    }\n    data.push(sum);\n  }\n  return new Matrix(1, m1.rows, data);\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const colwiseSum = (m1: Matrix): Matrix => {\n  const data = [];\n  const t = m1.transpose();\n  for (let row = 0; row < t.rows; row += 1) {\n    data[row] = 0;\n    for (let col = 0; col < t.cols; col += 1) {\n      data[row] += t.data[row * t.cols + col];\n    }\n  }\n  return new Matrix(m1.cols, 1, data);\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const replicate = (m1: Matrix, rows: number, cols: number): Matrix => {\n    if (rows === 1 && m1.cols === 1 && cols > 1) {\n      const newData = [];\n      for (let col = 0; col < cols; col += 1) {\n        for (let row = 0; row < m1.rows; row += 1) {\n          newData[row * cols + col] = m1.data[row * m1.cols];\n        }\n      }\n      return new Matrix(m1.rows, cols, newData);\n    }\n  else\n    if (cols === 1 && m1.rows === 1 && rows > 1) {\n      const newData = [];\n      for (let row = 0; row < rows; row += 1) {\n        for (let col = 0; col < m1.cols; col += 1) {\n          newData[row * m1.cols + col] = m1.data[col];\n        }\n      }\n      return new Matrix(rows, m1.cols, newData);\n    }\n    return m1;\n  }\n;","import { Matrix } from \"../../Math/Matrix\";\n\nexport const colMaxCoeffIndex = (m1: Matrix, col: number): number => {\n  let maxIndex = -1;\n  let max = -Infinity;\n\n  for (let row = 0; row < m1.rows; row += 1) {\n    if (m1.data[row * m1.cols + col] > max) {\n      max = m1.data[row * m1.cols + col];\n      maxIndex = row;\n    }\n  }\n\n  return maxIndex;\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const rowMaxCoeffIndex = (m1: Matrix, row: number): number => {\n  let maxIndex = -1;\n  let max = -Infinity;\n\n  for (let col = 0; col < m1.cols; col += 1) {\n    if (m1.data[row * m1.cols + col] > max) {\n      max = m1[row * m1.cols + col];\n      maxIndex = col;\n    }\n  }\n\n  return maxIndex;\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const row = (m1: Matrix, row: number): Matrix => {\n  const startIndex = row * m1.cols;\n  const data = [];\n  for (let i = startIndex; i < startIndex + m1.cols; i += 1) {\n    data.push(m1.data[i]);\n  }\n  return new Matrix(1, m1.cols, data);\n}","import { Matrix } from \"../../Math/Matrix\";\n\nexport const col = (m1: Matrix, col: number): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    data[row] = m1.data[m1.cols * row + col];\n  }\n  return new Matrix(m1.rows, 1, data);\n};","import { Matrix } from \"../../Math/Matrix\";\n\nexport const rollToColMatrix = (m1: Matrix): Matrix => {\n  const data = [];\n  for (let row = 0; row < m1.rows; row += 1) {\n    for (let col = 0; col < m1.cols; col += 1) {\n      data.push(m1.data[row * m1.cols + col]);\n    }\n  }\n  return new Matrix(m1.rows * m1.cols, 1, data);\n};","import { AbstractComputation } from \"./AbstractComputation\";\nimport { dot } from \"./CPU/dot\";\nimport { transpose } from \"./CPU/transpose\";\nimport { reluBackpropagation } from \"./CPU/reluBackpropagation\";\nimport { add } from './CPU/add'\nimport { subtract } from \"./CPU/subtract\";\nimport { multiply } from \"./CPU/multiply\";\nimport { divide } from \"./CPU/divide\";\nimport { minusOne } from \"./CPU/minusOne\";\nimport { log } from \"./CPU/log\";\nimport { pow } from \"./CPU/pow\";\nimport { exp } from \"./CPU/exp\";\nimport { sqrt } from \"./CPU/sqrt\";\nimport { subtractNumberFrom } from \"./CPU/subtractNumberFrom\";\nimport { setMin } from \"./CPU/setMin\";\nimport { setMax } from \"./CPU/setMax\";\nimport { setOnes } from \"./CPU/setOnes\";\nimport { setZeros } from \"./CPU/setZeros\";\nimport { setRandom } from \"./CPU/setRandom\";\nimport { fraction } from \"./CPU/fraction\";\nimport { max } from \"./CPU/max\";\nimport { abs } from \"./CPU/abs\";\nimport { mean } from \"./CPU/mean\";\nimport { sum } from \"./CPU/sum\";\nimport { rowwiseSum } from \"./CPU/rowwiseSum\";\nimport { colwiseSum } from \"./CPU/colwiseSum\";\nimport { replicate } from \"./CPU/replicate\";\nimport { colMaxCoeffIndex } from \"./CPU/colMaxCoeffIndex\";\nimport { rowMaxCoeffIndex } from \"./CPU/rowMaxCoeffIndex\";\nimport { row } from \"./CPU/row\";\nimport { col } from \"./CPU/col\";\nimport { rollToColMatrix } from \"./CPU/rollToColMatrix\";\n\nexport class ComputationCPU extends AbstractComputation {\n  constructor() {\n    super();\n\n    this.addKernel(\"dot\", dot);\n    this.addKernel(\"transpose\", transpose);\n    this.addKernel(\"reluBackpropagation\", reluBackpropagation);\n    this.addKernel(\"add\", add);\n    this.addKernel(\"subtract\", subtract);\n    this.addKernel(\"multiply\", multiply);\n    this.addKernel(\"divide\", divide);\n    this.addKernel(\"minusOne\", minusOne);\n    this.addKernel(\"subtractNumberFrom\", subtractNumberFrom);\n    this.addKernel(\"log\", log);\n    this.addKernel(\"exp\", exp);\n    this.addKernel(\"pow\", pow);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"setMin\", setMin);\n    this.addKernel(\"setMax\", setMax);\n    this.addKernel(\"setOnes\", setOnes);\n    this.addKernel(\"setZeros\", setZeros);\n    this.addKernel(\"setRandom\", setRandom);\n    this.addKernel(\"fraction\", fraction);\n    this.addKernel(\"max\", max);\n    this.addKernel(\"abs\", abs);\n    this.addKernel(\"mean\", mean);\n    this.addKernel(\"sum\", sum);\n    this.addKernel(\"rowwiseSum\", rowwiseSum);\n    this.addKernel(\"colwiseSum\", colwiseSum);\n    this.addKernel(\"replicate\", replicate);\n    this.addKernel(\"colMaxCoeffIndex\", colMaxCoeffIndex);\n    this.addKernel(\"rowMaxCoeffIndex\", rowMaxCoeffIndex);\n    this.addKernel(\"row\", row);\n    this.addKernel(\"col\", col);\n    this.addKernel(\"rollToColMatrix\", rollToColMatrix);\n    /*\n    this.addKernel(\"subtractFromNumber\", subtractFromNumber);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"fillZeros\", fillZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"divideNumber\", divideNumber);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"logisticBackpropagation\", logisticBackpropagation);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"transpose\", transpose);\n    this.addKernel(\"pow\", pow);\n    this.addKernel(\"log\", log);\n    this.addKernel(\"logMinusOne\", logMinusOne);\n    this.addKernel(\"addNumber\", addNumber);*/\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { ComputationMultiCore } from \"./ComputationMultiCore\";\nimport { ComputationCPU } from \"./ComputationCPU\";\n\nlet currentComputation: AbstractComputation = new ComputationCPU();\n\nexport const setComputation = (type: AbstractComputation): void => {\n  currentComputation = type;\n};\n\nexport const getComputation = (): AbstractComputation => {\n  return currentComputation;\n};\n","import { getComputation } from \"../Computation\";\nimport { minusOne } from \"../Computation/CPU/minusOne\";\n\nexport class Matrix {\n  public rows = 0;\n  public cols = 0;\n  public data: number[] | null = null;\n\n  constructor(rows = 0, cols = 0, data: number[] | null = null) {\n    this.rows = rows;\n    this.cols = cols;\n    this.data = data;\n    if (!data) {\n      this.data = new Array(rows * cols);\n    }\n  }\n\n  resize(rows: number, cols: number) {\n    this.rows = rows;\n    this.cols = cols;\n    this.data = new Array(rows * cols);\n  }\n\n  sum(): number {\n    return getComputation().execute(\"sum\", this) as number;\n  }\n\n  colwiseSum(): Matrix {\n    return getComputation().execute(\"colwiseSum\", this) as Matrix;\n  }\n\n  rowwiseSum(): Matrix {\n    return getComputation().execute(\"rowwiseSum\", this) as Matrix;\n  }\n\n  flatten(): number[] {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        data.push(this.data[row][col]);\n      }\n    }\n    return data;\n  }\n\n  replicate(rows: number, cols: number): Matrix {\n    return getComputation().execute(\"replicate\", this, rows, cols) as Matrix;\n  }\n\n  transpose(): Matrix {\n    return getComputation().execute(\"transpose\", this) as Matrix;\n  }\n\n  colMaxCoeffIndex(col: number): number {\n    return getComputation().execute(\"colMaxCoeffIndex\", this, col) as number;\n  }\n\n  rowMaxCoeffIndex(row: number): number {\n    return getComputation().execute(\"rowMaxCoeffIndex\", this, row) as number;\n  }/*\n\n  block(startRow: number, startCol: number, blockRows: number, blockCols: number): Matrix {\n    const data = [];\n\n    for (let row = startRow, newRow = 0; row < this.rows && row < startRow + blockRows; row += 1, newRow += 1) {\n      data[newRow] = new Array(blockCols);\n      for (let col = startCol, newCol = 0; col < this.cols && col < startCol + blockCols; col += 1, newCol += 1) {\n        data[newRow][newCol] = this.data[row][col];\n      }\n    }\n\n    return new Matrix(blockRows, blockCols, data);\n  }*/\n\n  col(col: number): Matrix {\n    return getComputation().execute(\"col\", this, col) as Matrix;\n  }\n\n  row(row: number): Matrix {\n    return getComputation().execute(\"row\", this, row) as Matrix;\n  }\n\n  sigmoid() {\n    return this.multiply(-1).exp().add(1).fraction(1);\n  }\n\n  rollToColMatrix(): Matrix {\n    return getComputation().execute(\"rollToColMatrix\", this) as Matrix;\n  }\n\n  abs(): Matrix {\n    return getComputation().execute(\"abs\", this) as Matrix;\n  }\n\n  mean() {\n    return getComputation().execute(\"mean\", this) as number;\n  }\n\n  max(): number {\n    return getComputation().execute(\"max\", this) as number;\n  }\n\n  setMax(max: number): Matrix {\n    return getComputation().execute(\"setMax\", this, max) as Matrix;\n  }\n\n  setMin(min: number): Matrix {\n    return getComputation().execute(\"setMin\", this, min) as Matrix;\n  }\n\n  setZeros(): Matrix {\n    return getComputation().execute(\"setZeros\", this) as Matrix;\n  }\n\n  setOnes(): Matrix {\n    return getComputation().execute(\"setOnes\", this) as Matrix;\n  }\n\n  setRandom(parameter = 1): Matrix {\n    // todo: gaussian distribution\n    return getComputation().execute(\"setRandom\", this, parameter) as Matrix;\n  }\n\n  fraction(num = 1): Matrix {\n    return getComputation().execute(\"fraction\", this, num) as Matrix;\n  }\n\n  sqrt(): Matrix {\n    return getComputation().execute(\"sqrt\", this) as Matrix;\n  }\n\n  dot(m: Matrix): Matrix {\n    return getComputation().execute(\"dot\", this, m) as Matrix;\n  }\n\n  multiply(num: number | Matrix): Matrix {\n    return getComputation().execute(\"multiply\", this, num) as Matrix;\n  }\n\n  subtract(m: Matrix | number): Matrix {\n    return getComputation().execute(\"subtract\", this, m) as Matrix;\n  }\n\n  forEach(cb: (num: number) => number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = cb(this.data[row][col]);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  shape(): number[] {\n    return [this.rows, this.cols];\n  }\n\n  divide(num: number | Matrix): Matrix {\n    return getComputation().execute(\"divide\", this, num) as Matrix;\n  }\n\n  minusOne(): Matrix {\n    return getComputation().execute(\"subtractNumberFrom\", this, -1) as Matrix;\n  }\n\n  subtractNumberFrom(num: number): Matrix {\n    return getComputation().execute(\"subtractNumberFrom\", this, num) as Matrix;\n  }\n\n  add(m: Matrix | number): Matrix {\n    return getComputation().execute(\"add\", this, m) as Matrix;\n  }\n\n  log(): Matrix {\n    return getComputation().execute(\"log\", this) as Matrix;\n  }\n\n  tanh(): Matrix {\n    return this.exp()\n      .subtract(this.multiply(-1).exp())\n      .divide(this.exp().add(this.multiply(-1).exp()));\n  }\n\n  softmax(): Matrix {\n    const max = this.max() - 1e-8;\n    return this.subtract(max).exp().divide(this.rowwiseSum().replicate(this.cols, 1).transpose());\n  }\n\n  exp(): Matrix {\n    return getComputation().execute(\"exp\", this) as Matrix;\n  }\n\n  pow(num: number): Matrix {\n    return getComputation().execute(\"pow\", this, num) as Matrix;\n  }\n\n  value(row, col, value = undefined) {\n    if (value === undefined) {\n      return this.data[row][col];\n    }\n    this.data[row][col] = value;\n    return this;\n  }\n\n  copy() {\n    return Matrix.from(this.data);\n  }\n\n  static from(arr: number[][]): Matrix {\n    return new Matrix(arr.length, arr[0]?.length || 0, arr);\n  }\n\n  concat(m: Matrix) {\n    for (let row = 0; row < m.rows; row += 1) {\n      this.data.push(m.data[row]);\n    }\n    return this;\n  }\n}\n","import { Matrix } from \"./Matrix\";\n\nexport const im2col = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  pad_h: number,\n  pad_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const cols = kernel_w * kernel_h * channels;\n  const rows = ((width - kernel_w + 2 * pad_w) / stride_w + 1) * ((height - kernel_h + 2 * pad_h) / stride_h + 1);\n  let currentResultRow = 0;\n  const result = new Matrix(rows, cols).setZeros();\n\n  for (let boundingY = -pad_h; boundingY + kernel_h <= height + pad_h; boundingY += stride_h) {\n    for (let boundingX = -pad_w; boundingX + kernel_w <= width + pad_w; boundingX += stride_w) {\n      let currentResultCol = 0;\n      for (let channel = 0; channel < channels; channel++) {\n        const inputOffset = height * width * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            if (boundingY + y >= 0 && boundingX + x >= 0 && boundingX + x < width && boundingY + y < height) {\n              result.data[currentResultRow][currentResultCol] =\n                input.data[(y + boundingY) * width + boundingX + x + inputOffset][0];\n            }\n            currentResultCol++;\n          }\n        }\n      }\n      currentResultRow++;\n    }\n  }\n  return result;\n};\n\nexport const maxpool = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const resultWidth = (width - kernel_w) / stride_w + 1;\n  const resultHeight = (height - kernel_h) / stride_h + 1;\n  const resultDepth = channels;\n\n  let currentResultCol = 0;\n  const result = new Matrix(resultWidth * resultHeight * resultDepth, 1).setZeros();\n\n  for (let boundingY = 0; boundingY + kernel_h <= height; boundingY += stride_h) {\n    for (let boundingX = 0; boundingX + kernel_w <= width; boundingX += stride_w) {\n      for (let channel = 0; channel < channels; channel++) {\n        let _max = -Infinity;\n        const inputOffset = height * width * channel;\n        const outputOffset = resultWidth * resultHeight * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            _max = Math.max(_max, input.data[inputOffset + (y + boundingY) * width + boundingX + x][0]);\n          }\n        }\n        result.data[outputOffset + currentResultCol][0] = _max;\n      }\n      currentResultCol++;\n    }\n  }\n  return result;\n};\n\nexport const round = (num: number, decimalPlaces: number): number => {\n  return Math.round((num + 2.23e-16) * Math.pow(10, decimalPlaces)) / Math.pow(10, decimalPlaces);\n};\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","AbstractComputation","_classCallCheck","name","func","this","kernels","Error","concat","_len","arguments","length","args","Array","_key","apply","dot","m1","m2","ComputationMultiCore","_AbstractComputation","_this","_callSuper","addKernel","_inherits","cols","rows","data","row","col","i","j","newData","forEach","_toConsumableArray","Matrix","transpose","push","reluBackpropagation","delta","A","index","add","m","subtract","multiply","num","shape","divide","minusOne","log","Math","pow","exp","sqrt","subtractNumberFrom","setMin","min","max","setMax","setOnes","setZeros","setRandom","parameter","random","fraction","abs","mean","sum","numberOfElements","rowwiseSum","colwiseSum","t","replicate","colMaxCoeffIndex","maxIndex","rowMaxCoeffIndex","startIndex","rollToColMatrix","ComputationCPU","currentComputation","setComputation","type","getComputation","undefined","_defineProperty","execute","cb","from","arr","_arr$","im2col","input","channels","height","width","kernel_h","kernel_w","pad_h","pad_w","stride_h","stride_w","currentResultRow","result","boundingY","boundingX","currentResultCol","channel","inputOffset","y","x","maxpool","resultWidth","resultHeight","_max","outputOffset","round","decimalPlaces"],"sourceRoot":""}