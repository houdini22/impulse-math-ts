{"version":3,"file":"impulse-math-ts.js","mappings":"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","sources":["webpack://impulse-math-ts/./build/Debug/computation.node","webpack://impulse-math-ts/external node-commonjs \"path\"","webpack://impulse-math-ts/webpack/bootstrap","webpack://impulse-math-ts/webpack/runtime/define property getters","webpack://impulse-math-ts/webpack/runtime/hasOwnProperty shorthand","webpack://impulse-math-ts/webpack/runtime/make namespace object","webpack://impulse-math-ts/webpack/runtime/node module decorator","webpack://impulse-math-ts/webpack/runtime/publicPath","webpack://impulse-math-ts/./src/typescript/Computation/AbstractComputation.ts","webpack://impulse-math-ts/./src/typescript/Computation/MultiCore/dot.ts","webpack://impulse-math-ts/./src/typescript/Computation/ComputationMultiCore.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/dot.ts","webpack://impulse-math-ts/./src/typescript/Computation/CPU/transpose.ts","webpack://impulse-math-ts/./src/typescript/Computation/ComputationCPU.ts","webpack://impulse-math-ts/./src/typescript/Computation/utils.ts","webpack://impulse-math-ts/./src/typescript/Math/Matrix.ts","webpack://impulse-math-ts/./src/typescript/Math/math.ts"],"sourcesContent":["\ntry {\n  process.dlopen(module, __dirname + require(\"path\").sep + __webpack_public_path__ + \"9e034ce62a57cddc1a2b4486c9983546.node\");\n} catch (error) {\n  throw new Error('node-loader:\\n' + error);\n}\n","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","__webpack_require__.p = \"\";","import { Matrix } from \"../Math/Matrix\";\n\ninterface KernelsInterface {\n  [id: string]: (m: Matrix, m2: Matrix | number | void) => Matrix | number;\n}\n\nexport class AbstractComputation {\n  protected kernels: KernelsInterface = {};\n\n  addKernel(name: string, func: (m: Matrix, m2: Matrix | number) => Matrix | number): AbstractComputation {\n    this.kernels[name] = func;\n    return this;\n  }\n\n  execute(name: string, ...args: [Matrix, Matrix] | [Matrix, number] | [Matrix]): Matrix | number {\n    if (!this.kernels[name]) {\n      throw new Error(`Kernel '${name}' not exists.`);\n    }\n    return this.kernels[name].apply(null, args);\n  }\n}\n","import { MatrixMultiply } from \"../../../../build/Debug/computation.node\";\nimport { Matrix } from \"../../Math/Matrix\";\n\nexport const dot = (m1: Matrix, m2: Matrix) => {\n  console.log(MatrixMultiply([1, 2, 3, 4], [4, 3, 2, 1]));\n};\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { Matrix } from \"../Math/Matrix\";\nimport { dot } from \"./MultiCore/dot\";\n\nexport class ComputationMultiCore extends AbstractComputation {\n  constructor() {\n    super();\n\n    this.addKernel(\"dot\", dot);\n\n    /*this.addKernel(\"multiply\", dot);\n    this.addKernel(\"add\", add);\n    this.addKernel(\"subtract\", subtract);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"fillZeros\", fillZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"multiplyNumber\", multiplyNumber);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"divideNumber\", divideNumber);\n    this.addKernel(\"softmaxActivation\", softmaxActivation);\n    this.addKernel(\"softmaxLoss\", softmaxLoss);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"purelinLoss\", purelinLoss);\n    this.addKernel(\"transpose\", transpose);*/\n  }\n}\n","import { Matrix } from \"../../Math/Matrix\";\n\nexport const dot = (m1: Matrix, m2: Matrix): Matrix => {\n  if (m1.cols !== m2.rows) {\n    throw new Error(`DIMENSIONS error. m1.cols ${m1.rows} ${m1.cols} !== m2.rows ${m2.rows} ${m2.cols}.`);\n  }\n  const data = [];\n  for (let row = 0; row < m1.rows; ++row) {\n    data[row] = new Array(m2.cols);\n    for (let col = 0; col < m2.cols; ++col) {\n      data[row][col] = 0;\n      for (let i = 0; i < m1.cols; ++i) {\n        if (m1.data && m2.data) {\n          data[row][col] += m1.data[row][i] * m2.data[i][col];\n        }\n      }\n    }\n  }\n  return new Matrix(m1.rows, m2.cols, data);\n};\n","import {Matrix} from \"../../Math/Matrix\";\n\nexport const transpose = (m1: Matrix): Matrix => {\n    const data = [];\n    for (let col = 0; col < m1.cols; ++col) {\n        data[col] = new Array(m1.rows);\n        for (let row = 0; row < m1.rows; ++row) {\n            data[col][row] = m1.data[row][col];\n        }\n    }\n    return new Matrix(m1.cols, m1.rows, data);\n};\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { Matrix } from \"../Math/Matrix\";\nimport { dot } from \"./CPU/dot\";\nimport {transpose} from \"./CPU/transpose\";\n\nexport class ComputationCPU extends AbstractComputation {\n  constructor() {\n    super();\n\n    this.addKernel(\"dot\", dot);\n    this.addKernel(\"transpose\", transpose);\n    /*this.addKernel(\"add\", add);\n    this.addKernel(\"subtract\", subtract);\n    this.addKernel(\"subtractFromNumber\", subtractFromNumber);\n    this.addKernel(\"fillRandom\", fillRandom);\n    this.addKernel(\"fillZeros\", fillZeros);\n    this.addKernel(\"elementWiseMultiply\", elementWiseMultiply);\n    this.addKernel(\"multiplyNumber\", multiplyNumber);\n    this.addKernel(\"elementWiseDivide\", elementWiseDivide);\n    this.addKernel(\"divideNumber\", divideNumber);\n    this.addKernel(\"logisticActivation\", logisticActivation);\n    this.addKernel(\"logisticLoss\", logisticLoss);\n    this.addKernel(\"logisticBackpropagation\", logisticBackpropagation);\n    this.addKernel(\"tanhActivation\", tanhActivation);\n    this.addKernel(\"reluActivation\", reluActivation);\n    this.addKernel(\"reluBackpropagation\", reluBackpropagation);\n    this.addKernel(\"softplusActivation\", softplusActivation);\n    this.addKernel(\"penalty\", penalty);\n    this.addKernel(\"sqrt\", sqrt);\n    this.addKernel(\"transpose\", transpose);\n    this.addKernel(\"pow\", pow);\n    this.addKernel(\"log\", log);\n    this.addKernel(\"logMinusOne\", logMinusOne);\n    this.addKernel(\"addNumber\", addNumber);*/\n  }\n}\n","import { AbstractComputation } from \"./AbstractComputation\";\nimport { ComputationMultiCore } from \"./ComputationMultiCore\";\nimport { ComputationCPU } from \"./ComputationCPU\";\n\nlet currentComputation: AbstractComputation = new ComputationCPU();\n\nexport const setComputation = (type: AbstractComputation): void => {\n  currentComputation = type;\n};\n\nexport const getComputation = (): AbstractComputation => {\n  return currentComputation;\n};\n","import { getComputation } from \"../Computation\";\n\nexport class Matrix {\n  public rows = 0;\n  public cols = 0;\n  public data: number[][] | null = null;\n\n  constructor(rows = 0, cols = 0, data: number[][] | string[][] | null = null) {\n    this.resize(rows, cols);\n    if (data) {\n      this.generateData(data);\n    }\n  }\n\n  resize(rows: number, cols: number): Matrix {\n    this.rows = rows;\n    this.cols = cols;\n    this.data = new Array(this.rows);\n    for (let row = 0; row < this.rows; row += 1) {\n      this.data[row] = new Array(this.cols);\n    }\n\n    return this;\n  }\n\n  generateData(arr: number[][] | string[][] | null): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = new Array(this.cols);\n    }\n    for (let col = 0; col < this.cols; col += 1) {\n      for (let row = 0; row < this.rows; row += 1) {\n        if (typeof arr[row] === \"number\") {\n          data[row][col] = arr[row];\n        } else {\n          if (typeof arr[row][col] === \"string\") {\n            if (/^[0-9.]+$/.test(String(arr[row][col]))) {\n              data[row][col] = Number(arr[row][col]);\n            } else {\n              data[row][col] = arr[row][col];\n            }\n          } else {\n            data[row][col] = arr[row][col];\n          }\n        }\n      }\n    }\n    this.data = data;\n    return this;\n  }\n\n  sum(): number {\n    let sum = 0.0;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n    }\n    return sum;\n  }\n\n  colwiseSum(): Matrix {\n    const data = [];\n    const t = this.transpose();\n    for (let row = 0; row < t.rows; row += 1) {\n      data[row] = [0];\n      for (let col = 0; col < t.cols; col += 1) {\n        data[row][0] += t.data[row][col];\n      }\n    }\n    return new Matrix(this.cols, 1, data);\n  }\n\n  rowwiseSum(): Matrix {\n    const data = [[]];\n    for (let row = 0; row < this.rows; row += 1) {\n      let sum = 0.0;\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n      data[0].push(sum);\n    }\n    return new Matrix(1, this.rows, data);\n  }\n\n  flatten(): number[] {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        data.push(this.data[row][col]);\n      }\n    }\n    return data;\n  }\n\n  replicate(rows: number, cols: number): Matrix {\n    if (rows === 1 && this.cols === 1 && cols > 1) {\n      const newData = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < cols; col += 1) {\n          newData[row][col] = this.data[row][0];\n        }\n      }\n      return Matrix.from(newData);\n    } else if (cols === 1 && this.rows === 1 && rows > 1) {\n      const newData = [];\n      for (let row = 0; row < rows; row += 1) {\n        newData[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          newData[row][col] = this.data[0][col];\n        }\n      }\n      return Matrix.from(newData);\n    }\n    return this;\n  }\n\n  transpose(): Matrix {\n    return getComputation().execute(\"transpose\", this) as Matrix;\n  }\n\n  colMaxCoeffIndex(col: number): number {\n    let maxIndex = -1;\n    let max = -Infinity;\n\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data && this.data[row][col] > max) {\n        max = this.data[row][col];\n        maxIndex = row;\n      }\n    }\n\n    return maxIndex;\n  }\n\n  rowMaxCoeffIndex(row: number): number {\n    let maxIndex = -1;\n    let max = -Infinity;\n\n    for (let col = 0; col < this.cols; col += 1) {\n      if (this.data[row][col] > max) {\n        max = this.data[row][col];\n        maxIndex = col;\n      }\n    }\n\n    return maxIndex;\n  }\n\n  block(startRow: number, startCol: number, blockRows: number, blockCols: number): Matrix {\n    const data = [];\n\n    for (let row = startRow, newRow = 0; row < this.rows && row < startRow + blockRows; row += 1, newRow += 1) {\n      data[newRow] = new Array(blockCols);\n      for (let col = startCol, newCol = 0; col < this.cols && col < startCol + blockCols; col += 1, newCol += 1) {\n        data[newRow][newCol] = this.data[row][col];\n      }\n    }\n\n    return new Matrix(blockRows, blockCols, data);\n  }\n\n  col(col: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [this.data[row][col]];\n    }\n    return new Matrix(this.rows, 1, data);\n  }\n\n  row(row: number): Matrix {\n    const data = [];\n    for (let col = 0; col < this.cols; col += 1) {\n      data[col] = [this.data[row][col]];\n    }\n    return new Matrix(this.cols, 1, data);\n  }\n\n  setCol(col: number, tmp: Matrix): Matrix {\n    for (let row = 0; row < this.rows; row += 1) {\n      if (this.data && tmp.data) {\n        this.data[row][col] = tmp.data[row][0];\n      }\n    }\n    return this;\n  }\n\n  sigmoid() {\n    return this.multiply(-1).exp().add(1).fraction(1);\n  }\n\n  rollToColMatrix(): Matrix {\n    const data = [];\n    let _row = 0;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        data[_row] = [];\n        data[_row++][0] = this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  abs(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.abs(this.data[row][col]);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  mean() {\n    let sum = 0;\n    const numberOfElements = this.rows * this.cols;\n\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        sum += this.data[row][col];\n      }\n    }\n\n    return sum / numberOfElements;\n  }\n\n  max(): number {\n    let max = -Infinity;\n    for (let row = 0; row < this.rows; row += 1) {\n      for (let col = 0; col < this.cols; col += 1) {\n        max = Math.max(this.data[row][col], max);\n      }\n    }\n    return max;\n  }\n\n  setMax(max: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.min(this.data[row][col], max);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setMin(min: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.max(this.data[row][col], min);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setZeros(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = 0;\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setOnes(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = 1;\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  setRandom(parameter: number = 1): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = (Math.random() * 4 - 2) * Math.sqrt(2 / parameter); // todo: gaussian distribution;\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  fraction(num: number = 1): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = num / this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  sqrt(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.sqrt(this.data[row][col] + 1e-8);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  dot(m: Matrix): Matrix {\n    return getComputation().execute(\"dot\", this, m) as Matrix;\n  }\n\n  multiply(num: number | Matrix): Matrix {\n    if (typeof num === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          // @ts-ignore\n          data[row][col] = this.data[row][col] * num;\n        }\n      }\n      return Matrix.from(data);\n    } else {\n      if (num.rows !== this.rows || this.cols !== num.cols) {\n        throw new Error(`Dimension error: ${this.shape()} !== ${num.shape()}`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          // @ts-ignore\n          data[row][col] = this.data[row][col] * num.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n  }\n\n  subtract(m: Matrix | number): Matrix {\n    if (typeof m === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] - m;\n        }\n      }\n      return Matrix.from(data);\n    } else {\n      if (this.rows !== m.rows || this.cols !== m.cols) {\n        throw new Error(`Dimensions error: ${this.rows}, ${this.cols} !== ${m.rows}, ${m.cols}`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] - m.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n  }\n\n  forEach(cb: (num: number) => number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = cb(this.data[row][col]);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  shape(): number[] {\n    return [this.rows, this.cols];\n  }\n\n  divide(num: number | Matrix): Matrix {\n    if (typeof num === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] / num;\n        }\n      }\n      return Matrix.from(data);\n    } else {\n      if (num.rows !== this.rows || num.cols !== this.cols) {\n        throw new Error(`Dimensions error (${this.rows}, ${this.cols}) !== (${num.rows}, ${num.cols})`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] / num.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n  }\n\n  minusOne(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = 1 - this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  subtractFromNumber(num: number): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = num - this.data[row][col];\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  add(m: Matrix | number): Matrix {\n    if (typeof m === \"number\") {\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] + m;\n        }\n      }\n      return Matrix.from(data);\n    } else if (m instanceof Matrix) {\n      if (m.rows !== this.rows || m.cols !== this.cols) {\n        throw new Error(`Dimention error: rows (x: ${this.rows}, y: ${this.cols}) !== (x: ${m.rows}, y: ${m.cols})`);\n      }\n      const data = [];\n      for (let row = 0; row < this.rows; row += 1) {\n        data[row] = [];\n        for (let col = 0; col < this.cols; col += 1) {\n          data[row][col] = this.data[row][col] + m.data[row][col];\n        }\n      }\n      return Matrix.from(data);\n    }\n    return this;\n  }\n\n  log(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.log(this.data[row][col] + 1e-8);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  tanh(): Matrix {\n    return this.exp()\n      .subtract(this.multiply(-1).exp())\n      .divide(this.exp().add(this.multiply(-1).exp()));\n  }\n\n  softmax(): Matrix {\n    const max = this.max() - 1e-8;\n    return this.subtract(max).exp().divide(this.rowwiseSum().replicate(this.cols, 1).transpose());\n  }\n\n  exp(): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.exp(this.data[row][col] + 1e-8);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  pow(num): Matrix {\n    const data = [];\n    for (let row = 0; row < this.rows; row += 1) {\n      data[row] = [];\n      for (let col = 0; col < this.cols; col += 1) {\n        data[row][col] = Math.pow(this.data[row][col], num);\n      }\n    }\n    return Matrix.from(data);\n  }\n\n  value(row, col, value = undefined) {\n    if (value === undefined) {\n      return this.data[row][col];\n    }\n    this.data[row][col] = value;\n    return this;\n  }\n\n  copy() {\n    return Matrix.from(this.data);\n  }\n\n  static from(arr: number[][]): Matrix {\n    return new Matrix(arr.length, arr[0]?.length || 0, arr);\n  }\n\n  concat(m: Matrix) {\n    for (let row = 0; row < m.rows; row += 1) {\n      this.data.push(m.data[row]);\n    }\n    return this;\n  }\n}\n","import { Matrix } from \"./Matrix\";\n\nexport const im2col = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  pad_h: number,\n  pad_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const cols = kernel_w * kernel_h * channels;\n  const rows = ((width - kernel_w + 2 * pad_w) / stride_w + 1) * ((height - kernel_h + 2 * pad_h) / stride_h + 1);\n  let currentResultRow = 0;\n  const result = new Matrix(rows, cols).setZeros();\n\n  for (let boundingY = -pad_h; boundingY + kernel_h <= height + pad_h; boundingY += stride_h) {\n    for (let boundingX = -pad_w; boundingX + kernel_w <= width + pad_w; boundingX += stride_w) {\n      let currentResultCol = 0;\n      for (let channel = 0; channel < channels; channel++) {\n        const inputOffset = height * width * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            if (boundingY + y >= 0 && boundingX + x >= 0 && boundingX + x < width && boundingY + y < height) {\n              result.data[currentResultRow][currentResultCol] =\n                input.data[(y + boundingY) * width + boundingX + x + inputOffset][0];\n            }\n            currentResultCol++;\n          }\n        }\n      }\n      currentResultRow++;\n    }\n  }\n  return result;\n};\n\nexport const maxpool = (\n  input: Matrix,\n  channels: number,\n  height: number,\n  width: number,\n  kernel_h: number,\n  kernel_w: number,\n  stride_h: number,\n  stride_w: number\n): Matrix => {\n  const resultWidth = (width - kernel_w) / stride_w + 1;\n  const resultHeight = (height - kernel_h) / stride_h + 1;\n  const resultDepth = channels;\n\n  let currentResultCol = 0;\n  const result = new Matrix(resultWidth * resultHeight * resultDepth, 1).setZeros();\n\n  for (let boundingY = 0; boundingY + kernel_h <= height; boundingY += stride_h) {\n    for (let boundingX = 0; boundingX + kernel_w <= width; boundingX += stride_w) {\n      for (let channel = 0; channel < channels; channel++) {\n        let _max = -Infinity;\n        const inputOffset = height * width * channel;\n        const outputOffset = resultWidth * resultHeight * channel;\n        for (let y = 0; y < kernel_h; y++) {\n          for (let x = 0; x < kernel_w; x++) {\n            _max = Math.max(_max, input.data[inputOffset + (y + boundingY) * width + boundingX + x][0]);\n          }\n        }\n        result.data[outputOffset + currentResultCol][0] = _max;\n      }\n      currentResultCol++;\n    }\n  }\n  return result;\n};\n\nexport const round = (num: number, decimalPlaces: number): number => {\n  return Math.round((num + 2.23e-16) * Math.pow(10, decimalPlaces)) / Math.pow(10, decimalPlaces);\n};\n"],"names":["process","dlopen","module","__dirname","error","Error","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","id","loaded","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","nmd","paths","children","p","AbstractComputation","name","func","this","kernels","args","apply","dot","m1","m2","console","log","MatrixMultiply","ComputationMultiCore","addKernel","cols","rows","data","row","Array","col","i","Matrix","transpose","ComputationCPU","currentComputation","setComputation","type","getComputation","resize","generateData","arr","test","String","Number","sum","t","push","newData","from","execute","maxIndex","max","startRow","startCol","blockRows","blockCols","newRow","newCol","tmp","multiply","exp","add","fraction","_row","Math","abs","numberOfElements","min","parameter","random","sqrt","num","m","shape","cb","subtract","divide","rowwiseSum","replicate","pow","length","im2col","input","channels","height","width","kernel_h","kernel_w","pad_h","pad_w","stride_h","stride_w","currentResultRow","result","setZeros","boundingY","boundingX","currentResultCol","channel","inputOffset","y","x","maxpool","resultWidth","resultHeight","_max","outputOffset","round","decimalPlaces"],"sourceRoot":""}